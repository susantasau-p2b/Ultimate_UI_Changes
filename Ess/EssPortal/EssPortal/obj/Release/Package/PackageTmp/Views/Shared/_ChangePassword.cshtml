@model P2b.Global.LoginDetails
@{
    Layout = null;
}
<div id="createdialog">
    @using (Html.BeginForm(null, null, FormMethod.Post, new { Id = "frmChangePassword", name = "frmChangePassword" }))
    {
        <div class="child-div content_margine">
            @Html.LabelFor(e => e.OldPwd, "Old PassWord :", new { @class = "popup-content-label must" })@Html.TextBoxFor(e => e.OldPwd, new { @type = "password" })
        </div>
        <div class="child-div content_margine">
            @Html.LabelFor(e => e.NewPwd, "New PassWord :", new { @class = "popup-content-label must" })@Html.TextBoxFor(e => e.NewPwd, new { @type = "password" })
        </div>

        <div class="child-div content_margine">
            <label class="content-label must">Confirm Password :</label><input type="password" id="Confrm_password" />
        </div>
        <div class="child-div content_margine">
            @Html.LabelFor(e => e.SecQ, "Security Question :", new { @class = "content-label" })@Html.TextBoxFor(e => e.SecQ)
        </div>
        <div class="child-div content_margine">
            @Html.LabelFor(e => e.SecAns, "Security Answer :", new { @class = "content-label" })@Html.TextBoxFor(e => e.SecAns)
        </div>
        <div class="child-div content_margine">
            @Html.LabelFor(e => e.EmailId, "Email Id : ", new { @class = "content-label" })@Html.TextBoxFor(e => e.EmailId)
        </div>
    }
</div>
<script>
    $(function () {
        $('button').button();
        var FormValidation = { ValidationField: {} };
        if (typeof (Storage) !== "undefined") {
            console.log("webstorage Avaliable");
            localStorage.clear();

            $.get('@Url.Action("GetPasswordPolicy", "PasswordPolicy")', function (data) {
                $.each(data, function (i, k) {
                    localStorage.setItem("" + i + "", "" + k + "");
                });
                FormValidation.ValidationField = {
                    minlength: localStorage.getItem("MinPwdLength"),
                    minupchars: localStorage.getItem("MinUpChars"),
                    minlowchars: localStorage.getItem("MinLowChars"),
                    minnonos: localStorage.getItem("MinNoNos"),
                    minsymbol: localStorage.getItem("MinSymbols")
                };
                $('#NewPwd').ValidatePassword(FormValidation.ValidationField);
                if (localStorage.getItem("SecurityQuestion") === "false") {
                    $('#SecQ,#SecAns').parent().hide();
                } else {
                    $('#SecQ,#SecAns').parent().show();
                }
            });
            console.log(FormValidation.ValidationField);
        }
        else {
            alert("Webstorage is Not Avaliable");
        }
        var check_confrm_pass = function () {
            var valid;
            if ($('#NewPwd').val() === $('#Confrm_password').val()) {
                return valid=true;
            } else {
                alert("Confirm PassWrod Are Not Match");
                return valid=false;
            }
        };
        $.fn.doval = function () {
            var valid;
            var PerformValidation = $('#NewPwd').DoValidation($('#NewPwd'), FormValidation.ValidationField);
            var confirm_pass_val = check_confrm_pass();
            if (PerformValidation == true && confirm_pass_val == true) {
                return valid=true;
            } else {
                return valid=false;
            }
        };
    });
</script>
<style>
    .child-div{
        display:inline-block;
    }
    .popup-content-label {
        float: left;
        width: 124px;
        display: block;
    }
    .content-label {
        float: left;
        width: 124px;
        display: block;
    }
</style>