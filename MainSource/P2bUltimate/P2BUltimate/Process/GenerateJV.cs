using System;
using P2b.Global;
using P2BUltimate.App_Start;
using System.Collections.Generic;
using System.Linq;
using System.Data.Entity;
using P2BUltimate.Models;
using Payroll;
using P2BUltimate.Security;
using System.IO;
using System.Transactions;
namespace P2BUltimate.Process
{
    public class GenerateJV
    {
        public static Int32 _returnTransctionAmt(double oTransctionAmt)
        {
            Int32 temp = 0;
            var aa = oTransctionAmt - (int)oTransctionAmt;
            if (aa != 0.0)
            {
                temp = Convert.ToInt32(Convert.ToDouble(oTransctionAmt.ToString("0.00")) * 100);
            }
            else
            {
                temp = Convert.ToInt32(oTransctionAmt) * 100;
            }
            return temp;
        }
        public static EmployeePayroll _returnEmpSalaryYearly(Int32 EmpPayId, string PayMonth)
        {
            using (DataBaseContext db = new DataBaseContext())
            {


                EmployeePayroll EmployeePayroll = db.EmployeePayroll.Where(q => q.Id == EmpPayId && q.SalaryT.Any(e => e.PayMonth == PayMonth))
                    .Include(e => e.Employee.EmpOffInfo)
                    .Include(e => e.Employee.GeoStruct.Location.LocationObj)
                    .Include(e => e.SalaryT)
                    .Include(e => e.SalaryT.Select(r => r.Geostruct.Location))
                    .Include(e => e.SalaryT.Select(r => r.Geostruct.Location.LocationObj))
                    .Include(e => e.SalaryT.Select(r => r.Geostruct.Company))
                    .Include(e => e.SalaryT.Select(r => r.FuncStruct))
                    .Include(e => e.SalaryT.Select(r => r.FuncStruct.JobPosition))
                    .Include(e => e.SalaryT.Select(r => r.PayStruct))
                     .Include(e => e.SalaryT.Select(r => r.SalEarnDedT))
                     .Include(e => e.SalaryT.Select(s => s.SalEarnDedT.Select(w => w.SalaryHead)))
                     .Include(e => e.SalaryT.Select(r => r.SalEarnDedT.Select(t => t.SalaryHead.SalHeadOperationType)))
                    .Include(e => e.SalaryT.Select(r => r.PaymentBranch))
                    //.Include(e => e.SalaryT.Select(r => r.AccType))
                    //.Include(e => e.SalaryT.Select(r => r.PayMode))
                    ////.Include(e => e.YearlyPaymentT)
                    ////.Include(e => e.YearlyPaymentT.Select(r => r.SalaryHead))
                    ////.Include(e => e.YearlyPaymentT.Select(r => r.SalaryHead.SalHeadOperationType))
                    .Include(e => e.Employee.EmpOffInfo.AccountType)
                    .Include(e => e.Employee.EmpOffInfo.Branch)
                    .Include(e => e.Employee.EmpName)
                    //.AsNoTracking()
                    .AsParallel()
                    .FirstOrDefault();


                return EmployeePayroll;
            }
        }
        public static String NarrationFormat(string Narration, string Paymonth, string LocCode, string Empcode, string EmpName, string Salcode, string SalDesc)
        {
            string Narrationrep = "";
            if (Narration != null)
            {
                Narrationrep = Narration;
                if (Paymonth != null)
                {
                    Narrationrep = Narrationrep.Replace("#PAYMONTH", Paymonth);
                }
                else
                {
                    Narrationrep = Narrationrep.Replace("#PAYMONTH", "");
                }
                if (LocCode != null)
                {
                    Narrationrep = Narrationrep.Replace("#LOCCODE", LocCode);
                }
                else
                {
                    Narrationrep = Narrationrep.Replace("#LOCCODE", "");
                }
                if (Empcode != null)
                {
                    Narrationrep = Narrationrep.Replace("#EMPCODE", Empcode);
                }
                else
                {
                    Narrationrep = Narrationrep.Replace("#EMPCODE", "");
                }
                if (EmpName != null)
                {
                    Narrationrep = Narrationrep.Replace("#EMPNAME", EmpName);
                }
                else
                {
                    Narrationrep = Narrationrep.Replace("#EMPNAME", "");
                }
                if (Salcode != null)
                {
                    Narrationrep = Narrationrep.Replace("#SALCODE", Salcode);
                }
                else
                {
                    Narrationrep = Narrationrep.Replace("#SALCODE", "");
                }
                if (SalDesc != null)
                {
                    Narrationrep = Narrationrep.Replace("#SALDESC", SalDesc);
                }
                else
                {
                    Narrationrep = Narrationrep.Replace("#SALDESC", "");
                }

            }

            return Narrationrep;
        }
        public static EmployeePayroll _returnEmpNotInSalaryYearly(Int32 EmpPayId, string PayMonth)
        {
            using (DataBaseContext db = new DataBaseContext())
            {
                EmployeePayroll EmployeePayroll = db.EmployeePayroll.Where(q => q.Id == EmpPayId && q.SalaryT.Any(e => e.PayMonth != PayMonth))
    .Include(e => e.Employee.EmpOffInfo)
    .Include(e => e.Employee.GeoStruct.Location.LocationObj)
    .Include(e => e.Employee.GeoStruct.Company)
    .Include(e => e.SalaryT)
    .Include(e => e.YearlyPaymentT)
    .Include(e => e.YearlyPaymentT.Select(r => r.SalaryHead))
    .Include(e => e.YearlyPaymentT.Select(r => r.SalaryHead.SalHeadOperationType))
    .Include(e => e.Employee.EmpOffInfo.AccountType)
    .Include(e => e.Employee.EmpOffInfo.Branch)
    .Include(e => e.Employee.EmpOffInfo.Bank)
    .Include(e => e.Employee.EmpName)
                     .AsParallel()
    .FirstOrDefault();
                return EmployeePayroll;
            }
        }
        public static EmployeePayroll _returnEmpOnlyYearly(Int32 EmpPayId, string PayMonth)
        {
            using (DataBaseContext db = new DataBaseContext())
            {
                EmployeePayroll EmployeePayroll = db.EmployeePayroll.Where(q => q.Id == EmpPayId && q.SalaryT.Any(e => e.PayMonth == PayMonth))
    .Include(e => e.Employee.EmpOffInfo)
    .Include(e => e.Employee.GeoStruct.Location.LocationObj)
    .Include(e => e.Employee.GeoStruct.Company)
    .Include(e => e.SalaryT)
    .Include(e => e.YearlyPaymentT)
    .Include(e => e.YearlyPaymentT.Select(r => r.SalaryHead))
    .Include(e => e.YearlyPaymentT.Select(r => r.SalaryHead.SalHeadOperationType))
    .Include(e => e.Employee.EmpOffInfo.AccountType)
    .Include(e => e.Employee.EmpOffInfo.Branch)
     .Include(e => e.Employee.EmpOffInfo.Bank)
    .Include(e => e.Employee.EmpName)
                     .AsParallel()
    .FirstOrDefault();
                return EmployeePayroll;
            }
        }
        public static EmployeePayroll _returnEmpOnlyYearlypayslip(Int32 EmpPayId, string PayMonth, List<int> JVParameter_SalaryHead)
        {
            using (DataBaseContext db = new DataBaseContext())
            {
                //            EmployeePayroll EmployeePayroll = db.EmployeePayroll.Where(q => q.Id == EmpPayId && q.SalaryT.Any(e => e.PayMonth == PayMonth))
                //.Include(e => e.Employee.EmpOffInfo)
                //.Include(e => e.Employee.GeoStruct.Location.LocationObj)
                //.Include(e => e.Employee.GeoStruct.Company)
                //.Include(e => e.SalaryT)
                //.Include(e => e.YearlyPaymentT)
                //.Include(e => e.YearlyPaymentT.Select(r => r.SalaryHead))
                //.Include(e => e.YearlyPaymentT.Select(r => r.SalaryHead.SalHeadOperationType))
                //.Include(e => e.Employee.EmpOffInfo.AccountType)
                //.Include(e => e.Employee.EmpOffInfo.Branch)
                // .Include(e => e.Employee.EmpOffInfo.Bank)
                //.Include(e => e.Employee.EmpName)
                //                 .AsParallel()
                //.FirstOrDefault();
                var OEmpPayroll = new EmployeePayroll();
                OEmpPayroll = db.EmployeePayroll.Where(e => e.Id == EmpPayId).FirstOrDefault();
                var OEmp = db.EmployeePayroll.Where(e => e.Id == EmpPayId).Select(r => r.Employee).FirstOrDefault();
                var OEmpOff = db.EmployeePayroll.Where(e => e.Id == EmpPayId).Select(r => r.Employee.EmpOffInfo).FirstOrDefault();
                var EmpName = db.Employee.Where(e => e.Id == OEmp.Id).Select(r => r.EmpName).FirstOrDefault();
                var PayBranch = db.EmpOff.Where(e => e.Id == OEmpOff.Id).Select(r => r.Branch).FirstOrDefault();
                var AccountType = db.EmpOff.Where(e => e.Id == OEmpOff.Id).Select(r => r.AccountType).FirstOrDefault();
                var Paymentbank = db.EmpOff.Where(e => e.Id == OEmpOff.Id).Select(r => r.Bank).FirstOrDefault();

                var Companyobj = db.Employee.Include(s => s.GeoStruct).Include(s => s.GeoStruct.Company).Where(e => e.Id == OEmp.Id).Select(r => r.GeoStruct.Company).FirstOrDefault();
                OEmp.EmpName = EmpName;
                OEmp.GeoStruct = db.Employee.Where(e => e.Id == OEmp.Id).Select(e => e.GeoStruct).FirstOrDefault();
                OEmp.GeoStruct.Location = db.Employee.Where(e => e.Id == OEmp.Id).Select(e => e.GeoStruct.Location).FirstOrDefault();
                OEmp.GeoStruct.Location.LocationObj = db.Employee.Where(e => e.Id == OEmp.Id).Select(e => e.GeoStruct.Location.LocationObj).FirstOrDefault();
                OEmp.GeoStruct.Company = Companyobj;

                OEmp.EmpOffInfo.Branch = PayBranch;
                OEmp.EmpOffInfo.AccountType = AccountType;
                OEmp.EmpOffInfo = OEmpOff;
                OEmp.EmpOffInfo.Bank = Paymentbank;

                OEmpPayroll.Employee = OEmp;
                List<SalaryT> SalaryTList = new List<SalaryT>();
                var SalaryT = new SalaryT();
                SalaryT = db.SalaryT.Where(e => e.EmployeePayroll_Id == EmpPayId && e.PayMonth == PayMonth).FirstOrDefault();

                List<string> salheadoperationtype = new List<string>(new string[] { "LVENCASH", "LTA", "GRATUITY", "BONUS", "LTC", "MEDALLOW" });

                List<YearlyPaymentT> YearlyPaymentT = db.YearlyPaymentT.Include(s => s.SalaryHead).Include(s => s.SalaryHead.SalHeadOperationType).Where(e => e.EmployeePayroll_Id == EmpPayId && e.PayMonth == PayMonth
                    && salheadoperationtype.Contains(e.SalaryHead.SalHeadOperationType.LookupVal.ToUpper()) && JVParameter_SalaryHead.Contains(e.SalaryHead.Id)).ToList();

                //List<YearlyPaymentT> YearlyPaymentT = db.YearlyPaymentT.Include(s => s.SalaryHead).Include(s => s.SalaryHead.SalHeadOperationType).Where(e => e.EmployeePayroll_Id == EmpPayId && e.PayMonth == PayMonth 
                //    && e.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH" ||
                //                e.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "LTA"
                //                || e.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY"
                //                 || e.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "BONUS"
                //                  || e.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "LTC"
                //                   || e.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW"
                //    && JVParameter_SalaryHead.Contains(e.SalaryHead.Id)).ToList();
                SalaryTList.Add(SalaryT);
                OEmpPayroll.SalaryT = SalaryTList;
                OEmpPayroll.YearlyPaymentT = YearlyPaymentT;


                return OEmpPayroll;
            }
        }
        public static List<BMSPaymentReq> _returnEmpOfficiatingPayment(Int32 EmpPayId, string PayMonth)
        {
            using (DataBaseContext db = new DataBaseContext())
            {

                //var Bmspaymentreqlist1 = db.BMSPaymentReq
                //    .Include(e => e.GeoStruct)
                //     .Include(e => e.GeoStruct.Location)
                //      .Include(e => e.GeoStruct.Location.LocationObj)
                //       .Include(e => e.GeoStruct.Company)
                //         .Include(e => e.FuncStruct)
                //    .Include(e => e.EmployeePayroll)
                //    .Include(e => e.EmployeePayroll.Employee)
                //    .Include(e => e.EmployeePayroll.Employee.EmpOffInfo)
                //    .Include(e => e.EmployeePayroll.Employee.EmpOffInfo.Bank)
                //    .Include(e => e.OfficiatingPaymentT)
                //    .Include(e => e.OfficiatingPaymentT.Select(r => r.SalaryHead))
                //     .Include(e => e.OfficiatingPaymentT.Select(r => r.SalaryHead.Type))
                //    .Where(e => e.EmployeePayroll_Id == EmpPayId && e.PayMonth == PayMonth && e.IsCancel == false && e.TrClosed == true).ToList();



                var iBmspaymentreqlist = db.BMSPaymentReq
                 .Where(e => e.EmployeePayroll_Id == EmpPayId && e.PayMonth == PayMonth && e.IsCancel == false && e.TrClosed == true && e.TrReject == false).ToList();

                var Bmspaymentreqlist = new List<BMSPaymentReq>();

                if (iBmspaymentreqlist.Count() > 0)
                {
                    foreach (var item in iBmspaymentreqlist)
                    {
                        item.GeoStruct = db.GeoStruct.Where(e => e.Id == item.GeoStruct_Id).FirstOrDefault();
                        item.GeoStruct.Location = db.Location.Where(e => e.Id == item.GeoStruct.Location_Id).FirstOrDefault();
                        item.GeoStruct.Location.LocationObj = db.LocationObj.Where(e => e.Id == item.GeoStruct.Location.LocationObj_Id).FirstOrDefault();
                        item.GeoStruct.Company = db.Company.Where(e => e.Id == item.GeoStruct.Company_Id).FirstOrDefault();
                        item.FuncStruct = db.FuncStruct.Where(e => e.Id == item.FuncStruct_Id).FirstOrDefault();
                        item.EmployeePayroll = db.EmployeePayroll.Where(e => e.Id == item.EmployeePayroll_Id).FirstOrDefault();
                        item.EmployeePayroll.Employee = db.Employee.Where(e => e.Id == item.EmployeePayroll.Employee_Id).FirstOrDefault();
                        item.EmployeePayroll.Employee.EmpOffInfo = db.EmpOff.Where(e => e.Id == item.EmployeePayroll.Employee.EmpOffInfo_Id).FirstOrDefault();
                        item.EmployeePayroll.Employee.EmpOffInfo.Bank = db.Bank.Where(e => e.Id == item.EmployeePayroll.Employee.EmpOffInfo.Bank_Id).FirstOrDefault();
                        item.OfficiatingPaymentT = db.BMSPaymentReq.Where(e => e.Id == item.Id).Select(e => e.OfficiatingPaymentT.ToList()).FirstOrDefault();
                        foreach (var offpayment in item.OfficiatingPaymentT)
                        {
                            offpayment.SalaryHead = db.SalaryHead.Include(e => e.Type).Where(e => e.Id == offpayment.SalaryHead_Id).FirstOrDefault();

                        }
                        item.OfficiatingPaymentT = item.OfficiatingPaymentT.Where(e => e.SalaryHead.Type.LookupVal.ToUpper() == "DEDUCTION").ToList();
                        Bmspaymentreqlist.Add(item);

                    }
                }



                return Bmspaymentreqlist;
            }
        }

        public static EmployeePayroll _returnEmpSalaryArrear(Int32 EmpPayId, string PayMonth)
        {
            using (DataBaseContext db = new DataBaseContext())
            {
                EmployeePayroll OArrSalaryTF_temp = db.EmployeePayroll.Where(q => q.Id == EmpPayId && q.SalaryArrearT.Any(e => e.PayMonth == PayMonth))
                     .Include(e => e.Employee.EmpOffInfo)
                       .Include(e => e.Employee.EmpOffInfo.Bank)
                       .Include(r => r.SalaryArrearT)
                       .Include(e => e.SalaryArrearT.Select(r => r.GeoStruct.Location))
                       .Include(e => e.SalaryArrearT.Select(r => r.GeoStruct.Location.LocationObj))
                       .Include(e => e.SalaryArrearT.Select(r => r.GeoStruct.Company))
                       .Include(e => e.SalaryArrearT.Select(r => r.FuncStruct))
                    //.Include(e => e.SalaryArrearT.Select(r => r.GeoStruct.Company))
                       .Include(e => e.SalaryArrearT.Select(r => r.SalaryArrearPaymentT))
                       .Include(e => e.SalaryArrearT.Select(r => r.SalaryArrearPaymentT.Select(t => t.SalaryHead)))
                    //.Include(e => e.SalaryArrearT.Select(r => r.SalaryArrearPaymentT.Select(d => d.SalaryHead.SalHeadOperationType)))
                       .AsParallel()
                       .FirstOrDefault();
                return OArrSalaryTF_temp;
            }
        }
        public static EmployeePayroll _returnEmpLoanAndOtherDed(Int32 EmpPayId, string PayMonth)
        {
            using (DataBaseContext db = new DataBaseContext())
            {
                // var _NextMonth_PayMonth = Convert.ToDateTime("01/" + PayMonth).AddMonths(1).Date;

                //EmployeePayroll OEmployeePayroll_loan = db.EmployeePayroll.Where(q => q.Id == EmpPayId && q.SalaryT.Any(e => e.PayMonth == PayMonth))
                //    .Include(e => e.Employee.EmpOffInfo.NationalityID)
                //    .Include(e => e.Employee.EmpName)
                //     .Include(e => e.LoanAdvRequest)
                //     .Include(e => e.LoanAdvRequest.Select(r => r.LoanAccBranch.LocationObj))
                //         .Include(e => e.LoanAdvRequest.Select(r => r.LoanAdvanceHead))
                //         .Include(e => e.LoanAdvRequest.Select(r => r.LoanAdvanceHead.SalaryHead))
                //         .Include(e => e.LoanAdvRequest.Select(r => r.LoanAdvRepaymentT))
                //    .Include(e => e.SalaryT.Select(r => r.Geostruct.Location.LocationObj))
                //    .Include(e => e.SalaryT.Select(r => r.Geostruct.Company))
                //    .Include(e => e.SalaryT.Select(r => r.FuncStruct))
                //    .Include(e => e.SalaryT.Select(r => r.PFECRR))
                //    .Include(e => e.SalaryT.Select(r => r.PaymentBranch))
                //    .Include(e => e.SalaryT.Select(s => s.PTaxTransT))
                //    .Include(e => e.SalaryT.Select(r => r.LWFTransT))
                //    .Include(e => e.SalaryT.Select(r => r.ESICTransT))
                //    .Include(e => e.SalaryT.Select(r => r.ITaxTransT))
                //    .Include(e => e.SalaryT.Select(r => r.PerkTransT))
                //    .Include(e => e.SalaryT.Select(r => r.SalEarnDedT))//VR
                //    .Include(e => e.SalaryT.Select(s => s.SalEarnDedT.Select(w => w.SalaryHead)))
                //     .Include(e => e.SalaryT.Select(r => r.SalEarnDedT.Select(t => t.SalaryHead.SalHeadOperationType)))
                //     .AsParallel()
                //    // .AsNoTracking()
                //    .FirstOrDefault();
                var OEmpPayroll = new EmployeePayroll();
                OEmpPayroll = db.EmployeePayroll.Where(e => e.Id == EmpPayId).FirstOrDefault();
                var OEmp = db.EmployeePayroll.Where(e => e.Id == EmpPayId).Select(r => r.Employee).FirstOrDefault();
                var OEmpOff = db.EmployeePayroll.Where(e => e.Id == EmpPayId).Select(r => r.Employee.EmpOffInfo).FirstOrDefault();
                var EmpName = db.Employee.Where(e => e.Id == OEmp.Id).Select(r => r.EmpName).FirstOrDefault();
                var PayBranch = db.EmpOff.Where(e => e.Id == OEmpOff.Id).Select(r => r.Branch).FirstOrDefault();
                var AccountType = db.EmpOff.Where(e => e.Id == OEmpOff.Id).Select(r => r.AccountType).FirstOrDefault();
                var Paymentbank = db.EmpOff.Where(e => e.Id == OEmpOff.Id).Select(r => r.Bank).FirstOrDefault();
                var NationalityID = db.Employee.Where(e => e.Id == OEmp.Id).Select(r => r.EmpOffInfo.NationalityID).FirstOrDefault();
                OEmp.EmpName = EmpName;

                OEmp.EmpName = EmpName;
                OEmpOff.NationalityID = NationalityID;
                OEmp.EmpOffInfo.Branch = PayBranch;
                OEmp.EmpOffInfo.AccountType = AccountType;
                OEmp.EmpOffInfo = OEmpOff;
                OEmp.EmpOffInfo.Bank = Paymentbank;

                OEmpPayroll.Employee = OEmp;
                //OEmpPayroll.Employee.EmpOffInfo.NationalityID = NationalityID;
                List<LoanAdvRequest> LoanAdvRequest = new List<LoanAdvRequest>();
                var LoanAdvRequestObj = new LoanAdvRequest();
                LoanAdvRequest = db.LoanAdvRequest.Where(e => e.EmployeePayroll_Id == EmpPayId && e.IsActive == true).ToList();
                foreach (var i in LoanAdvRequest)
                {

                    var LoanAccBranch = db.LoanAdvRequest.Where(e => e.Id == i.Id).Select(r => r.LoanAccBranch).FirstOrDefault();
                    var LoanAccBranch_LocationObj = db.Location.Where(e => e.Id == LoanAccBranch.Id).Select(r => r.LocationObj).FirstOrDefault();
                    var LoanAdvanceHead = db.LoanAdvRequest.Where(e => e.Id == i.Id).Select(r => r.LoanAdvanceHead).FirstOrDefault();
                    var SalaryHead = db.LoanAdvanceHead.Where(e => e.Id == LoanAdvanceHead.Id).Select(r => r.SalaryHead).FirstOrDefault();
                    List<LoanAdvRepaymentT> LoanAdvRepaymentTList = new List<LoanAdvRepaymentT>();

                    var LoanAdvRepaymentT = db.LoanAdvRequest.Where(e => e.Id == i.Id).Select(r => r.LoanAdvRepaymentT.Where(t => t.PayMonth == PayMonth).ToList()).FirstOrDefault();
                    i.LoanAccBranch.LocationObj = LoanAccBranch_LocationObj;
                    i.LoanAdvanceHead = LoanAdvanceHead;
                    i.LoanAdvanceHead.SalaryHead = SalaryHead;

                    i.LoanAdvRepaymentT = (LoanAdvRepaymentT);

                }
                List<SalaryT> SalaryTList = new List<SalaryT>();
                var SalaryT = new SalaryT();
                SalaryT = db.SalaryT.Where(e => e.EmployeePayroll_Id == EmpPayId && e.PayMonth == PayMonth).FirstOrDefault();
                var GeoStruct = db.SalaryT.Where(e => e.Id == SalaryT.Id).Select(r => r.Geostruct).FirstOrDefault();
                var PayStruct = db.SalaryT.Where(e => e.Id == SalaryT.Id).Select(r => r.PayStruct).FirstOrDefault();
                var Company = db.GeoStruct.Where(e => e.Id == GeoStruct.Id).Select(r => r.Company).FirstOrDefault();
                var Location = db.GeoStruct.Where(e => e.Id == GeoStruct.Id).Select(r => r.Location).FirstOrDefault();
                var Location_LocationObj = db.Location.Where(e => e.Id == Location.Id).Select(r => r.LocationObj).FirstOrDefault();

                var FuncStruct = db.SalaryT.Where(e => e.Id == SalaryT.Id).Select(r => r.FuncStruct).FirstOrDefault();
                var JobPosition = db.FuncStruct.Where(e => e.Id == FuncStruct.Id).Select(r => r.JobPosition).FirstOrDefault();
                var PFECRR = db.SalaryT.Where(e => e.Id == SalaryT.Id).Select(r => r.PFECRR).FirstOrDefault();
                var PaymentBranch = db.SalaryT.Where(e => e.Id == SalaryT.Id).Select(r => r.PaymentBranch).FirstOrDefault();
                var PTaxTransT = db.SalaryT.Where(e => e.Id == SalaryT.Id).Select(r => r.PTaxTransT).FirstOrDefault();
                var LWFTransT = db.SalaryT.Where(e => e.Id == SalaryT.Id).Select(r => r.LWFTransT).FirstOrDefault();
                var ESICTransT = db.SalaryT.Where(e => e.Id == SalaryT.Id).Select(r => r.ESICTransT).FirstOrDefault();
                var ITaxTransT = db.SalaryT.Where(e => e.Id == SalaryT.Id).Select(r => r.ITaxTransT).FirstOrDefault();
                List<PerkTransT> PerkTransT = db.SalaryT.Where(e => e.Id == SalaryT.Id).Select(r => r.PerkTransT.ToList()).FirstOrDefault();
                List<SalEarnDedT> SalEarnDedT = db.SalaryT.Where(e => e.Id == SalaryT.Id).Select(r => r.SalEarnDedT.ToList()).FirstOrDefault();
                foreach (var i in SalEarnDedT)
                {
                    var SalEarnDedTObj = db.SalEarnDedT.Where(e => e.Id == i.Id).Select(r => r.SalaryHead).FirstOrDefault();
                    var SalaryHead = db.SalaryHead.Where(e => e.Id == SalEarnDedTObj.Id).FirstOrDefault();
                    var SalHeadOperationType = db.SalaryHead.Where(e => e.Id == SalEarnDedTObj.Id).Select(r => r.SalHeadOperationType).FirstOrDefault();
                    i.SalaryHead = SalaryHead;
                    i.SalaryHead.SalHeadOperationType = SalHeadOperationType;
                }
                SalaryT.Geostruct.Location = Location;
                SalaryT.Geostruct.Location.LocationObj = Location_LocationObj;
                SalaryT.Geostruct.Company = Company;
                SalaryT.PayStruct = PayStruct;
                SalaryT.FuncStruct = FuncStruct;
                SalaryT.FuncStruct.JobPosition = JobPosition;
                SalaryT.PFECRR = PFECRR;
                SalaryT.PaymentBranch = PaymentBranch;
                SalaryT.PTaxTransT = PTaxTransT;
                SalaryT.LWFTransT = LWFTransT;
                SalaryT.ESICTransT = ESICTransT;
                SalaryT.ITaxTransT = ITaxTransT;
                SalaryT.PerkTransT = PerkTransT;
                SalaryT.SalEarnDedT = SalEarnDedT;

                SalaryTList.Add(SalaryT);


                OEmpPayroll.Employee = OEmp;

                OEmpPayroll.LoanAdvRequest = LoanAdvRequest;
                OEmpPayroll.SalaryT = SalaryTList;
                //EmployeePayroll_loan = OEmpPayroll;

                return OEmpPayroll;



            }
        }

        public static JVParameter _returnJvParm(Int32 Id)
        {
            using (DataBaseContext db = new DataBaseContext())
            {
                JVParameter JVParameter = db.JVParameter.Include(e => e.SalaryHead)
                    .Include(e => e.JVGroup)
                    .Include(e => e.SalaryHead.Select(a => a.SalHeadOperationType))
                    .Include(e => e.FuncStruct).Include(e => e.PayStruct)
                    .Include(e => e.FuncStruct.JobPosition)
                    .Include(e => e.JobPosition)
                    .Include(e => e.PaymentBank)
                    .Where(e => e.Id == Id).FirstOrDefault();
                return JVParameter;
            }
        }

        public class Oyearyt
        {
            public List<YearlyPaymentT> Osal { get; set; }
            public LookupValue AccType { get; set; }
            public string AccNo { get; set; }
            public string Branch { get; set; }
            public string Emp_Code { get; set; }
            public string Emp_Name { get; set; }
            public string Loc_Code { get; set; }
            public int Comp_code { get; set; }
            public string PaymentBankCode { get; set; }


        }

        public static void ProcessJV(string mPayMonth, int mCompanyPayrollId, List<int> OEmployeePayrollId, List<int> OEmployeePayrollIdsNotInsal, string mBatchName, List<int> JVCodeList, bool apprpayslip, string mFromPeriod, string mToPeriod)
        {
            using (DataBaseContext db = new DataBaseContext())
            {
                List<JVProcessData> OJVProcessData = new List<JVProcessData>();
                var OJVParameterComp = db.CompanyPayroll.Where(e => e.Id == mCompanyPayrollId && e.JVProcessDataSummary.Any(q => q.ProcessMonth == mPayMonth))
                    // .Include(e => e.JVProcessData)
                                       .Include(e => e.JVProcessDataSummary)
                    .AsParallel()
                    .FirstOrDefault();

                var OJVParameter = new List<JVParameter>();
                foreach (var item in JVCodeList)
                {
                    var aa = _returnJvParm(item);
                    if (aa != null)
                    {
                        OJVParameter.Add(aa);
                    }
                }
                //Delete old record
                if (OJVParameterComp != null)
                {
                    var OProcessDataSumDel = OJVParameterComp.JVProcessDataSummary.Where(e => e.ProcessMonth == mPayMonth && e.BatchName == mBatchName).ToList();

                    var OLockCheck = OProcessDataSumDel.Where(e => e.IsLock == true).SingleOrDefault();
                    if (OLockCheck != null)
                    {
                        return; // JV is locked for the month mpaymonth
                    }
                    if (OProcessDataSumDel != null && OProcessDataSumDel.Count() > 0)
                    {
                        db.JVProcessDataSummary.RemoveRange(OProcessDataSumDel);
                        //foreach (var ca in OProcessDataSumDel)
                        //{
                        //    db.JVProcessDataSummary.Attach(ca);
                        //    db.Entry(ca).State = System.Data.Entity.EntityState.Deleted;
                        //}
                        db.SaveChanges();
                    }
                }
                //  var OProcessDataSum = db.JVProcessData.Where(e => e.ProcessMonth == mPayMonth && e.BatchName == mBatchName).ToList();


                var OProcessDataDel = db.JVProcessData.Where(e => e.ProcessMonth == mPayMonth && e.BatchName == mBatchName).ToList();
                if (OProcessDataDel != null && OProcessDataDel.Count() > 0)
                {
                    db.JVProcessData.RemoveRange(OProcessDataDel);
                    //foreach (var ca in OProcessDataDel)
                    //{
                    //    db.JVProcessData.Attach(ca);
                    //    db.Entry(ca).State = System.Data.Entity.EntityState.Deleted;
                    //}
                    db.SaveChanges();
                }


                string requiredPath = Path.GetDirectoryName(Path.GetDirectoryName(System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase))) + "\\P2BUltimate\\JVFile";
                //System.Web.HttpContext.Current.Server.MapPath("\\JVFile");
                string localPath = new Uri(requiredPath).LocalPath;
                if (!System.IO.Directory.Exists(localPath))
                {
                    localPath = new Uri(requiredPath).LocalPath;
                    System.IO.Directory.CreateDirectory(localPath);
                }
                string path = requiredPath + "\\JV_" + Convert.ToDateTime("01/" + mPayMonth).ToString("MMyyyy") + ".txt";
                //System.Web.HttpContext.Current.Server.MapPath("\\JVFile")
                path = new Uri(path).LocalPath;
                if (System.IO.File.Exists(path))
                {
                    File.Delete(path);
                }
                List<EmployeePayroll> OSalaryTF = new List<EmployeePayroll>();
                List<EmployeePayroll> OYearlyTF = new List<EmployeePayroll>();
                List<EmployeePayroll> OEmployeePayroll = new List<EmployeePayroll>();
                List<SalaryArrearT> OSalaryArrearTemp = new List<SalaryArrearT>();
                List<EmployeePayroll> OArrSalaryTF = new List<EmployeePayroll>();
                List<BMSPaymentReq> OOffSalaryTF = new List<BMSPaymentReq>();


                if (apprpayslip == true)
                {

                    foreach (int a in OEmployeePayrollId)
                    {

                        var OEmployeePayroll_loan = _returnEmpLoanAndOtherDed(a, mPayMonth);
                        if (OEmployeePayroll_loan != null)
                        {
                            OEmployeePayroll.Add(OEmployeePayroll_loan);
                            OSalaryTF.Add(OEmployeePayroll_loan);
                        }
                    }

                    //for (int i = 0; i < OEmployeePayrollId.Count; i++)
                    //{
                    //    var EmployeePayroll = _returnEmpSalaryYearly(OEmployeePayrollId[i], mPayMonth);
                    //    if (EmployeePayroll != null)
                    //    {

                    //        OSalaryTF.Add(EmployeePayroll);
                    //        // OYearlyTF.Add(EmployeePayroll);
                    //    }


                    //}




                }

                if (apprpayslip == false)
                {


                    for (int i = 0; i < OEmployeePayrollId.Count; i++)
                    {
                        var EmployeePayroll = _returnEmpOnlyYearly(OEmployeePayrollId[i], mPayMonth);
                        if (EmployeePayroll != null)
                        {

                            // OSalaryTF.Add(EmployeePayroll);
                            OYearlyTF.Add(EmployeePayroll);
                        }


                    }

                    for (int i = 0; i < OEmployeePayrollIdsNotInsal.Count; i++)
                    {
                        var EmployeePayroll = _returnEmpNotInSalaryYearly(OEmployeePayrollIdsNotInsal[i], mPayMonth);
                        if (EmployeePayroll != null)
                        {
                            OYearlyTF.Add(EmployeePayroll);
                        }
                    }
                }



                var Id = Convert.ToInt32(SessionManager.CompanyId);
                string _CompCode = db.Company.Where(e => e.Id == Id).SingleOrDefault().Code.ToUpper();
                string _CustomeCompCode = "BDCB";
                var JVParameter_SalaryHead_List = new List<JVParameter>();

                foreach (var id in JVCodeList)
                {
                    var JVParameter_SalaryHead_List_temp = _returnJvParm(id);
                    if (JVParameter_SalaryHead_List_temp != null)
                    {
                        JVParameter_SalaryHead_List.Add(JVParameter_SalaryHead_List_temp);
                    }
                }

                var JVParameter_SalaryHead = JVParameter_SalaryHead_List.SelectMany(a => a.SalaryHead).Select(a => a.Id).Distinct().ToList();


                if (apprpayslip == true)//appear in payslip salhead operation type LTA,GRATUITY,BONUS,LTC,MEDALLOW,LVENCASH
                {
                    var Inappearpayslip = db.SalaryHead.Include(e => e.Frequency).Where(d => d.InPayslip == true && d.Frequency.LookupVal.ToUpper() == "YEARLY" && JVParameter_SalaryHead.Contains(d.Id)).Select(e => e.Id).ToList();
                    for (int i = 0; i < OEmployeePayrollId.Count; i++)
                    {
                        var EmployeePayroll = _returnEmpOnlyYearlypayslip(OEmployeePayrollId[i], mPayMonth, Inappearpayslip);
                        if (EmployeePayroll != null)
                        {
                            if (EmployeePayroll.YearlyPaymentT.Count() > 0)
                            {
                                OYearlyTF.Add(EmployeePayroll);
                            }

                        }


                    }
                }

                //Salary head not appear in payslip For jv code start

                var notappearpayslip = db.SalaryHead.Include(e => e.Frequency).Where(d => d.InPayslip == false && d.Frequency.LookupVal.ToUpper() != "YEARLY" && JVParameter_SalaryHead.Contains(d.Id)).ToList();

                if (notappearpayslip != null && notappearpayslip.Count() > 0)
                {

                    if (apprpayslip == false)
                    {

                        foreach (int a in OEmployeePayrollId)
                        {

                            var OEmployeePayroll_loan = _returnEmpLoanAndOtherDed(a, mPayMonth);
                            if (OEmployeePayroll_loan != null)
                            {
                                OEmployeePayroll.Add(OEmployeePayroll_loan);
                                OSalaryTF.Add(OEmployeePayroll_loan);
                            }
                        }
                    }
                }
                //Salary head not appear in payslip For jv code end

                var OSalaryT = OSalaryTF.Select(e => new
                {
                    Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(),
                    Loc_Code = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault().Geostruct.Location.LocationObj.LocCode,
                    Emp_Code = e.Employee.EmpCode,
                    Emp_Name = e.Employee.EmpName.FullNameFML,
                    AccType = e.Employee.EmpOffInfo.AccountType,
                    PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code
                }).ToList();
                // Admin Charge,Insp Charge
                Double Admincharge = 0;
                Double Inspcharge = 0;

                CompanyPayroll OCompanyPayroll = db.CompanyPayroll.Include(e => e.Company)
                                       .Include(e => e.Company.Calendar.Select(r => r.Name))
                                       .Include(e => e.Company.Calendar)
                                        .Include(e => e.PFMaster)
                                        .Where(d => d.Id == Id).AsNoTracking().OrderBy(e => e.Id).SingleOrDefault();
                List<PFMaster> OCompPFMaster = OCompanyPayroll.PFMaster.Where(e => e.EndDate == null || e.EndDate.Value.Date > Convert.ToDateTime("01/" + mPayMonth).Date).ToList();
                //var OPFMaster = db.PFMaster
                //                        .Include(e => e.EPSWages)
                //                        .Include(e => e.EPSWages.RateMaster.Select(a => a.SalHead))
                //                        .Include(e => e.PFAdminWages)
                //                        .Include(e => e.PFEDLIWages)
                //                        .Include(e => e.PFInspWages)
                //                        .Include(e => e.EPFWages)
                //                        .Include(e => e.PFAdminWages.RateMaster)
                //                        .Include(e => e.PFEDLIWages.RateMaster)
                //                        .Include(e => e.PFInspWages.RateMaster)
                //                        .Include(e => e.EPFWages.RateMaster)
                //                        .Include(e => e.EPFWages.RateMaster.Select(a => a.SalHead))
                //                        .Include(e => e.PFTrustType)
                //                        .Where(e => e.Id == OCompPFMaster.Id).OrderBy(e => e.Id)
                //                        .FirstOrDefault();
                //if (OPFMaster != null)
                //{
                //    Admincharge = OPFMaster.EPFAdminCharges;
                //    Inspcharge = OPFMaster.EPFInspCharges;
                //}

                //var OWithoutSalaryT = OYearlyTF.Select(e => new
                //{
                //    Osal = e.YearlyPaymentT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(),
                //    Loc_Code = e.Employee.GeoStruct.Location.LocationObj.LocCode,
                //    Emp_Code = e.Employee.EmpCode,
                //    Emp_Name = e.Employee.EmpName.FullNameFML
                //}).ToList();


                DateTime fromdate = Convert.ToDateTime("01/" + mPayMonth);
                DateTime Todate = (fromdate.AddMonths(1)).AddDays(-1);
                if (apprpayslip == false)
                {
                    fromdate = Convert.ToDateTime(mFromPeriod);
                    Todate = Convert.ToDateTime(mToPeriod);
                }


                List<Oyearyt> OYearlyT = OYearlyTF.Select(e => new Oyearyt
                {
                    Osal = e.YearlyPaymentT != null ? e.YearlyPaymentT.Where(d => d.PayMonth == mPayMonth && d.ReleaseFlag == true && d.ReleaseDate.Value.Date >= fromdate.Date && d.ReleaseDate.Value.Date <= Todate.Date &&
                        //   d.SalaryHead.InPayslip == false
                       JVParameter_SalaryHead.Contains(d.SalaryHead.Id)
                        ).ToList() : null,
                    AccType = e.Employee.EmpOffInfo.AccountType,
                    AccNo = e.Employee.EmpOffInfo.AccountNo,
                    Branch = e.Employee != null && e.Employee.EmpOffInfo != null && e.Employee.EmpOffInfo.Branch != null ? e.Employee.EmpOffInfo.Branch.Code : null,
                    Emp_Code = e.Employee.EmpCode,
                    Emp_Name = e.Employee.EmpName.FullNameFML,
                    //Loc_Code = e.SalaryT != null ? e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.IsHold == false).SingleOrDefault().Geostruct.Location.LocationObj.LocCode : null,
                    Loc_Code = e.Employee.GeoStruct.Location.LocationObj.LocCode,
                    Comp_code = e.Employee.GeoStruct.Company.Id,
                    PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code

                }).ToList();

                if (apprpayslip == true || apprpayslip == false)// appear in payslip false compwf Kerlabank
                {


                    for (int i = 0; i < OEmployeePayrollId.Count; i++)
                    {
                        var OArrSalaryTF_temp = _returnEmpSalaryArrear(OEmployeePayrollId[i], mPayMonth);
                        if (OArrSalaryTF_temp != null)
                        {
                            OArrSalaryTF.Add(OArrSalaryTF_temp);
                        }
                    }
                }
                //var OArrSalaryT = OArrSalaryTF.Select(e => new { Osal = e.SalaryArrearT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();

                foreach (var item in OSalaryTF)
                {
                    if (item.SalaryArrearT != null && item.SalaryArrearT.Count > 0)
                    {
                        List<SalaryArrearT> dfds = item.SalaryArrearT.Where(d => d.PayMonth == mPayMonth).ToList();
                        OSalaryArrearTemp.AddRange(dfds);
                    }
                }
                var OArrSalaryT = OArrSalaryTF.Select(e => new { Osal = e.SalaryArrearT.Where(d => d.PayMonth == mPayMonth && d.IsPaySlip == true).ToList(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code });
                //var _PayMonth = Convert.ToDateTime("01/" + mPayMonth).AddMonths(1).Date;
                OArrSalaryT = OArrSalaryT.Where(e => e.Osal.Count() > 0).ToList();
                // officiating data
                if (apprpayslip == true || apprpayslip == false)// appear in payslip false compwf Kerlabank
                {
                    List<int> salprocessemppayrollid = db.SalaryT.Where(e => e.PayMonth == mPayMonth).Select(e => e.EmployeePayroll_Id.Value).ToList();

                    var iBmspaymentreqlist = db.BMSPaymentReq
                  .Where(e => e.PayMonth == mPayMonth && e.IsCancel == false && e.TrClosed == true && e.TrReject == false).ToList();
                    if (iBmspaymentreqlist.Count() > 0)
                    {
                        for (int i = 0; i < salprocessemppayrollid.Count; i++)
                        {
                            var OOFfSalaryTF_temp = _returnEmpOfficiatingPayment(OEmployeePayrollId[i], mPayMonth);
                            if (OOFfSalaryTF_temp != null)
                            {
                                OOffSalaryTF.AddRange(OOFfSalaryTF_temp);
                            }
                        }
                    }
                }
                var OOffSalaryT = OOffSalaryTF.ToList();



                if (_CompCode == _CustomeCompCode)
                {
                    foreach (var JvCode in JVCodeList)
                    {
                        Utility.DumpProcessStatus(JvCode.ToString());
                        JVParameter _Find_jv_Data = _returnJvParm(JvCode);
                        foreach (var _SalHead in _Find_jv_Data.SalaryHead)
                        {
                            var _SalaryHeadData = _Find_jv_Data.SalaryHead.Where(e => e.Id == _SalHead.Id)
                                .Select(e => new { _Id = e.Id, _OperationType = e.SalHeadOperationType.LookupVal.ToUpper(), _Name = e.Name, _Code = e.Code }).SingleOrDefault();
                            #region ind
                            if (_Find_jv_Data.JVGroup.LookupVal.ToUpper() == "INDIVIDUAL")
                            {
                                switch (_SalaryHeadData._OperationType)
                                {
                                    case "NET":
                                        //var OSal = OSalaryT.Select(e => e.Osal).ToList();
                                        var OSalaryT1 = OSalaryTF.Select(e => new
                                        {
                                            AccountNo = e.Employee != null && e.Employee.EmpOffInfo != null ? e.Employee.EmpOffInfo.AccountNo : null,
                                            Osal = e.SalaryT != null ? e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.IsHold == false).SingleOrDefault() : null,
                                            Emp_Code = e.Employee.EmpCode,
                                            Emp_Name = e.Employee.EmpName.FullNameFML,
                                            Loc_Code = e.SalaryT != null ? e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.IsHold == false).SingleOrDefault().Geostruct.Location.LocationObj.LocCode : null,
                                            //  PFECRR = e.SalaryT.Where(d => d.PayMonth == mPayMonth).Select(a => a.PFECRR).ToList(),
                                        }).ToList();
                                        List<JVProcessData> OJVProcessDataNet = OSalaryT1
                                            .Select(e => new JVProcessData
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                //BranchCode = e.PaymentBranch != null ? e.PaymentBranch.Code : "",
                                                //ccountProductCode = e.AccType != null ? e.AccType.LookupVal.ToUpper() : "",
                                                AccountCustomerNo = "",
                                                AccountCode = e.AccountNo,
                                                SubAccountCode = "",
                                                TransactionAmount = _returnTransctionAmt(e.Osal.TotalNet).ToString(),
                                                CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                Narration = "Net Salary For Month :" + mPayMonth + "-Org_Br_" + e.Loc_Code + "_" + e.Emp_Code + "_" + e.Emp_Name,
                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "NET").SingleOrDefault()
                                            }).ToList();

                                        OJVProcessData.AddRange(OJVProcessDataNet);
                                        break;
                                    case "LOAN":
                                        var OLoanReq = OEmployeePayroll.Select(a => a.LoanAdvRequest).Count() > 0 ?
                                            OEmployeePayroll
                                            .SelectMany(s => s.LoanAdvRequest.Where(e => (e.CloserDate == null ||
                                                e.CloserDate >= Convert.ToDateTime("01/" + mPayMonth).AddMonths(1).Date)
                                                && e.LoanAdvanceHead.SalaryHead != null &&
                                            e.LoanAdvanceHead.SalaryHead.Id == _SalaryHeadData._Id
                                            )).ToList() : null;


                                        if (OLoanReq != null && OLoanReq.Count() > 0)
                                        {

                                            foreach (var ca6 in OLoanReq.ToList())
                                            {

                                                if (ca6 != null)
                                                {
                                                    var OLoanData = ca6.LoanAdvRepaymentT.Count > 0 ? ca6.LoanAdvRepaymentT.Where(r => r.PayMonth == mPayMonth &&
                                                        r.RepaymentDate != null && r.InstallmentPaid != 0).ToList() : null;
                                                    if (OLoanData != null && OLoanData.Count() > 0)
                                                    {
                                                        var query1 = db.EmployeePayroll.Include(e => e.LoanAdvRequest).Include(e => e.Employee)
                                                           .Include(e => e.Employee.EmpName)
                                                           .Include(e => e.Employee.GeoStruct)
                                                           .Include(e => e.Employee.GeoStruct.Location)
                                                           .Include(e => e.Employee.GeoStruct.Location.LocationObj).AsNoTracking().AsParallel().ToList();

                                                        string Emp_Code = "";
                                                        string Loc_Code = "";
                                                        string Emp_Name = "";
                                                        foreach (var b in query1)
                                                        {
                                                            foreach (var c in b.LoanAdvRequest)
                                                            {
                                                                if (c.Id.ToString() == ca6.Id.ToString())
                                                                {
                                                                    Emp_Code = b.Employee.EmpCode;
                                                                    Loc_Code = b.Employee.GeoStruct.Location.LocationObj.LocCode;
                                                                    Emp_Name = b.Employee.EmpName.FullNameFML;
                                                                    break;
                                                                }
                                                            }
                                                            if (Emp_Code != "")
                                                            {
                                                                break;
                                                            }
                                                        }
                                                        List<JVProcessData> OJVProcessDataLoan = OLoanData
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                            // BranchCode = ca5.LoanAccBranch != null ? ca5.LoanAccBranch.LocationObj.LocCode : null,
                                                            // AccountProductCode = ca5.LoanAdvanceHead.Code,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca6.LoanAccNo != null ? ca6.LoanAccNo : "",
                                                            SubAccountCode = ca6.LoanSubAccNo == null ? "" : ca6.LoanSubAccNo,
                                                            TransactionAmount = _returnTransctionAmt(e.InstallmentPaid).ToString(),
                                                            CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                            Narration = "Loan" + ca6.LoanAdvanceHead.Code + " for Month :" + mPayMonth + "-Org_Br_" + Loc_Code + "_" + Emp_Code + "_" + Emp_Name,
                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == ca6.LoanAdvanceHead.SalaryHead.Id).SingleOrDefault()
                                                        }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataLoan);

                                                        Emp_Code = "";
                                                        Loc_Code = "";
                                                        Emp_Name = "";
                                                    }

                                                }
                                            }
                                        }




                                        break;
                                    case "NONREGULAR":
                                        //salearndedt VR
                                        var JvDataPerticular = db.JVParameter.Include(q => q.JVNonStandardEmp)
                                           .Include(q => q.JVNonStandardEmp.Select(a => a.Branch))
                                           .Include(q => q.JVNonStandardEmp.Select(a => a.EmployeePayroll))
                                           .Where(a => a.Id == _Find_jv_Data.Id).SingleOrDefault();

                                        List<EmployeePayroll> OSalaryTFNonreg = new List<EmployeePayroll>();

                                        var EmpOSalaryTNonreg = JvDataPerticular.JVNonStandardEmp.Select(q => q.EmployeePayroll.Id).ToList();
                                        if (EmpOSalaryTNonreg.Count > 0)
                                        {
                                            for (int i = 0; i < EmpOSalaryTNonreg.Count; i++)
                                            {
                                                var EmployeePayroll = _returnEmpSalaryYearly(EmpOSalaryTNonreg[i], mPayMonth);
                                                if (EmployeePayroll != null)
                                                {
                                                    OSalaryTFNonreg.Add(EmployeePayroll);
                                                }
                                            }
                                        }
                                        var OSalaryT1Nonreg = OSalaryTFNonreg.Select(e => new
                                        {
                                            BranchCode = JvDataPerticular.JVNonStandardEmp.Where(q => q.EmployeePayroll.Id == e.Id).Select(r => r.Branch.Code).SingleOrDefault(),
                                            AccountNo = JvDataPerticular.JVNonStandardEmp.Where(q => q.EmployeePayroll.Id == e.Id).Select(r => r.AccountNo).SingleOrDefault(),
                                            Osal = e.SalaryT != null ? e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.IsHold == false).SingleOrDefault() : null,
                                            Emp_Code = e.Employee.EmpCode,
                                            Emp_Name = e.Employee.EmpName.FullNameFML,
                                            Loc_Code = e.SalaryT != null ? e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.IsHold == false).SingleOrDefault().Geostruct.Location.LocationObj.LocCode : null,
                                            //  PFECRR = e.SalaryT.Where(d => d.PayMonth == mPayMonth).Select(a => a.PFECRR).ToList(),
                                        }).ToList();

                                        List<JVProcessData> OJVProcessDataNetNonrreg = OSalaryT1Nonreg
                                            .Select(e => new JVProcessData
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                //   BranchCode = e.PaymentBranch != null ? e.PaymentBranch.Code : "",
                                                //ccountProductCode = e.AccType != null ? e.AccType.LookupVal.ToUpper() : "",
                                                AccountCustomerNo = "",
                                                AccountCode = e.AccountNo,
                                                SubAccountCode = "",
                                                TransactionAmount = _returnTransctionAmt(e.Osal.TotalNet).ToString(),
                                                CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                Narration = "Net Salary For Month :" + mPayMonth + "-Org_Br_" + e.Loc_Code + "_" + e.Emp_Code + "_" + e.Emp_Name,
                                                //SalaryHead = db.SalaryHead.Where(r => r.Id == ca6.LoanAdvanceHead.SalaryHead.Id).SingleOrDefault()

                                            }).ToList();

                                        OJVProcessData.AddRange(OJVProcessDataNetNonrreg);
                                        break;
                                }
                            }
                            #endregion ind
                            #region location
                            else if (_Find_jv_Data.JVGroup.LookupVal.ToUpper() == "LOCATION")
                            {
                                switch (_SalaryHeadData._OperationType)
                                {

                                    case "GROSS":
                                        if (OSalaryT != null && OSalaryT.Count() > 0)
                                        {
                                            var OSal = OSalaryT
                                                .Select(e => e.Osal).ToList();
                                            List<JVProcessData> OJVProcessDataNet = OSal
                                            .Where(r => r.IsHold == false && r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                               .Select(e => new JVProcessData
                                               {
                                                   BatchName = mBatchName,
                                                   ProcessMonth = mPayMonth,
                                                   ProcessDate = DateTime.Now.Date,
                                                   JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                   //BranchCode = e.Key.LocationObj.LocCode,
                                                   ////BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                   //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                   AccountCustomerNo = "",
                                                   AccountCode = _Find_jv_Data.AccountNo,
                                                   SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                   TransactionAmount = _returnTransctionAmt(e.Sum(r => r.TotalEarning)).ToString(),
                                                   CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                   Narration = "Gross Salary for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                   SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").SingleOrDefault()
                                               }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataNet);
                                        }
                                        //Emp_Monthsal;
                                        break;
                                    case "REGULAR":

                                        var OSal_re = OSalaryT
                                            .Select(e => e.Osal).ToList();
                                        var OGrp = OSal_re.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                         .Select(e => new
                                         {
                                             location = e.Key,
                                             SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == _SalaryHeadData._Id)).ToList()
                                         }).ToList();
                                        List<JVProcessData> OJVProcessDataNet_r = OGrp
                                           .Select(e => new JVProcessData
                                           {
                                               BatchName = mBatchName,
                                               ProcessMonth = mPayMonth,
                                               ProcessDate = DateTime.Now.Date,
                                               JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                               //BranchCode = e.Key.LocationObj.LocCode,
                                               //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                               //AccountProductCode = _Find_jv_Data.JVProductCode,
                                               AccountCustomerNo = "",
                                               AccountCode = _Find_jv_Data.AccountNo,
                                               SubAccountCode = _Find_jv_Data.SubAccountNo,
                                               TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Amount)).ToString(),
                                               CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                               Narration = _SalaryHeadData._Name + " Salary for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                               SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                           }).ToList();

                                        OJVProcessData.AddRange(OJVProcessDataNet_r);

                                        if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                               .Select(e => e.Osal).ToList();

                                            //var OGrpArr = OSal2.Where(r => r.GeoStruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.GeoStruct.Location.LocationObj.Id)
                                            //    .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.SalaryArrearPaymentT.Where(d => d.SalaryHead.Id == _SalaryHeadData._Id)).ToList() }).ToList();

                                            var OGrpArr = OSal2.Where(r => r.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.FirstOrDefault().GeoStruct.Location.LocationObj.Id)
                                               .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == _SalaryHeadData._Id))).ToList() }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                        //  BranchCode = e.location.LocationObj.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                        //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = _Find_jv_Data.AccountNo,
                                                        SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                        //TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.SalHeadAmount)).ToString(),
                                                        TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Sum(r => r.SalHeadAmount))).ToString(),
                                                        CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                        Narration = _SalaryHeadData._Name + " Arrear for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                            }
                                        }

                                        break;
                                    case "BASIC":

                                        var OSalBASIC = OSalaryT
                                              .Select(e => e.Osal).ToList();
                                        var OGrpBASIC = OSalBASIC.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn)
                                            .GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                            .Select(e => new
                                            {
                                                location = e.Key,
                                                SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == _SalaryHeadData._Id)).ToList()
                                            }).ToList();
                                        foreach (var ca10 in OGrpBASIC)
                                        {
                                            JVProcessData OJVProcessDataBASIC = new JVProcessData()
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                //      BranchCode = ca10.location.LocationObj.LocCode,
                                                //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                AccountCustomerNo = "",
                                                AccountCode = _Find_jv_Data.AccountNo,
                                                SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                TransactionAmount = _returnTransctionAmt(ca10.SalDetails.Sum(d => d.Amount)).ToString(),
                                                CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                Narration = _SalaryHeadData._Name + " Salary for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                            };
                                            OJVProcessData.Add(OJVProcessDataBASIC);
                                        }

                                        if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                               .Select(e => e.Osal).ToList();
                                            if (OSal2 != null)
                                            {

                                                var OGrpArr = OSal2.Where(x => x.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn)
                                                    //.GroupBy(a => a.GeoStruct.Location.LocationObj.LocCode)
                                                    .GroupBy(a => a.FirstOrDefault().GeoStruct.Location.LocationObj.Id)
                                                    .Select(e => new
                                                    {
                                                        location = e.Key,
                                                        SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == _SalaryHeadData._Id))).ToList()
                                                    }).ToList();

                                                if (OGrpArr != null && OGrpArr.Count() > 0)
                                                {
                                                    List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                            //  BranchCode = e.location.LocationObj.LocCode,
                                                            //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = _Find_jv_Data.AccountNo,
                                                            SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                            TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Sum(r => r.SalHeadAmount))).ToString(),
                                                            CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                            Narration = _SalaryHeadData._Name + " Arrear for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                }
                                            }
                                        }
                                        break;


                                    case "DA":

                                        var OSalVDA = OSalaryT
                                                  .Select(e => e.Osal).ToList();
                                        var OGrpVDA = OSalVDA.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn)
                                            .GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                            .Select(e => new
                                            {
                                                location = e.Key,
                                                SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == _SalaryHeadData._Id)).ToList()
                                            }).ToList();
                                        List<JVProcessData> OJVProcessDataVDA = OGrpVDA

                                            .Select(e => new JVProcessData
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                //  BranchCode = e.location.LocationObj.LocCode,
                                                //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                AccountCustomerNo = "",
                                                AccountCode = _Find_jv_Data.AccountNo,
                                                SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Amount)).ToString(),
                                                //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString(),
                                                CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                Narration = _SalaryHeadData._Name + " Salary for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                            }).ToList();
                                        OJVProcessData.AddRange(OJVProcessDataVDA);

                                        if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                               .Select(e => e.Osal).ToList();
                                            if (OSal2 != null)
                                            {
                                                var OGrpArr = OSal2.Where(r => r.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.FirstOrDefault().GeoStruct.Location.LocationObj.Id)
                                                    .Select(e => new
                                                    {
                                                        location = e.Key,
                                                        SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == _SalaryHeadData._Id))).ToList()
                                                    }).ToList();

                                                if (OGrpArr != null && OGrpArr.Count() > 0)
                                                {
                                                    List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                            //   BranchCode = e.location.LocationObj.LocCode,
                                                            //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = _Find_jv_Data.AccountNo,
                                                            SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                            //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString(),
                                                            TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Sum(r => r.SalHeadAmount))).ToString(),
                                                            CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                            Narration = _SalaryHeadData._Name + " Arrear for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                }
                                            }
                                        }


                                        break;

                                    case "NONREGULAR":

                                        var OSal3 = OSalaryT
                                        .Select(e => e.Osal).ToList();
                                        var OGrp1 = OSal3.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                            .Select(e => new
                                            {
                                                location = e.Key,
                                                SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == _SalaryHeadData._Id)).ToList()
                                            }).ToList();
                                        if (OGrp1 != null && OGrp1.Count() > 0)
                                        {
                                            List<JVProcessData> OJVProcessDataNonRegular = OGrp1

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //  BranchCode = e.location.LocationObj.LocCode,
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                    //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Amount)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = _SalaryHeadData._Name + " Salary for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataNonRegular);

                                        }

                                        break;
                                    case "EPF":

                                        var OSalaryT1 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSal4 = OSalaryT1
                                               .Select(e => e.Osal).ToList();
                                        var OEPF = OSal4.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(r => r.Geostruct.Location.LocationObj.Id)
                                            .Select(e => new
                                            {
                                                SalDetails = e.Select(a => a.PFECRR)
                                            }).ToList();

                                        /* Added for VPF*/
                                        var SalArrT = db.SalaryArrearT.Include(e => e.SalaryArrearPaymentT)
                                                   .Include(e => e.SalaryArrearPaymentT.Select(r => r.SalaryHead))
                                                   .Include(e => e.GeoStruct)
                                                  .Include(e => e.GeoStruct.Location).Include(e => e.GeoStruct.Location.LocationObj)
                                                  .Where(e => e.PayMonth == mPayMonth && e.GeoStruct.Location.LocationObj.LocCode ==
                                                 _Find_jv_Data.LocationIn).ToList();
                                        var SalAttPayT = SalArrT.Select(r => r.SalaryArrearPaymentT.Where(t => t.SalaryHead.Code == "VPF")).ToList();
                                        var amt = SalAttPayT.Sum(t => t.Sum(y => y.SalHeadAmount));

                                        if (OEPF != null && OEPF.Count() > 0) //Changes for Null
                                        {


                                            List<JVProcessData> OJVProcessDataEPF = OEPF
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    // BranchCode = e.location.LocCode,
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                    //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    // TransactionAmount = _returnTransctionAmt(e.SalDetails.EE_Share + e.SalDetails.Arrear_EE_Share).ToString(),
                                                    TransactionAmount = (_returnTransctionAmt(e.SalDetails.Sum(r => r.EE_Share) + e.SalDetails.Sum(r => r.Arrear_EE_Share)) - amt).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employee Share Provident Fund including Arrears" + _SalaryHeadData._Code + " for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEPF);
                                        }

                                        break;
                                    case "ADMINPF":
                                        foreach (var pfMaster in OCompPFMaster)
                                        {
                                            Admincharge = pfMaster.EPFAdminCharges;


                                            var OSalaryADMINPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                            var OSalADMINPF = OSalaryADMINPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                   .Select(e => e.Osal).ToList();
                                            var OADMINPF = OSalADMINPF.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                .ToList();

                                            if (OADMINPF != null && OADMINPF.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataADMINPF = OADMINPF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                        //   BranchCode = e.location.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                        //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = _Find_jv_Data.AccountNo,
                                                        SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                        TransactionAmount = _returnTransctionAmt(Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages)) * Admincharge / 100, 0)).ToString(),
                                                        CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                        Narration = "Admin Charges" + _SalaryHeadData._Code + " for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").SingleOrDefault()
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataADMINPF);
                                            }
                                        }
                                        break;
                                    case "INSPPF":
                                        foreach (var pfMaster in OCompPFMaster)
                                        {
                                            Inspcharge = pfMaster.EPFInspCharges;
                                            var OSalaryINSPPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                            var OSalINSPPF = OSalaryINSPPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                   .Select(e => e.Osal).ToList();
                                            var OINSPPF = OSalINSPPF.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                .ToList();

                                            if (OINSPPF != null && OINSPPF.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataINSPPF = OINSPPF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                        //   BranchCode = e.location.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                        //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = _Find_jv_Data.AccountNo,
                                                        SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                        TransactionAmount = _returnTransctionAmt(Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages)) * Inspcharge / 100, 0)).ToString(),
                                                        CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                        Narration = "Inspection Charges" + _SalaryHeadData._Code + " for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").SingleOrDefault()
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataINSPPF);
                                            }
                                        }
                                        break;

                                    case "CPF":

                                        var OSalaryT2 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSal5 = OSalaryT2
                                               .Select(e => e.Osal).ToList();
                                        var OCPF = OSal5.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                            .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                            .ToList();

                                        if (OCPF != null && OCPF.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataCPF = OCPF
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //   BranchCode = e.location.LocCode,
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                    //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.ER_Share) + e.SalDetails.Sum(r => r.Arrear_ER_Share)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Company Share Provident Fund" + _SalaryHeadData._Code + " for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataCPF);
                                        }

                                        break;
                                    case "PENSION":

                                        var OSalaryT3 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSal6 = OSalaryT3
                                               .Select(e => e.Osal).ToList();

                                        var OEPS = OSal6.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                            .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                            .ToList();
                                        if (OEPS != null && OEPS.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEPS = OEPS
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //   BranchCode = e.location.LocCode,
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                    //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.EPS_Share) + e.SalDetails.Sum(r => r.Arrear_EPS_Share)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Pension Share Provident Fund" + _SalaryHeadData._Code + " for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEPS);
                                        }

                                        break;

                                    case "LWF":


                                        var OSalaryTEMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalEMPLWF = OSalaryTEMPLWF
                                               .Select(e => e.Osal).ToList();
                                        var OEMPEMPLWF = OSalEMPLWF.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                            .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.LWFTransT).ToList() })
                                            .ToList();
                                        if (OEMPEMPLWF != null && OEMPEMPLWF.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEMPLWF = OEMPEMPLWF
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                    //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.EmpAmt)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employee Share LWF" + _SalaryHeadData._Code + " for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPLWF);
                                        }

                                        break;
                                    case "COMPLWF":

                                        var OSalaryTCOMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalCOMPLWF = OSalaryTCOMPLWF
                                               .Select(e => e.Osal).Where(e => e.LWFTransT != null).ToList();
                                        var OCOMPLWF = OSalCOMPLWF.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                             .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.LWFTransT).ToList() })
                                            .ToList();
                                        if (OCOMPLWF != null && OCOMPLWF.Count() > 0) //Changes for Null
                                        {

                                            List<JVProcessData> OJVProcessDataCOMPLWF = OCOMPLWF
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    // BranchCode = e.location.LocCode,
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                    //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.CompAmt)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employee Share LWF" + _SalaryHeadData._Code + " for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataCOMPLWF);
                                        }

                                        break;
                                    case "COMPESIC":

                                        var OSalaryTCOMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalCOMPESIS = OSalaryTCOMPESIS
                                               .Select(e => e.Osal).ToList();
                                        var OCOMPESIS = OSalCOMPESIS.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                             .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.ESICTransT).ToList() })
                                            .ToList();

                                        if (OCOMPESIS != null && OCOMPESIS.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataCOMPESIS = OCOMPESIS
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //   BranchCode = e.location.LocCode,
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                    //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.CompAmt)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employer Share ESIS" + _SalaryHeadData._Code + " for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataCOMPESIS);
                                        }

                                        break;
                                    case "ESIC":

                                        var OSalaryTEMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalCOMPEMPESIS = OSalaryTEMPESIS
                                               .Select(e => e.Osal).ToList();
                                        var OEMPESIS = OSalCOMPEMPESIS.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                            .Select(e => new { location = e.Key, SalDetails = e.Where(r => r.ESICTransT != null).Select(r => r.ESICTransT).ToList() })
                                            .ToList();

                                        if (OEMPESIS != null && OEMPESIS.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEMPESIS = OEMPESIS
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //       BranchCode = e.location.LocCode,
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                    //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.EmpAmt)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employees Share ESIS" + _SalaryHeadData._Code + " for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPESIS);
                                        }

                                        break;
                                    case "PTAX":

                                        var OSalaryTPTAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalPTAX = OSalaryTPTAX
                                               .Select(e => e.Osal).ToList();
                                        var OEMPPTAX = OSalPTAX.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn && r.PTaxTransT != null).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                            .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PTaxTransT).ToList() })
                                            .ToList();
                                        if (OEMPPTAX != null && OEMPPTAX.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEMPPTAX = OEMPPTAX
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //     BranchCode = e.location.LocCode,
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                    //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.PTAmount) + e.SalDetails.Sum(r => r.ArrearPTAmount)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employees Share PTAX including Arrears" + _SalaryHeadData._Code + " for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPPTAX);
                                        }

                                        break;
                                    case "ITAX":


                                        var OSalaryTITAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalITAX = OSalaryTITAX
                                               .Select(e => e.Osal).ToList();
                                        var OEMPITAX = OSalITAX.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                            .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(t => t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "ITAX")).ToList() })
                                            .ToList();
                                        if (OEMPITAX != null && OEMPITAX.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEMPITAX = OEMPITAX
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //  BranchCode = e.location.LocationObj.LocCode,
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                    //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    // TransactionAmount = e.SalDetails.Sum(r => r.Amoount).ToString(),
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Amount)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employees ITAX" + _SalaryHeadData._Code + " for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPITAX);
                                        }

                                        break;
                                    //VR
                                    case "INSURANCE":

                                        var OSal_in = OSalaryT
                                            .Select(e => e.Osal).ToList();
                                        var OGrpi = OSal_in.Where(r => r.Geostruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                         .Select(e => new
                                         {
                                             location = e.Key,
                                             SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == _SalaryHeadData._Id)).ToList()
                                         }).ToList();
                                        List<JVProcessData> OJVProcessDataNet_ri = OGrpi
                                           .Select(e => new JVProcessData
                                           {
                                               BatchName = mBatchName,
                                               ProcessMonth = mPayMonth,
                                               ProcessDate = DateTime.Now.Date,
                                               JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                               //BranchCode = e.Key.LocationObj.LocCode,
                                               //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                               //AccountProductCode = _Find_jv_Data.JVProductCode,
                                               AccountCustomerNo = "",
                                               AccountCode = _Find_jv_Data.AccountNo,
                                               SubAccountCode = _Find_jv_Data.SubAccountNo,
                                               TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Amount)).ToString(),
                                               CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                               Narration = _SalaryHeadData._Name + " Salary for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                               SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                           }).ToList();

                                        OJVProcessData.AddRange(OJVProcessDataNet_ri);

                                        if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                               .Select(e => e.Osal).ToList();

                                            //var OGrpArr = OSal2.Where(r => r.GeoStruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.GeoStruct.Location.LocationObj.Id)
                                            //    .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.SalaryArrearPaymentT.Where(d => d.SalaryHead.Id == _SalaryHeadData._Id)).ToList() }).ToList();

                                            var OGrpArr = OSal2.Where(r => r.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == _Find_jv_Data.LocationIn).GroupBy(a => a.FirstOrDefault().GeoStruct.Location.LocationObj.Id)
                                               .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == _SalaryHeadData._Id))).ToList() }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                        //  BranchCode = e.location.LocationObj.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == _Find_jv_Data.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                        //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = _Find_jv_Data.AccountNo,
                                                        SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                        //TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.SalHeadAmount)).ToString(),
                                                        TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Sum(r => r.SalHeadAmount))).ToString(),
                                                        CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                        Narration = _SalaryHeadData._Name + " Arrear for Month :" + mPayMonth + "-Org_Br_" + _Find_jv_Data.LocationIn,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                            }
                                        }

                                        break;
                                    default:

                                        break;
                                }
                            }
                            #endregion
                            #region Company
                            else if (_Find_jv_Data.JVGroup.LookupVal.ToUpper() == "COMPANY")
                            {
                                switch (_SalaryHeadData._OperationType)
                                {
                                    case "GROSS":
                                        //if Location

                                        if (OSalaryT != null && OSalaryT.Count() > 0)
                                        {
                                            var OSal = OSalaryT
                                                .Select(e => e.Osal).ToList();
                                            List<JVProcessData> OJVProcessDataNet = OSal
                                            .Where(r => r.IsHold == false).GroupBy(t => t.Geostruct.Company.Id)

                                            .Select(e => new JVProcessData
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                // BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                //AccountProductCode = _Find_jv_Data.JVProductCode,
                                                ////AccountCustomerNo = "",
                                                AccountCode = _Find_jv_Data.AccountNo,
                                                SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                TransactionAmount = _returnTransctionAmt(e.Sum(r => r.TotalEarning)).ToString(),
                                                CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                Narration = "Gross Salary for Month :" + mPayMonth,
                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").SingleOrDefault()
                                            }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataNet);
                                        }
                                        //Emp_Monthsal;
                                        break;
                                    case "BASIC":
                                        var OSalBASIC = OSalaryT
                                               .Select(e => e.Osal).ToList();
                                        var OGrpBASIC = OSalBASIC.GroupBy(t => t.Geostruct.Company.Id).ToList().Select(e => new
                                        {
                                            SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == _SalaryHeadData._Id)).ToList()
                                        });
                                        if (OGrpBASIC != null && OGrpBASIC.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataBASIC = OGrpBASIC

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Amount)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = _SalaryHeadData._Name + " Salary for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();
                                            OJVProcessData.AddRange(OJVProcessDataBASIC);
                                        }
                                        if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OArrSalaryT
                                               .Select(e => e.Osal).ToList();
                                            var OGrpArr = OSal2.GroupBy(t => t.FirstOrDefault().GeoStruct.Company.Id).ToList().Select(e => new
                                            {

                                                SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == _SalaryHeadData._Id))).ToList()
                                            }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                        //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                        // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                        //AccountCustomerNo = "",
                                                        AccountCode = _Find_jv_Data.AccountNo,
                                                        SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                        TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Sum(r => r.SalHeadAmount))).ToString(),
                                                        CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                        Narration = _SalaryHeadData._Name + " Arrear for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                            }
                                        }

                                        break;
                                    case "DA":
                                        var OSalVDA = OSalaryT
                                               .Select(e => e.Osal).ToList();
                                        var OGrpVDA = OSalVDA.GroupBy(t => t.Geostruct.Company.Id).Select(e => new
                                        {
                                            SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == _SalaryHeadData._Id)).ToList()
                                        }).ToList();
                                        List<JVProcessData> OJVProcessDataVDA = OGrpVDA

                                            .Select(e => new JVProcessData
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                //AccountCustomerNo = "",
                                                AccountCode = _Find_jv_Data.AccountNo,
                                                SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Amount)).ToString(),
                                                CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                Narration = _SalaryHeadData._Name + " Salary for Month :" + mPayMonth,
                                                SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                            }).ToList();
                                        OJVProcessData.AddRange(OJVProcessDataVDA);

                                        if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OArrSalaryT
                                               .Select(e => e.Osal).ToList();
                                            var OGrpArr = OSal2.GroupBy(t => t.FirstOrDefault().GeoStruct.Company.Id).ToList().Select(e => new { SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == _SalaryHeadData._Id))).ToList() }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                        //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                        // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                        //AccountCustomerNo = "",
                                                        AccountCode = _Find_jv_Data.AccountNo,
                                                        SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                        TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Sum(r => r.SalHeadAmount))).ToString(),
                                                        CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                        Narration = _SalaryHeadData._Name + " Arrear for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                            }
                                        }

                                        break;

                                    case "REGULAR":
                                        var OSal1 = OSalaryT
                                               .Select(e => e.Osal).ToList();
                                        var OGrp = OSal1.GroupBy(t => t.Geostruct.Company.Id).ToList().Select(e => new { SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == _SalaryHeadData._Id)).ToList() }).ToList();

                                        List<JVProcessData> OJVProcessDataRegular = OGrp

                                            .Select(e => new JVProcessData
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                //AccountCustomerNo = "",
                                                AccountCode = _Find_jv_Data.AccountNo,
                                                SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Amount)).ToString(),
                                                CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                Narration = _SalaryHeadData._Name + " Salary for Month :" + mPayMonth,
                                                SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                            }).ToList();
                                        OJVProcessData.AddRange(OJVProcessDataRegular);

                                        if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OArrSalaryT.Where(r => r.Osal != null)
                                               .Select(e => e.Osal).ToList();

                                            var OGrpArr = OSal2 == null ? null : OSal2.GroupBy(t => t.FirstOrDefault().GeoStruct.Company.Id).ToList()
                                                .Select(e => new { SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == _SalaryHeadData._Id))).ToList() }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                        //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                        // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                        //AccountCustomerNo = "",
                                                        AccountCode = _Find_jv_Data.AccountNo,
                                                        SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                        TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Sum(r => r.SalHeadAmount))).ToString(),

                                                        //  TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                        //TransactionAmount = e.SalDetails.Sum(a => (a.Select(d => Convert.ToDecimal(d.SalHeadAmount)))).ToString("0.00"),
                                                        CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                        Narration = _SalaryHeadData._Name + " Arrear for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegular);

                                            }
                                        }

                                        break;
                                    case "NONREGULAR":
                                        var OSal3 = OSalaryT
                                               .Select(e => e.Osal).ToList();
                                        var OGrp1 = OSal3.GroupBy(t => t.Geostruct.Company.Id).ToList().Select(e => new { SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == _SalaryHeadData._Id)).ToList() }).ToList();
                                        if (OGrp1 != null && OGrp1.Count() > 0)
                                        {
                                            List<JVProcessData> OJVProcessDataNonRegular = OGrp1

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Amount)).ToString(),

                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = _SalaryHeadData._Name + " Salary for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataNonRegular);

                                        }
                                        break;
                                    case "EPF":

                                        var OSalaryT1 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSal4 = OSalaryT1
                                               .Select(e => e.Osal).ToList();
                                        var OEPF = OSal4.GroupBy(e => e.Geostruct.Company.Id)
                                            .Select(e => new { SalDetails = e.Select(r => r.PFECRR).ToList() }).ToList();

                                        var SalArrT = db.SalaryArrearT.Include(e => e.SalaryArrearPaymentT)
                                                   .Include(e => e.SalaryArrearPaymentT.Select(r => r.SalaryHead))
                                                   .Include(e => e.GeoStruct)
                                                  .Include(e => e.GeoStruct.Location).Include(e => e.GeoStruct.Location.LocationObj)
                                                  .Where(e => e.PayMonth == mPayMonth).ToList();
                                        var SalAttPayT = SalArrT.Select(r => r.SalaryArrearPaymentT.Where(t => t.SalaryHead.Code == "VPF")).ToList();
                                        var amt = SalAttPayT.Sum(t => t.Sum(y => y.SalHeadAmount));

                                        if (OEPF != null && OEPF.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEPF = OEPF
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = (_returnTransctionAmt(e.SalDetails.Sum(r => r.EE_Share) + e.SalDetails.Sum(r => r.Arrear_EE_Share)) - amt).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employee Share Provident Fund including Arrears" + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEPF);
                                        }
                                        break;
                                    case "ADMINPF":
                                        foreach (var pfMaster in OCompPFMaster)
                                        {
                                            Admincharge = pfMaster.EPFAdminCharges;

                                            var OSalaryADMINPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                            var OSalADMINPF = OSalaryADMINPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                   .Select(e => e.Osal).ToList();
                                            var OADMINPF = OSalADMINPF.GroupBy(e => e.Geostruct.Company.Id)
                                                .Select(e => new { SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                .ToList();
                                            if (OADMINPF != null && OADMINPF.Count() > 0) //Changes for Null
                                            {

                                                List<JVProcessData> OJVProcessDataADMINPF = OADMINPF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                        //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                        // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                        //AccountCustomerNo = "",
                                                        AccountCode = _Find_jv_Data.AccountNo,
                                                        SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                        TransactionAmount = _returnTransctionAmt(Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages)) * Admincharge / 100, 0)).ToString(),
                                                        CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                        Narration = "Admin Charges" + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataADMINPF);
                                            }
                                        }
                                        break;
                                    case "INSPPF":
                                        foreach (var pfMaster in OCompPFMaster)
                                        {
                                            Inspcharge = pfMaster.EPFInspCharges;
                                            var OSalaryINSPPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                            var OSalINSPPF = OSalaryINSPPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                   .Select(e => e.Osal).ToList();
                                            var OINSPPF = OSalINSPPF.GroupBy(e => e.Geostruct.Company.Id)
                                                .Select(e => new { SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                .ToList();
                                            if (OINSPPF != null && OINSPPF.Count() > 0) //Changes for Null
                                            {

                                                List<JVProcessData> OJVProcessDataINSPPF = OINSPPF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                        //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                        // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                        //AccountCustomerNo = "",
                                                        AccountCode = _Find_jv_Data.AccountNo,
                                                        SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                        TransactionAmount = _returnTransctionAmt(Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages)) * Inspcharge / 100, 0)).ToString(),
                                                        CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                        Narration = "Inspection Charges" + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataINSPPF);
                                            }
                                        }
                                        break;
                                    case "CPF":
                                        var OSalaryT2 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSal5 = OSalaryT2
                                               .Select(e => e.Osal).ToList();
                                        var OCPF = OSal5.GroupBy(e => e.Geostruct.Company.Id)
                                            .Select(e => new { SalDetails = e.Select(r => r.PFECRR).ToList() })
                                            .ToList();
                                        if (OCPF != null && OCPF.Count() > 0) //Changes for Null
                                        {

                                            List<JVProcessData> OJVProcessDataCPF = OCPF
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.ER_Share) + e.SalDetails.Sum(r => r.Arrear_ER_Share)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Company Share Provident Fund" + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataCPF);
                                        }
                                        break;
                                    case "PENSION":

                                        var OSalaryT3 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSal6 = OSalaryT3
                                               .Select(e => e.Osal).ToList();

                                        var OEPS = OSal6.GroupBy(e => e.Geostruct.Company.Id)
                                            .Select(e => new { SalDetails = e.Select(r => r.PFECRR).ToList() })
                                            .ToList();

                                        if (OEPS != null && OEPS.Count() > 0) //Changes for Null
                                        {

                                            List<JVProcessData> OJVProcessDataEPS = OEPS
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.EPS_Share) + e.SalDetails.Sum(r => r.Arrear_EPS_Share)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Pension Share Provident Fund" + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEPS);
                                        }
                                        break;

                                    case "LWF":
                                        var OSalaryTEMPLWF = OEmployeePayroll.Select(e => new
                                        {
                                            Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault()
                                        }).ToList();
                                        var OSalEMPLWF = OSalaryTEMPLWF
                                               .Select(e => e.Osal).ToList();
                                        var OEMPEMPLWF = OSalEMPLWF.GroupBy(e => e.Geostruct.Company.Id)
                                            .Select(e => new { SalDetails = e.Where(a => a.LWFTransT != null).Select(r => r.LWFTransT).ToList() })
                                            .ToList();
                                        var asa = OEMPEMPLWF.Where(e => e.SalDetails.Count > 0).Count();
                                        if (OEMPEMPLWF != null && OEMPEMPLWF.Count > 0 && asa > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEMPLWF = OEMPEMPLWF
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.EmpAmt)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employee Share LWF" + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();


                                            OJVProcessData.AddRange(OJVProcessDataEMPLWF);
                                        }

                                        break;
                                    case "COMPLWF":
                                        var OSalaryTCOMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalCOMPLWF = OSalaryTCOMPLWF
                                               .Select(e => e.Osal).Where(e => e.LWFTransT != null).ToList();
                                        var OCOMPLWF = OSalCOMPLWF.GroupBy(e => e.Geostruct.Company.Id)
                                             .Select(e => new { SalDetails = e.Select(r => r.LWFTransT).ToList() })
                                            .ToList();
                                        if (OCOMPLWF != null && OCOMPLWF.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataCOMPLWF = OCOMPLWF
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.CompAmt)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employee Share LWF" + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataCOMPLWF);
                                        }
                                        break;

                                    case "COMPESIC":
                                        var OSalaryTCOMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalCOMPESIS = OSalaryTCOMPESIS
                                               .Select(e => e.Osal).ToList();
                                        var OCOMPESIS = OSalCOMPESIS.GroupBy(e => e.Geostruct.Company.Id)
                                             .Select(e => new { SalDetails = e.Select(r => r.ESICTransT).ToList() })
                                            .ToList();

                                        if (OCOMPESIS != null && OCOMPESIS.Count() > 0) //Changes for Null
                                        {

                                            List<JVProcessData> OJVProcessDataCOMPESIS = OCOMPESIS
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.CompAmt)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employer Share ESIS" + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataCOMPESIS);
                                        }
                                        break;
                                    case "ESIC":
                                        var OSalaryTEMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalCOMPEMPESIS = OSalaryTEMPESIS
                                               .Select(e => e.Osal).ToList();
                                        var OEMPESIS = OSalCOMPEMPESIS.GroupBy(e => e.Geostruct.Company.Id)
                                            .Select(e => new { SalDetails = e.Where(r => r.ESICTransT != null).Select(r => r.ESICTransT).ToList() })
                                            .ToList();
                                        if (OEMPESIS != null && OEMPESIS.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEMPESIS = OEMPESIS
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.EmpAmt)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employees Share ESIS" + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPESIS);
                                        }
                                        break;
                                    case "PTAX":
                                        var OSalaryTPTAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalPTAX = OSalaryTPTAX
                                               .Select(e => e.Osal).ToList();
                                        var OEMPPTAX = OSalPTAX.GroupBy(e => e.Geostruct.Company.Id)
                                            .Select(e => new { SalDetails = e.Where(r => r.PTaxTransT != null).Select(r => r.PTaxTransT).ToList() })
                                            .ToList();

                                        if (OEMPPTAX != null && OEMPPTAX.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEMPPTAX = OEMPPTAX
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(r => r.PTAmount) + e.SalDetails.Sum(r => r.ArrearPTAmount)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employees Share PTAX including Arrears" + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPPTAX);
                                        }
                                        break;
                                    case "ITAX":
                                        var OSalaryTITAX = OSalaryTF.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalITAX = OSalaryTITAX
                                               .Select(e => e.Osal).ToList();
                                        var OEMPITAX = OSalITAX.Where(e => e.SalEarnDedT != null && e.SalEarnDedT.Count > 0).GroupBy(e => e.Geostruct.Company.Id)
                                         .Select(e => new
                                         {

                                             SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(t => t.SalaryHead != null && t.SalaryHead.SalHeadOperationType != null && t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "ITAX")).ToList()
                                         })
                                            .ToList();
                                        if (OEMPITAX != null && OEMPITAX.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEMPITAX = OEMPITAX
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    // TransactionAmount = e.SalDetails.Sum(r => r.Amount).ToString("0.00"),

                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Amount)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employees ITAX" + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPITAX);
                                        }
                                        break;

                                    //Added By Sudhir

                                    case "LOAN":
                                        var OSalaryTLoan = OSalaryTF.Select(e => new
                                        {
                                            Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(),
                                            Emp_Code = e.Employee.EmpCode,
                                            Emp_Name = e.Employee.EmpName.FullNameFML,
                                            Loc_Code = e.SalaryT != null ? e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.IsHold == false).SingleOrDefault().Geostruct.Location.LocationObj.LocCode : null,
                                        }).ToList();
                                        //var OSalaryTLoan = OEmployeePayroll.Select(s => new { Osal = s.LoanAdvRequest.Where(e => e.LoanAdvanceHead.SalaryHead.Id == _SalaryHeadData.Id && (e.CloserDate == null || e.CloserDate >= Convert.ToDateTime("01/" + mPayMonth).AddMonths(1).Date)) }).ToList();
                                        var OSalLoan = OSalaryTLoan
                                               .Select(e => e.Osal).ToList();
                                        var OEMPLoan = OSalLoan.GroupBy(e => e.Geostruct.Company.Id)
                                            // .Select(e => new {   SalDetails = e.Select(r => r.SalEarnDedT.Where(t => t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "ITAX")).FirstOrDefault() })
                                            //.ToList();
                                         .Select(e => new
                                         {

                                             SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(t => (t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "LOAN") &&
                                                 t.SalaryHead.Id == _SalaryHeadData._Id)).ToList()
                                         })
                                            .ToList();
                                        if (OEMPLoan != null && OEMPLoan.Count() > 0) //Changes for Null
                                        {


                                            List<JVProcessData> OJVProcessDataEMPLoan = OEMPLoan
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    // TransactionAmount = e.SalDetails.Sum(r => r.Amount).ToString("0.00"),
                                                    // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),

                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Amount)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Company Loan" + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPLoan);
                                        }
                                        break;
                                    // Added by Rekha 25072017
                                    case "INSURANCE":
                                        var OSalaryTInsurance = OSalaryTF.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        //var OSalaryTLoan = OEmployeePayroll.Select(s => new { Osal = s.LoanAdvRequest.Where(e => e.LoanAdvanceHead.SalaryHead.Id == _SalaryHeadData.Id && (e.CloserDate == null || e.CloserDate >= Convert.ToDateTime("01/" + mPayMonth).AddMonths(1).Date)) }).ToList();
                                        var OSalInsurance = OSalaryTInsurance
                                               .Select(e => e.Osal).ToList();
                                        var OEMPInsurance = OSalInsurance.Where(e => e.SalEarnDedT != null && e.SalEarnDedT.Count > 0).GroupBy(e => e.Geostruct.Company.Id)
                                         .Select(e => new
                                         {

                                             SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(t => (t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "INSURANCE") &&
                                                 t.SalaryHead.Id == _SalaryHeadData._Id)).ToList()
                                         })
                                            .ToList();
                                        if (OEMPInsurance != null && OEMPInsurance.Count() > 0) //Changes for Null
                                        {


                                            List<JVProcessData> OJVProcessDataEMPInsurance = OEMPInsurance
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(_Find_jv_Data.Id),
                                                    //BranchCode = _Find_jv_Data.CreditDebitBranchCode,
                                                    // AccountProductCode = _Find_jv_Data.JVProductCode,
                                                    //AccountCustomerNo = "",
                                                    AccountCode = _Find_jv_Data.AccountNo,
                                                    SubAccountCode = _Find_jv_Data.SubAccountNo,
                                                    // TransactionAmount = e.SalDetails.Sum(r => r.Amount).ToString("0.00"),
                                                    // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),

                                                    TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Amount)).ToString(),
                                                    CreditDebitFlag = _Find_jv_Data.CreditDebitFlag,
                                                    Narration = "Employees " + _SalaryHeadData._Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == _SalaryHeadData._Id).SingleOrDefault()
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPInsurance);
                                        }
                                        break;
                                    default:

                                        break;
                                }
                            }
                            #endregion
                        }
                    }

                }
                else
                {
                    //normal
                    foreach (var ca in OJVParameter)
                    {
                        #region ind
                        //Individual JV Vouchers
                        if (ca.JVGroup.LookupVal.ToUpper() == "INDIVIDUAL")
                        {
                            foreach (var ca1 in ca.SalaryHead)
                            {
                                switch (ca1.SalHeadOperationType.LookupVal.ToUpper())
                                {
                                    //VR
                                    case "NONREGULAR":
                                    case "REGULAR":
                                        //salearndedt
                                        var JvDataPerticular = db.JVParameter.Include(q => q.JVNonStandardEmp)
                                           .Include(q => q.JVNonStandardEmp.Select(a => a.Branch))
                                           .Include(q => q.JVNonStandardEmp.Select(a => a.EmployeePayroll))
                                           .Where(a => a.Id == ca.Id).SingleOrDefault();

                                        List<EmployeePayroll> OSalaryTFNonreg = new List<EmployeePayroll>();

                                        var EmpOSalaryTNonreg = JvDataPerticular.JVNonStandardEmp.Select(q => q.EmployeePayroll.Id).ToList();
                                        if (EmpOSalaryTNonreg.Count > 0)
                                        {
                                            for (int i = 0; i < EmpOSalaryTNonreg.Count; i++)
                                            {
                                                var EmployeePayroll = _returnEmpSalaryYearly(EmpOSalaryTNonreg[i], mPayMonth);
                                                if (EmployeePayroll != null)
                                                {
                                                    OSalaryTFNonreg.Add(EmployeePayroll);
                                                }
                                            }
                                        }
                                        var OSalaryT1Nonreg = OSalaryTFNonreg.Select(e => new
                                        {
                                            BranchCode = JvDataPerticular.JVNonStandardEmp.Where(q => q.EmployeePayroll.Id == e.Id).Select(r => r.Branch.Code).SingleOrDefault(),
                                            AccountNo = JvDataPerticular.JVNonStandardEmp.Where(q => q.EmployeePayroll.Id == e.Id).Select(r => r.AccountNo).SingleOrDefault(),
                                            Osal = e.SalaryT != null ? e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.IsHold == false).SelectMany(a => a.SalEarnDedT).ToList() : null,
                                            Emp_Code = e.Employee.EmpCode,
                                            Emp_Name = e.Employee.EmpName.FullNameFML,
                                            Loc_Code = e.SalaryT != null ? e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.IsHold == false).SingleOrDefault().Geostruct.Location.LocationObj.LocCode : null,
                                            //  PFECRR = e.SalaryT.Where(d => d.PayMonth == mPayMonth).Select(a => a.PFECRR).ToList(),
                                        }).ToList();
                                        List<JVProcessData> OJVProcessDataNonreg = new List<JVProcessData>();
                                        foreach (var item in OSalaryT1Nonreg)
                                        {
                                            var TransactionAmount = item.Osal.Where(q => q.SalaryHead.Code == ca1.Code).Select(a => a.Amount.ToString("0.00")).SingleOrDefault();
                                            SalaryHead SalHead = item.Osal.Where(q => q.SalaryHead.Code == ca1.Code).Select(q => q.SalaryHead).SingleOrDefault();
                                            OJVProcessDataNonreg.Add(new JVProcessData
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                AccountProductCode = ca.JVProductCode,
                                                BranchCode = item.BranchCode != null ? item.BranchCode : "",
                                                AccountCustomerNo = "",
                                                AccountCode = item.AccountNo != null ? item.AccountNo.ToString() : null,
                                                SubAccountCode = ca.SubAccountNo,
                                                TransactionAmount = TransactionAmount,
                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                //Narration = ca1.Code + item.Emp_Code, //+ "_" + item.Emp_Name,//ca1.Code + " for Month :" + mPayMonth + "-Org_Br_" + item.Loc_Code + "_" + item.Emp_Code + "_" + item.Emp_Name,
                                                SalaryHead = SalHead,
                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, (item.BranchCode != null ? item.BranchCode : ""), item.Emp_Code, item.Emp_Name, SalHead.Code, SalHead.Name),
                                            });
                                        }

                                        //List<JVProcessData> OJVProcessDataNetNonrreg = OSalaryT1Nonreg
                                        //    .Select(e => new JVProcessData
                                        //    {
                                        //        BatchName = mBatchName,
                                        //        ProcessMonth = mPayMonth,
                                        //        ProcessDate = DateTime.Now.Date,
                                        //        JVParameter = db.JVParameter.Find(ca.Id),
                                        //        BranchCode = e.BranchCode != null ? e.BranchCode : "",
                                        //        //ccountProductCode = e.AccType != null ? e.AccType.LookupVal.ToUpper() : "",
                                        //        AccountProductCode = ca.JVProductCode,
                                        //        AccountCustomerNo = "",
                                        //        AccountCode = e.AccountNo,
                                        //        SubAccountCode = "",
                                        //        TransactionAmount = Osal.PFECRR.Sum(r => r.EE_Share)
                                        //        CreditDebitFlag = ca.CreditDebitFlag,
                                        //        Narration = ca1.Code + " For Month :" + mPayMonth,
                                        //    }).ToList();

                                        OJVProcessData.AddRange(OJVProcessDataNonreg);
                                        //  start
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            var OSal = OYearlyT.Select(e => new
                                            {
                                                YearPay = e.Osal
                                                    .Where(r => r.SalaryHead.Id == ca1.Id),
                                                AccNo = e.AccNo,
                                                AccType = e.AccType,
                                                Branch = e.Branch,
                                                Emp_Code = e.Emp_Code,
                                                Emp_Name = e.Emp_Name,
                                                Loc_Code = e.Loc_Code
                                            })
                                                .ToList();
                                            if (OSal != null && OSal.Count() > 0)
                                            {

                                                List<JVProcessData> OJVProcessDataYear = OSal.Where(r => r.YearPay.Count() > 0)
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = e.Branch,
                                                        AccountProductCode = e.AccType.LookupVal.ToUpper(),
                                                        AccountCustomerNo = "",
                                                        AccountCode = e.AccNo,
                                                        SubAccountCode = "",
                                                        TransactionAmount = e.YearPay.Sum(r => r.AmountPaid - r.TDSAmount - r.OtherDeduction).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = "Yearly:" + "_" + e.Emp_Code,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, e.Loc_Code, e.Emp_Code, e.Emp_Name, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataYear);
                                            }
                                        }
                                        //  end		   
                                        break;
                                    //VR      
                                    case "EPF":
                                        var OSalaryT1 = OEmployeePayroll.Select(e => new
                                        {
                                            PFNo = e.Employee.EmpOffInfo.NationalityID.PFNo,
                                            Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(),
                                            PFECRR = e.SalaryT.Where(d => d.PayMonth == mPayMonth).Select(a => a.PFECRR).ToList(),
                                            Emp_Code = e.Employee.EmpCode,
                                            Emp_Name = e.Employee.EmpName.FullNameFML,
                                            Loc_Code = e.SalaryT != null ? e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.IsHold == false).SingleOrDefault().Geostruct.Location.LocationObj.LocCode : null,
                                        }).ToList();

                                        var SalArrT = db.SalaryArrearT.Include(e => e.SalaryArrearPaymentT)
                                                   .Include(e => e.SalaryArrearPaymentT.Select(r => r.SalaryHead))
                                                   .Include(e => e.GeoStruct)
                                                  .Include(e => e.GeoStruct.Location).Include(e => e.GeoStruct.Location.LocationObj)
                                                  .Where(e => e.PayMonth == mPayMonth).ToList();
                                        var SalAttPayT = SalArrT.Select(r => r.SalaryArrearPaymentT.Where(t => t.SalaryHead.Code == "VPF")).ToList();
                                        var amt = SalAttPayT.Sum(t => t.Sum(y => y.SalHeadAmount));

                                        List<JVProcessData> OJVProcessDataEPF = new List<JVProcessData>();
                                        foreach (var item in OSalaryT1)
                                        {
                                            if (item.PFECRR != null && item.PFNo != null)
                                            {
                                                OJVProcessDataEPF.Add(new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    AccountProductCode = ca.JVProductCode,
                                                    BranchCode = item.Osal.PaymentBranch != null ? item.Osal.PaymentBranch.Code : "",
                                                    AccountCustomerNo = "",
                                                    AccountCode = item.PFNo != null ? item.PFNo.ToString() : null,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = ((item.PFECRR.Sum(r => r.EE_Share) + item.PFECRR.Sum(r => r.Arrear_EE_Share) + item.PFECRR.Sum(r => r.Officiating_EE_Share)) - amt).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = ca1.Code + item.Emp_Code,// + "_" + item.Emp_Name,//"Employee Share Provident Fund including Arrears" + ca1.Code + " for Month :" + mPayMonth + "-Org_Br_" + item.Loc_Code + "_" + item.Emp_Code + "_" + item.Emp_Name,
                                                    SalaryHead = db.SalaryHead.Include(e => e.SalHeadOperationType).Where(e => e.SalHeadOperationType.LookupVal.ToUpper() == "EPF").SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, item.Loc_Code, item.Emp_Code, item.Emp_Name, db.SalaryHead.Include(e => e.SalHeadOperationType).Where(e => e.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Code, db.SalaryHead.Include(e => e.SalHeadOperationType).Where(e => e.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Name),

                                                });
                                            }
                                        }
                                        OJVProcessData.AddRange(OJVProcessDataEPF);
                                        break;
                                    case "ADMINPF":
                                        foreach (var pfMaster in OCompPFMaster)
                                        {
                                            Admincharge = pfMaster.EPFAdminCharges;


                                            var OSalaryADMINPF = OEmployeePayroll.Select(e => new
                                            {
                                                PFNo = e.Employee.EmpOffInfo.NationalityID.PFNo,
                                                Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(),
                                                PFECRR = e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.PFECRR != null && d.PFECRR.Establishment_ID == pfMaster.EstablishmentID).Select(a => a.PFECRR).ToList(),
                                                Emp_Code = e.Employee.EmpCode,
                                                Emp_Name = e.Employee.EmpName.FullNameFML,
                                                Loc_Code = e.SalaryT != null ? e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.IsHold == false).SingleOrDefault().Geostruct.Location.LocationObj.LocCode : null,
                                            }).ToList();

                                            List<JVProcessData> OJVProcessDataEPF_OSalaryTADMINPF = new List<JVProcessData>();
                                            foreach (var item in OSalaryADMINPF)
                                            {
                                                if (item.PFECRR != null && item.PFNo != null)
                                                {
                                                    OJVProcessDataEPF_OSalaryTADMINPF.Add(new JVProcessData
                                                    {

                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = item.PFNo.ToString(),
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (Math.Round((item.PFECRR.Sum(r => r.EPF_Wages) + item.PFECRR.Sum(r => r.Arrear_EPF_Wages) + item.PFECRR.Sum(r => r.Officiating_EPF_Wages)) * Admincharge / 100, 0)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "_" + item.Emp_Code,// + "_" + item.Emp_Name,
                                                        SalaryHead = db.SalaryHead.Include(e => e.SalHeadOperationType).Where(e => e.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, item.Loc_Code, item.Emp_Code, item.Emp_Name, db.SalaryHead.Include(e => e.SalHeadOperationType).Where(e => e.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Code, db.SalaryHead.Include(e => e.SalHeadOperationType).Where(e => e.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Name),
                                                    });
                                                }

                                            }
                                            OJVProcessData.AddRange(OJVProcessDataEPF_OSalaryTADMINPF);
                                        }
                                        break;
                                    case "INSPPF":
                                        foreach (var pfMaster in OCompPFMaster)
                                        {
                                            Inspcharge = pfMaster.EPFInspCharges;

                                            var OSalaryINSPPF = OEmployeePayroll.Select(e => new
                                            {
                                                PFNo = e.Employee.EmpOffInfo.NationalityID.PFNo,
                                                Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(),
                                                PFECRR = e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.PFECRR != null && d.PFECRR.Establishment_ID == pfMaster.EstablishmentID).Select(a => a.PFECRR).ToList(),
                                                Emp_Code = e.Employee.EmpCode,
                                                Emp_Name = e.Employee.EmpName.FullNameFML,
                                                Loc_Code = e.SalaryT != null ? e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.IsHold == false).SingleOrDefault().Geostruct.Location.LocationObj.LocCode : null,
                                            }).ToList();

                                            List<JVProcessData> OJVProcessDataEPF_OSalaryTINSPPF = new List<JVProcessData>();
                                            foreach (var item in OSalaryINSPPF)
                                            {
                                                if (item.PFECRR != null && item.PFNo != null)
                                                {
                                                    OJVProcessDataEPF_OSalaryTINSPPF.Add(new JVProcessData
                                                    {

                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = item.PFNo.ToString(),
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (Math.Round((item.PFECRR.Sum(r => r.EPF_Wages) + item.PFECRR.Sum(r => r.Arrear_EPF_Wages) + item.PFECRR.Sum(r => r.Officiating_EPF_Wages)) * Inspcharge / 100, 0)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "_" + item.Emp_Code,// + "_" + item.Emp_Name,//"Inspection Charges" + ca1.Code + " for Month :" + mPayMonth + "-Org_Br_" + item.Loc_Code + "_" + item.Emp_Code + "_" + item.Emp_Name,
                                                        SalaryHead = db.SalaryHead.Include(e => e.SalHeadOperationType).Where(e => e.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, item.Loc_Code, item.Emp_Code, item.Emp_Name, db.SalaryHead.Include(e => e.SalHeadOperationType).Where(e => e.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Code, db.SalaryHead.Include(e => e.SalHeadOperationType).Where(e => e.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Name),

                                                    });
                                                }

                                            }
                                            OJVProcessData.AddRange(OJVProcessDataEPF_OSalaryTINSPPF);
                                        }
                                        break;
                                    case "CPF":
                                        var OSalaryT2 = OEmployeePayroll.Select(e => new
                                        {
                                            PFNo = e.Employee.EmpOffInfo.NationalityID.PFNo,
                                            Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(),
                                            PFECRR = e.SalaryT.Where(d => d.PayMonth == mPayMonth).Select(a => a.PFECRR).ToList(),
                                            Emp_Code = e.Employee.EmpCode,
                                            Emp_Name = e.Employee.EmpName.FullNameFML,
                                            Loc_Code = e.SalaryT != null ? e.SalaryT.Where(d => d.PayMonth == mPayMonth && d.IsHold == false).SingleOrDefault().Geostruct.Location.LocationObj.LocCode : null,
                                        }).ToList();

                                        List<JVProcessData> OJVProcessDataEPF_OSalaryT1 = new List<JVProcessData>();
                                        foreach (var item in OSalaryT2)
                                        {
                                            if (item.PFECRR != null && item.PFNo != null)
                                            {
                                                OJVProcessDataEPF_OSalaryT1.Add(new JVProcessData
                                                {

                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = item.PFNo.ToString(),
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = (item.PFECRR.Sum(r => r.ER_Share) + item.PFECRR.Sum(r => r.Arrear_ER_Share) + item.PFECRR.Sum(r => r.Officiating_ER_Share)).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = ca1.Code + "_" + item.Emp_Code,// + "_" + item.Emp_Name,//"Company Share Provident Fund" + ca1.Code + " for Month :" + mPayMonth + "-Org_Br_" + item.Loc_Code + "_" + item.Emp_Code + "_" + item.Emp_Name,
                                                    SalaryHead = db.SalaryHead.Include(e => e.SalHeadOperationType).Where(e => e.SalHeadOperationType.LookupVal.ToUpper() == "CPF").SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, item.Loc_Code, item.Emp_Code, item.Emp_Name, db.SalaryHead.Include(e => e.SalHeadOperationType).Where(e => e.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Code, db.SalaryHead.Include(e => e.SalHeadOperationType).Where(e => e.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Name),
                                                });
                                            }

                                        }
                                        OJVProcessData.AddRange(OJVProcessDataEPF_OSalaryT1);
                                        break;
                                    case "NET":
                                        if (OSalaryT != null && OSalaryT.Count() > 0)
                                        {
                                            if (_CompCode == _CustomeCompCode)
                                            {
                                                var OSal = OSalaryT.Select(e => new { OSal = e.Osal, Loc_Code = e.Loc_Code, Emp_Code = e.Emp_Code, Emp_Name = e.Emp_Name, AccType = e.AccType }).ToList();
                                                List<JVProcessData> OJVProcessDataNet = OSal.Where(r => r.OSal.IsHold == false)
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = e.OSal.PaymentBranch != null ? e.OSal.PaymentBranch.Code : "",
                                                        AccountProductCode = e.AccType != null ? e.AccType.LookupVal.ToUpper() : "", //e.OSal.AccType != null ? e.OSal.AccType.LookupVal.ToUpper() : "",
                                                        AccountCustomerNo = "",
                                                        AccountCode = e.OSal.AccNo,
                                                        SubAccountCode = "",
                                                        TransactionAmount = e.OSal.TotalNet.ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = "Net Salary For Month :" + mPayMonth + "-Org_Br_" + e.Loc_Code + "_" + e.Emp_Code + "_" + e.Emp_Name,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "NET").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, e.Loc_Code, e.Emp_Code, e.Emp_Name, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "NET").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "NET").FirstOrDefault().Name),

                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);
                                            }
                                            else
                                            {
                                                var OSal = OSalaryT.Select(e => new { OSal = e.Osal, Loc_Code = e.Loc_Code, Emp_Code = e.Emp_Code, Emp_Name = e.Emp_Name, AccType = e.AccType, PaymentBank = e.PaymentBankCode }).ToList();
                                                List<JVProcessData> OJVProcessDataNet = OSal.Where(r => r.OSal.IsHold == false)
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = e.OSal.PaymentBranch != null ? e.OSal.PaymentBranch.Code : "",
                                                        AccountProductCode = e.AccType != null ? e.AccType.LookupVal.ToUpper() : "", //e.OSal.AccType != null ? e.OSal.AccType.LookupVal.ToUpper() : "",
                                                        AccountCustomerNo = "",
                                                        AccountCode = e.OSal.AccNo,
                                                        SubAccountCode = ca.SubAccountNo,//"",ahamadanagar bank NET salary subaccount no use in file
                                                        TransactionAmount = e.OSal.TotalNet.ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //  Narration = "Net Salary for Month :" + mPayMonth + "-Org_Br_" + e.Loc_Code + "_" + e.Emp_Code + "_" + e.Emp_Name,
                                                        // Narration = "Net:" + e.Emp_Code,// + "_" + e.Emp_Name,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "NET").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBank,
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, e.Loc_Code, e.Emp_Code, e.Emp_Name, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "NET").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "NET").FirstOrDefault().Name)
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);
                                            }
                                        }
                                        break;
                                    case "LVENCASH":
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            var OSal = OYearlyT.Select(e => new
                                            {
                                                YearPay = e.Osal
                                                    .Where(r => r.SalaryHead.Id == ca1.Id),
                                                AccNo = e.AccNo,
                                                AccType = e.AccType,
                                                Branch = e.Branch,
                                                Emp_Code = e.Emp_Code,
                                                Emp_Name = e.Emp_Name,
                                                Loc_Code = e.Loc_Code
                                            })
                                                .ToList();
                                            if (OSal != null && OSal.Count() > 0)
                                            {

                                                List<JVProcessData> OJVProcessDataYear = OSal.Where(r => r.YearPay.Count() > 0)
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = e.Branch,
                                                        AccountProductCode = e.AccType.LookupVal.ToUpper(),
                                                        AccountCustomerNo = "",
                                                        AccountCode = e.AccNo,
                                                        SubAccountCode = "",
                                                        TransactionAmount = e.YearPay.Sum(r => r.AmountPaid - r.TDSAmount - r.OtherDeduction).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + e.Emp_Code,// + "_" + e.Emp_Name,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, e.Loc_Code, e.Emp_Code, e.Emp_Name, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataYear);
                                            }
                                        }
                                        break;
                                    case "LTA":
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            var OSal = OYearlyT.Select(e => new
                                            {
                                                YearPay = e.Osal
                                                    .Where(r => r.SalaryHead.Id == ca1.Id),
                                                AccNo = e.AccNo,
                                                AccType = e.AccType,
                                                Branch = e.Branch,
                                                Emp_Code = e.Emp_Code,
                                                Emp_Name = e.Emp_Name,
                                                Loc_Code = e.Loc_Code
                                            })
                                                .ToList();
                                            if (OSal != null && OSal.Count() > 0)
                                            {

                                                List<JVProcessData> OJVProcessDataYear = OSal.Where(r => r.YearPay.Count() > 0)
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = e.Branch,
                                                        AccountProductCode = e.AccType.LookupVal.ToUpper(),
                                                        AccountCustomerNo = "",
                                                        AccountCode = e.AccNo,
                                                        SubAccountCode = "",
                                                        TransactionAmount = e.YearPay.Sum(r => r.AmountPaid - r.TDSAmount - r.OtherDeduction).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Code + "_" + e.Emp_Code,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, e.Loc_Code, e.Emp_Code, e.Emp_Name, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataYear);
                                            }
                                        }
                                        break;
                                    case "MEDALLOW":
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            var OSal = OYearlyT.Select(e => new
                                            {
                                                YearPay = e.Osal
                                                    .Where(r => r.SalaryHead.Id == ca1.Id),
                                                AccNo = e.AccNo,
                                                AccType = e.AccType,
                                                Branch = e.Branch,
                                                Emp_Code = e.Emp_Code,
                                                Emp_Name = e.Emp_Name,
                                                Loc_Code = e.Loc_Code
                                            })
                                                .ToList();
                                            if (OSal != null && OSal.Count() > 0)
                                            {

                                                List<JVProcessData> OJVProcessDataYear = OSal.Where(r => r.YearPay.Count() > 0)
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = e.Branch,
                                                        AccountProductCode = e.AccType.LookupVal.ToUpper(),
                                                        AccountCustomerNo = "",
                                                        AccountCode = e.AccNo,
                                                        SubAccountCode = "",
                                                        TransactionAmount = e.YearPay.Sum(r => r.AmountPaid - r.TDSAmount - r.OtherDeduction).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + e.Emp_Code,// + "_" + e.Emp_Name,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, e.Loc_Code, e.Emp_Code, e.Emp_Name, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataYear);
                                            }
                                        }
                                        break;
                                    case "LTC":
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            var OSal = OYearlyT.Select(e => new
                                            {
                                                YearPay = e.Osal
                                                    .Where(r => r.SalaryHead.Id == ca1.Id),
                                                AccNo = e.AccNo,
                                                AccType = e.AccType,
                                                Branch = e.Branch,
                                                Emp_Code = e.Emp_Code,
                                                Emp_Name = e.Emp_Name,
                                                Loc_Code = e.Loc_Code
                                            })
                                                .ToList();
                                            if (OSal != null && OSal.Count() > 0)
                                            {

                                                List<JVProcessData> OJVProcessDataYear = OSal.Where(r => r.YearPay.Count() > 0)
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = e.Branch,
                                                        AccountProductCode = e.AccType.LookupVal.ToUpper(),
                                                        AccountCustomerNo = "",
                                                        AccountCode = e.AccNo,
                                                        SubAccountCode = "",
                                                        TransactionAmount = e.YearPay.Sum(r => r.AmountPaid - r.TDSAmount - r.OtherDeduction).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "-" + e.Emp_Code, //+ "_" + e.Emp_Name,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, e.Loc_Code, e.Emp_Code, e.Emp_Name, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataYear);
                                            }
                                        }
                                        break;
                                    case "GRATUITY":
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            var OSal = OYearlyT.Select(e => new
                                            {
                                                YearPay = e.Osal
                                                    .Where(r => r.SalaryHead.Id == ca1.Id),
                                                AccNo = e.AccNo,
                                                AccType = e.AccType,
                                                Branch = e.Branch,
                                                Emp_Code = e.Emp_Code,
                                                Emp_Name = e.Emp_Name,
                                                Loc_Code = e.Loc_Code
                                            })
                                                .ToList();
                                            if (OSal != null && OSal.Count() > 0)
                                            {

                                                List<JVProcessData> OJVProcessDataYear = OSal.Where(r => r.YearPay.Count() > 0)
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = e.Branch,
                                                        AccountProductCode = e.AccType.LookupVal.ToUpper(),
                                                        AccountCustomerNo = "",
                                                        AccountCode = e.AccNo,
                                                        SubAccountCode = "",
                                                        TransactionAmount = e.YearPay.Sum(r => r.AmountPaid - r.TDSAmount - r.OtherDeduction).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "-" + e.Emp_Code,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, e.Loc_Code, e.Emp_Code, e.Emp_Name, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataYear);
                                            }
                                        }
                                        break;
                                    case "BONUS":
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            var OSal = OYearlyT.Select(e => new
                                            {
                                                YearPay = e.Osal
                                                    .Where(r => r.SalaryHead.Id == ca1.Id),
                                                AccNo = e.AccNo,
                                                AccType = e.AccType,
                                                Branch = e.Branch,
                                                Emp_Code = e.Emp_Code,
                                                Emp_Name = e.Emp_Name,
                                                Loc_Code = e.Loc_Code
                                            })
                                                .ToList();
                                            if (OSal != null && OSal.Count() > 0)
                                            {

                                                List<JVProcessData> OJVProcessDataYear = OSal.Where(r => r.YearPay.Count() > 0)
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = e.Branch,
                                                        AccountProductCode = e.AccType.LookupVal.ToUpper(),
                                                        AccountCustomerNo = "",
                                                        AccountCode = e.AccNo,
                                                        SubAccountCode = "",
                                                        TransactionAmount = e.YearPay.Sum(r => r.AmountPaid - r.TDSAmount - r.OtherDeduction).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Code + "-" + e.Emp_Code,// + "_" + e.Emp_Name,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, e.Loc_Code, e.Emp_Code, e.Emp_Name, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataYear);
                                            }
                                        }
                                        break;
                                    case "LOAN":
                                        var OLoanReq = OEmployeePayroll.Select(a => a.LoanAdvRequest).Count() > 0 ? OEmployeePayroll.Select(s =>
                                           s.LoanAdvRequest.Where(e => e.LoanAdvanceHead.SalaryHead != null && e.LoanAdvanceHead.SalaryHead.Id == ca1.Id &&
                                           (e.CloserDate == null || e.CloserDate >= Convert.ToDateTime("01/" + mPayMonth).AddMonths(1).Date))).ToList() : null;



                                        string Emp_Code = "";
                                        string Loc_Code = "";
                                        string Emp_Name = "";
                                        string PaymentBank = "";

                                        if (OLoanReq != null && OLoanReq.Count() > 0)
                                        {
                                            foreach (var ca6 in OLoanReq.ToList())
                                            {

                                                if (ca6 != null && ca6.Count() > 0)
                                                {
                                                    foreach (var ca5 in ca6.ToList())
                                                    {
                                                        var query1 = db.EmployeePayroll.Where(e => e.Id == ca5.EmployeePayroll.Id).Include(e => e.LoanAdvRequest).Include(e => e.Employee)
                                                            .Include(e => e.Employee.EmpName)
                                                             .Include(e => e.Employee.EmpOffInfo)
                                                              .Include(e => e.Employee.EmpOffInfo.Bank)
                                                            .Include(e => e.Employee.GeoStruct)
                                                            .Include(e => e.Employee.GeoStruct.Location)
                                                            .Include(e => e.Employee.GeoStruct.Location.LocationObj).AsNoTracking().AsParallel().ToList();


                                                        var OLoanData = ca5.LoanAdvRepaymentT.Count > 0 ? ca5.LoanAdvRepaymentT.Where(r => r.PayMonth == mPayMonth && r.RepaymentDate != null).ToList() : null;
                                                        if (OLoanData != null && OLoanData.Count() > 0)
                                                        {
                                                            foreach (var b in query1)
                                                            {
                                                                foreach (var c in b.LoanAdvRequest)
                                                                {
                                                                    if (c.Id.ToString() == ca5.Id.ToString())
                                                                    {
                                                                        Emp_Code = b.Employee.EmpCode;
                                                                        Loc_Code = b.Employee.GeoStruct.Location.LocationObj.LocCode;
                                                                        Emp_Name = b.Employee.EmpName.FullNameFML;
                                                                        PaymentBank = b.Employee.EmpOffInfo.Bank.Code;
                                                                        break;
                                                                    }
                                                                }
                                                                if (Emp_Code != "")
                                                                {
                                                                    break;
                                                                }
                                                            }
                                                            List<JVProcessData> OJVProcessDataLoan = OLoanData
                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                BranchCode = ca5.LoanAccBranch != null ? ca5.LoanAccBranch.LocationObj.LocCode : null,
                                                                AccountProductCode = ca5.LoanAdvanceHead.Code,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca5.LoanAccNo != null ? ca5.LoanAccNo : "",
                                                                SubAccountCode = ca5.LoanSubAccNo == null ? "" : ca5.LoanSubAccNo,
                                                                TransactionAmount = e.InstallmentPaid.ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                // Narration = "Loan" + ca5.LoanAdvanceHead.Code + " for Month :" + mPayMonth + "-Org_Br_" + Loc_Code + "_" + Emp_Code + "_" + Emp_Name,
                                                                // Narration = "Loan" + ca5.LoanAdvanceHead.Code + "_" + Emp_Code,// + "_" + Emp_Name,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca5.LoanAdvanceHead.SalaryHead.Id).SingleOrDefault(),
                                                                DistributedCode = PaymentBank,
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, (ca5.LoanAccBranch != null ? ca5.LoanAccBranch.LocationObj.LocCode : null), Emp_Code, Emp_Name, ca5.LoanAdvanceHead.Code, ca5.LoanAdvanceHead.Name),
                                                            }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataLoan);

                                                            Emp_Code = "";
                                                            Loc_Code = "";
                                                            Emp_Name = "";
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        break;
                                    default:
                                        break;
                                }
                            }
                        }
                        #endregion ind
                        //Location JV Vouchers
                        #region location
                        if (ca.JVGroup.LookupVal.ToUpper() == "LOCATION")
                        {
                            //jobposition wise grouping
                            if (ca.JobPosition != null)
                            {
                                foreach (var ca1 in ca.SalaryHead)
                                {
                                    switch (ca1.SalHeadOperationType.LookupVal.ToUpper())
                                    {

                                        case "GROSS":

                                            if (OSalaryT != null && OSalaryT.Count() > 0)
                                            {
                                                if (ca.Irregular == true)
                                                {
                                                    var OSal = OSalaryT
                                                        .Select(e => e.Osal).ToList();
                                                    List<JVProcessData> OJVProcessDataNet = OSal
                                                    .Where(r => r.IsHold == false && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { a = a.Geostruct.Location.LocationObj.Id, b = a.FuncStruct.JobPosition.Id })
                                                       .Select(e => new JVProcessData
                                                       {
                                                           BatchName = mBatchName,
                                                           ProcessMonth = mPayMonth,
                                                           ProcessDate = DateTime.Now.Date,
                                                           JVParameter = db.JVParameter.Find(ca.Id),
                                                           //BranchCode = e.Key.LocationObj.LocCode,
                                                           BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                           AccountProductCode = ca.JVProductCode,
                                                           AccountCustomerNo = "",
                                                           AccountCode = ca.AccountNo,
                                                           SubAccountCode = ca.SubAccountNo,
                                                           TransactionAmount = e.Sum(r => r.TotalEarning).ToString("0.00"),
                                                           CreditDebitFlag = ca.CreditDebitFlag,
                                                           // Narration = "Gross:" + mPayMonth + "-Org_Br_" + ca.LocationIn,
                                                           SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").SingleOrDefault(),
                                                           Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Name),

                                                       }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);

                                                }
                                                else
                                                {
                                                    var OSal = OSalaryT
                                                        .Select(e => e.Osal).ToList();
                                                    List<JVProcessData> OJVProcessDataNet = OSal
                                                    .Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.Id, FuncStruct_Id = a.FuncStruct.JobPosition.Id })
                                                        //.GroupBy(t => t.Geostruct.Location)

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Location.Where(a => a.Id == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.Sum(r => r.TotalEarning).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = "Gross:" + "-Org_Br_" + db.Location.Where(a => a.Id == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Name),
                                                    }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);
                                                }
                                            }
                                            //Emp_Monthsal;
                                            break;
                                        case "REGULAR":
                                            if (ca.Irregular == true)
                                            {
                                                var OSal = OSalaryT
                                                    .Select(e => e.Osal).ToList();
                                                var OGrp = OSal.Where(r => r.IsHold == false && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.LocationObj.Id, Func_Id = a.FuncStruct.JobPosition.Id })

                                                 .Select(e => new
                                                 {
                                                     location = e.Key,
                                                     SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList()
                                                 }).ToList();
                                                List<JVProcessData> OJVProcessDataNet = OGrp
                                                   .Select(e => new JVProcessData
                                                   {
                                                       BatchName = mBatchName,
                                                       ProcessMonth = mPayMonth,
                                                       ProcessDate = DateTime.Now.Date,
                                                       JVParameter = db.JVParameter.Find(ca.Id),
                                                       //BranchCode = e.Key.LocationObj.LocCode,
                                                       BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                       AccountProductCode = ca.JVProductCode,
                                                       AccountCustomerNo = "",
                                                       AccountCode = ca.AccountNo,
                                                       SubAccountCode = ca.SubAccountNo,
                                                       TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                       CreditDebitFlag = ca.CreditDebitFlag,
                                                       //Narration = ca1.Name + "-Org_Br_" + ca.LocationIn,
                                                       SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                       Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                   }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();
                                                    var OGrpArr = OSal2.Where(r => r.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == ca.LocationIn && r.FirstOrDefault().FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                        .GroupBy(a => new { Loc_Id = a.FirstOrDefault().GeoStruct.Location.LocationObj.Id, Func_Id = a.FirstOrDefault().FuncStruct.JobPosition.Id })
                                                        .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.Select(t => t.SalaryArrearPaymentT.Where(d => d.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                    if (OGrpArr != null && OGrpArr.Count() > 0)
                                                    {
                                                        List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //  BranchCode = e.location.LocationObj.LocCode,
                                                                BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Sum(t => t.SalHeadAmount)))).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                // Narration = ca1.Name + "-Org_Br_" + ca.LocationIn,//ca1.Name + " Arrear for Month :" + mPayMonth + "-Org_Br_" + ca.LocationIn,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                    }
                                                }
                                                //officiating

                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {

                                                    var OGrpArr = OOffSalaryT.Where(r => r.GeoStruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                        .GroupBy(a => new { Loc_Id = a.GeoStruct.Location.LocationObj.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                        .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.OfficiatingPaymentT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                    if (OGrpArr != null && OGrpArr.Count() > 0)
                                                    {
                                                        List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //  BranchCode = e.location.LocationObj.LocCode,
                                                                BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(t => t.SalHeadAmount))).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                // Narration = ca1.Name + "-Org_Br_" + ca.LocationIn,//ca1.Name + " Arrear for Month :" + mPayMonth + "-Org_Br_" + ca.LocationIn,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                    }
                                                }


                                            }
                                            else
                                            {
                                                var OSal1 = OSalaryT
                                                       .Select(e => e.Osal).ToList();
                                                var OGrp = OSal1
                                                    .Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                    .Select(e => new
                                                    {
                                                        location = e.Key,
                                                        SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList()
                                                    }).ToList();
                                                List<JVProcessData> OJVProcessDataRegular = OGrp

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Name + "-Org_Br_" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),

                                                    }).ToList();
                                                OJVProcessData.AddRange(OJVProcessDataRegular);

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).Where(r => r.FirstOrDefault().FuncStruct.JobPosition.Id == ca.JobPosition.Id).ToList();
                                                    var OGrpArr = OSal2.GroupBy(a => new { Loc_Id = a.FirstOrDefault().GeoStruct.Location.Id, Func_Id = a.FirstOrDefault().FuncStruct.JobPosition.Id }).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                    if (OGrpArr != null && OGrpArr.Count() > 0)
                                                    {
                                                        List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                // Narration = ca1.Name + "_" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                    }
                                                }
                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT
                                                       .Where(r => r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).ToList();
                                                    var OGrpArr = OSal2.GroupBy(a => new { Loc_Id = a.GeoStruct.Location.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                        .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                    if (OGrpArr != null && OGrpArr.Count() > 0)
                                                    {
                                                        List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                // Narration = ca1.Name + "_" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                    }
                                                }

                                            }

                                            break;
                                        case "BASIC":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalBASIC = OSalaryT
                                                      .Select(e => e.Osal).ToList();
                                                var OGrpBASIC = OSalBASIC.Where(r => r.IsHold == false && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.LocationObj.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                foreach (var ca10 in OGrpBASIC)
                                                {
                                                    JVProcessData OJVProcessDataBASIC = new JVProcessData()
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //      BranchCode = ca10.location.LocationObj.LocCode,
                                                        BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = ca10.SalDetails.Select(a => a.Sum(d => d.Amount)).FirstOrDefault().ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + "-Org_Br_" + ca.LocationIn,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").FirstOrDefault().Name),
                                                    };
                                                    OJVProcessData.Add(OJVProcessDataBASIC);
                                                }

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();
                                                    if (OSal2 != null)
                                                    {

                                                        var OGrpArr = OSal2.Where(x => x.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == ca.LocationIn && x.FirstOrDefault().FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                            .GroupBy(a => new { Loc_Id = a.FirstOrDefault().GeoStruct.Location.LocationObj.Id, Func_Id = a.FirstOrDefault().FuncStruct.JobPosition.Id }).
                                                            Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //  BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),

                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    //Narration = ca1.Name + "-Org_Br_" + ca.LocationIn,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }
                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT.ToList();
                                                    if (OSal2 != null)
                                                    {

                                                        var OGrpArr = OSal2.Where(x => x.GeoStruct.Location.LocationObj.LocCode == ca.LocationIn && x.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                            .GroupBy(a => new { Loc_Id = a.GeoStruct.Location.LocationObj.Id, Func_Id = a.FuncStruct.JobPosition.Id }).
                                                            Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //  BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),

                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    //Narration = ca1.Name + "-Org_Br_" + ca.LocationIn,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }

                                            }
                                            else
                                            {
                                                var OSalBASIC = OSalaryT
                                                       .Select(e => e.Osal).ToList();
                                                var OGrpBASIC = OSalBASIC.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                foreach (var ca10 in OGrpBASIC)
                                                {
                                                    JVProcessData OJVProcessDataBASIC = new JVProcessData()
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == ca10.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = ca10.SalDetails.Select(a => a.Sum(d => d.Amount)).FirstOrDefault().ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == ca10.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == ca10.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").FirstOrDefault().Name),

                                                    };
                                                    OJVProcessData.Add(OJVProcessDataBASIC);
                                                }

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();
                                                    if (OSal2 != null)
                                                    {

                                                        var OGrpArr = OSal2.Where(r => r.FirstOrDefault().FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(t => new
                                                        {
                                                            Loc_Id = t.FirstOrDefault().GeoStruct.Location.Id,
                                                            Func_Id = t.FirstOrDefault().FuncStruct.JobPosition.Id
                                                        })
                                                            .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    //Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,//ca1.Name + " Arrear for Month :" + mPayMonth + "-Org_Br_" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),

                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }
                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT.ToList();
                                                    if (OSal2 != null)
                                                    {

                                                        var OGrpArr = OSal2.Where(r => r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(t => new
                                                        {
                                                            Loc_Id = t.GeoStruct.Location.Id,
                                                            Func_Id = t.FuncStruct.JobPosition.Id
                                                        })
                                                            .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    //Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,//ca1.Name + " Arrear for Month :" + mPayMonth + "-Org_Br_" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),

                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }

                                            }
                                            break;
                                        case "VDA":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalVDA = OSalaryT
                                                          .Select(e => e.Osal).ToList();
                                                var OGrpVDA = OSalVDA.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new
                                                    {
                                                        Loc_Id = a.Geostruct.Location.LocationObj.Id,
                                                        Func_Id = a.FuncStruct.JobPosition.Id
                                                    }).Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                List<JVProcessData> OJVProcessDataVDA = OGrpVDA

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //  BranchCode = e.location.LocationObj.LocCode,
                                                        BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Name + "-" + ca.LocationIn,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),

                                                    }).ToList();
                                                OJVProcessData.AddRange(OJVProcessDataVDA);

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.Where(r => r.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == ca.LocationIn && r.FirstOrDefault().FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                            .GroupBy(a => new { Loc_Id = a.FirstOrDefault().GeoStruct.Location.Id, Func_Id = a.FirstOrDefault().FuncStruct.JobPosition.Id })
                                                            .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //   BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    // Narration = ca1.Name + "-" + ca.LocationIn,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }
                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT.ToList();
                                                    if (OSal2 != null)
                                                    {

                                                        var OGrpArr = OSal2.Where(x => x.GeoStruct.Location.LocationObj.LocCode == ca.LocationIn && x.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                            .GroupBy(a => new { Loc_Id = a.GeoStruct.Location.LocationObj.Id, Func_Id = a.FuncStruct.JobPosition.Id }).
                                                            Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //  BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),

                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    //Narration = ca1.Name + "-Org_Br_" + ca.LocationIn,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }

                                            }
                                            else
                                            {
                                                var OSalVDA = OSalaryT
                                                       .Select(e => e.Osal).ToList();
                                                var OGrpVDA = OSalVDA.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(t => new { Loc_Id = t.Geostruct.Location.Id, Func_Id = t.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                List<JVProcessData> OJVProcessDataVDA = OGrpVDA

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),

                                                    }).ToList();
                                                OJVProcessData.AddRange(OJVProcessDataVDA);

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.Where(r => r.FirstOrDefault().FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(t => new { Loc_Id = t.FirstOrDefault().GeoStruct.Location.Id, Func_Id = t.FirstOrDefault().FuncStruct.JobPosition.Id })
                                                            .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    // Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }
                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT.ToList();
                                                    if (OSal2 != null)
                                                    {

                                                        var OGrpArr = OSal2.Where(r => r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(t => new
                                                        {
                                                            Loc_Id = t.GeoStruct.Location.Id,
                                                            Func_Id = t.FuncStruct.JobPosition.Id
                                                        })
                                                            .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    //Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,//ca1.Name + " Arrear for Month :" + mPayMonth + "-Org_Br_" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),

                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }
                                            }
                                            break;

                                        case "NONREGULAR":
                                            if (ca.Irregular == true)
                                            {
                                                var OSal3 = OSalaryT
                                                .Select(e => e.Osal).ToList();
                                                var OGrp1 = OSal3.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new
                                                    {
                                                        Loc_Id = a.Geostruct.Location.LocationObj.Id,
                                                        Func_Id = a.FuncStruct.JobPosition.Id
                                                    })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                if (OGrp1 != null && OGrp1.Count() > 0)
                                                {
                                                    List<JVProcessData> OJVProcessDataNonRegular = OGrp1

                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //  BranchCode = e.location.LocationObj.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                            TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Name + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNonRegular);

                                                }
                                            }
                                            else
                                            {


                                                var OSal3 = OSalaryT
                                                       .Select(e => e.Osal).ToList();
                                                var OGrp1 = OSal3.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(t => new
                                                {
                                                    Loc_Id = t.Geostruct.Location.Id,
                                                    Func_Id = t.FuncStruct.JobPosition.Id
                                                }).Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                if (OGrp1 != null && OGrp1.Count() > 0)
                                                {
                                                    List<JVProcessData> OJVProcessDataNonRegular = OGrp1

                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                            TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNonRegular);

                                                }
                                            }
                                            break;
                                        case "EPF":
                                            if (ca.Irregular == true)
                                            {

                                                var OSalaryT1 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSal4 = OSalaryT1
                                                       .Select(e => e.Osal).ToList();
                                                var OEPF = OSal4.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() }).ToList();

                                                var SalArrT = db.SalaryArrearT.Include(e => e.SalaryArrearPaymentT)
                                                   .Include(e => e.SalaryArrearPaymentT.Select(r => r.SalaryHead))
                                                   .Include(e => e.GeoStruct)
                                                  .Include(e => e.GeoStruct.Location).Include(e => e.GeoStruct.Location.LocationObj)
                                                  .Include(e => e.FuncStruct).Include(e => e.FuncStruct.JobPosition)
                                                  .Where(e => e.PayMonth == mPayMonth && e.GeoStruct.Location.LocationObj.LocCode ==
                                                 ca.LocationIn && e.FuncStruct.JobPosition.Id == ca.JobPosition.Id).ToList();
                                                var SalAttPayT = SalArrT.Select(r => r.SalaryArrearPaymentT.Where(t => t.SalaryHead.Code == "VPF")).ToList();
                                                var amt = SalAttPayT.Sum(t => t.Sum(y => y.SalHeadAmount));

                                                if (OEPF != null && OEPF.Count() > 0) //Changes for Null
                                                {


                                                    List<JVProcessData> OJVProcessDataEPF = OEPF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            // BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = ((e.SalDetails.Sum(r => r.EE_Share) + e.SalDetails.Sum(r => r.Arrear_EE_Share) + e.SalDetails.Sum(r => r.Officiating_EE_Share)) - amt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEPF);
                                                }
                                            }
                                            else
                                            {


                                                var OSalaryT1 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSal4 = OSalaryT1
                                                       .Select(e => e.Osal).ToList();
                                                var OEPF = OSal4.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new { Loc_Id = e.Geostruct.Location.Id, Func_Id = e.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() }).ToList();

                                                var SalArrT = db.SalaryArrearT.Include(e => e.SalaryArrearPaymentT)
                                                   .Include(e => e.SalaryArrearPaymentT.Select(r => r.SalaryHead))
                                                   .Include(e => e.GeoStruct)
                                                  .Include(e => e.GeoStruct.Location).Include(e => e.GeoStruct.Location.LocationObj)
                                                  .Include(e => e.FuncStruct).Include(e => e.FuncStruct.JobPosition)
                                                  .Where(e => e.PayMonth == mPayMonth && e.FuncStruct.JobPosition.Id == ca.JobPosition.Id).ToList();
                                                var SalAttPayT = SalArrT.Select(r => r.SalaryArrearPaymentT.Where(t => t.SalaryHead.Code == "VPF")).ToList();
                                                var amt = SalAttPayT.Sum(t => t.Sum(y => y.SalHeadAmount));

                                                if (OEPF != null && OEPF.Count() > 0) //Changes for Null
                                                {


                                                    List<JVProcessData> OJVProcessDataEPF = OEPF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = ((e.SalDetails.Sum(r => r.EE_Share) + e.SalDetails.Sum(r => r.Arrear_EE_Share) + e.SalDetails.Sum(r => r.Officiating_EE_Share)) - amt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, //"Employee Share Provident Fund including Arrears" + ca1.Code + " for Month :" + mPayMonth + "-Org_Br_" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEPF);
                                                }
                                            }
                                            break;
                                        case "ADMINPF":
                                            foreach (var pfMaster in OCompPFMaster)
                                            {
                                                Admincharge = pfMaster.EPFAdminCharges;

                                                if (ca.Irregular == true)
                                                {
                                                    var OSalaryADMINPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                    var OSalADMINPF = OSalaryADMINPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                           .Select(e => e.Osal).ToList();
                                                    var OADMINPF = OSalADMINPF.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                        .GroupBy(a => new
                                                        {
                                                            Loc_Id = a.Geostruct.Location.LocationObj.Id,
                                                            Func_Id = a.FuncStruct.JobPosition.Id
                                                        })
                                                        .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                        .ToList();

                                                    if (OADMINPF != null && OADMINPF.Count() > 0) //Changes for Null
                                                    {
                                                        List<JVProcessData> OJVProcessDataADMINPF = OADMINPF
                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //   BranchCode = e.location.LocCode,
                                                                BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages) + e.SalDetails.Sum(r => r.Officiating_EPF_Wages)) * Admincharge / 100, 0)).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                //Narration = ca1.Code + "-" + ca.LocationIn,//"Admin Charges" + ca1.Code + " for Month :" + mPayMonth + "-Org_Br_" + ca.LocationIn,//"Admin Charges" + ca1.Code + " for Month :" + mPayMonth + "-Org_Br_" + ca.LocationIn,
                                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataADMINPF);
                                                    }
                                                }
                                                else
                                                {
                                                    var OSalaryADMINPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                    var OSalADMINPF = OSalaryADMINPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                           .Select(e => e.Osal).ToList();
                                                    var OADMINPF = OSalADMINPF.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new
                                                    {
                                                        Loc_Id = e.Geostruct.Location.Id,
                                                        Func_Id = e.FuncStruct.JobPosition.Id
                                                    })
                                                        .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                        .ToList();

                                                    if (OADMINPF != null && OADMINPF.Count() > 0) //Changes for Null
                                                    {
                                                        List<JVProcessData> OJVProcessDataADMINPF = OADMINPF
                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages) + e.SalDetails.Sum(r => r.Officiating_EPF_Wages)) * Admincharge / 100, 0)).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                //Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, //"Admin Charges" + ca1.Code + " for Month :" + mPayMonth + "-Org_Br_" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, //"Admin Charges" + ca1.Code + " for Month :" + mPayMonth + "-Org_Br_" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, //"Admin Charges" + ca1.Code + " for Month :" + mPayMonth + "-Org_Br_" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataADMINPF);
                                                    }
                                                }
                                            }
                                            break;
                                        case "INSPPF":
                                            foreach (var pfMaster in OCompPFMaster)
                                            {
                                                Inspcharge = pfMaster.EPFInspCharges;
                                                if (ca.Irregular == true)
                                                {
                                                    var OSalaryINSPPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                    var OSalINSPPF = OSalaryINSPPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                           .Select(e => e.Osal).ToList();
                                                    var OINSPPF = OSalINSPPF.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                        .GroupBy(a => new
                                                        {
                                                            Loc_Id = a.Geostruct.Location.LocationObj.Id,
                                                            Func_Id = a.FuncStruct.JobPosition.Id
                                                        })
                                                        .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                        .ToList();

                                                    if (OINSPPF != null && OINSPPF.Count() > 0) //Changes for Null
                                                    {
                                                        List<JVProcessData> OJVProcessDataINSPPF = OINSPPF
                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //   BranchCode = e.location.LocCode,
                                                                BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages) + e.SalDetails.Sum(r => r.Officiating_EPF_Wages)) * Inspcharge / 100, 0)).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                //Narration = ca1.Code + "-" + ca.LocationIn,// "Inspection Charges" + ca1.Code + " for Month :" + mPayMonth + "-Org_Br_" + ca.LocationIn,
                                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataINSPPF);
                                                    }
                                                }
                                                else
                                                {
                                                    var OSalaryINSPPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                    var OSalINSPPF = OSalaryINSPPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                           .Select(e => e.Osal).ToList();
                                                    var OINSPPF = OSalINSPPF.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new
                                                    {
                                                        Loc_Id = e.Geostruct.Location.Id,
                                                        Func_Id = e.FuncStruct.JobPosition.Id
                                                    })
                                                        .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                        .ToList();

                                                    if (OINSPPF != null && OINSPPF.Count() > 0) //Changes for Null
                                                    {
                                                        List<JVProcessData> OJVProcessDataINSPPF = OINSPPF
                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages) + e.SalDetails.Sum(r => r.Officiating_EPF_Wages)) * Inspcharge / 100, 0)).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                //Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataINSPPF);
                                                    }
                                                }
                                            }
                                            break;
                                        case "CPF":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalaryT2 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSal5 = OSalaryT2
                                                       .Select(e => e.Osal).ToList();
                                                var OCPF = OSal5.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new
                                                    {
                                                        Loc_Id = a.Geostruct.Location.LocationObj.Id,
                                                        Func_Id = a.FuncStruct.JobPosition.Id
                                                    })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                    .ToList();

                                                if (OCPF != null && OCPF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataCPF = OCPF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //   BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.ER_Share) + e.SalDetails.Sum(r => r.Arrear_ER_Share) + e.SalDetails.Sum(r => r.Officiating_ER_Share)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataCPF);
                                                }
                                            }
                                            else
                                            {
                                                var OSalaryT2 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSal5 = OSalaryT2
                                                       .Select(e => e.Osal).ToList();
                                                var OCPF = OSal5.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new
                                                {
                                                    Loc_Id = e.Geostruct.Location.Id,
                                                    Func_Id = e.FuncStruct.JobPosition.Id
                                                })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                    .ToList();

                                                if (OCPF != null && OCPF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataCPF = OCPF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.ER_Share) + e.SalDetails.Sum(r => r.Arrear_ER_Share) + e.SalDetails.Sum(r => r.Officiating_ER_Share)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataCPF);
                                                }
                                            }
                                            break;
                                        case "PENSION":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalaryT3 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSal6 = OSalaryT3
                                                       .Select(e => e.Osal).ToList();

                                                var OEPS = OSal6.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.LocationObj.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                    .ToList();
                                                if (OEPS != null && OEPS.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEPS = OEPS
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //   BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.EPS_Share) + e.SalDetails.Sum(r => r.Arrear_EPS_Share) + e.SalDetails.Sum(r => r.Officiating_EPS_Share)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEPS);
                                                }
                                            }
                                            else
                                            {


                                                var OSalaryT3 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSal6 = OSalaryT3
                                                       .Select(e => e.Osal).ToList();

                                                var OEPS = OSal6.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new { Loc_Id = e.Geostruct.Location.Id, Func_Id = e.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                    .ToList();
                                                if (OEPS != null && OEPS.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEPS = OEPS
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.EPS_Share) + e.SalDetails.Sum(r => r.Arrear_EPS_Share) + e.SalDetails.Sum(r => r.Officiating_EPS_Share)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEPS);
                                                }
                                            }
                                            break;

                                        case "LWF":
                                            if (ca.Irregular == true)
                                            {

                                                var OSalaryTEMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalEMPLWF = OSalaryTEMPLWF
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPEMPLWF = OSalEMPLWF.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.LocationObj.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.LWFTransT).ToList() })
                                                    .ToList();
                                                if (OEMPEMPLWF != null && OEMPEMPLWF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPLWF = OEMPEMPLWF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPLWF);
                                                }
                                            }
                                            else
                                            {
                                                var OSalaryTEMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalEMPLWF = OSalaryTEMPLWF
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPEMPLWF = OSalEMPLWF.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new { Loc_Id = e.Geostruct.Location.Id, Func_Id = e.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.LWFTransT).ToList() })
                                                    .ToList();
                                                if (OEMPEMPLWF != null && OEMPEMPLWF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPLWF = OEMPEMPLWF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPLWF);
                                                }
                                            }
                                            break;
                                        case "COMPLWF":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalaryTCOMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalCOMPLWF = OSalaryTCOMPLWF
                                                       .Select(e => e.Osal).Where(e => e.LWFTransT != null).ToList();
                                                var OCOMPLWF = OSalCOMPLWF.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.LocationObj.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                     .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.LWFTransT).ToList() })
                                                    .ToList();
                                                if (OCOMPLWF != null && OCOMPLWF.Count() > 0) //Changes for Null
                                                {

                                                    List<JVProcessData> OJVProcessDataCOMPLWF = OCOMPLWF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            // BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataCOMPLWF);
                                                }
                                            }
                                            else
                                            {


                                                var OSalaryTCOMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalCOMPLWF = OSalaryTCOMPLWF
                                                       .Select(e => e.Osal).ToList();
                                                var OCOMPLWF = OSalCOMPLWF.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new { Loc_Id = e.Geostruct.Location.Id, Func_Id = e.FuncStruct.JobPosition.Id })
                                                     .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.LWFTransT).ToList() })
                                                    .ToList();
                                                if (OCOMPLWF != null && OCOMPLWF.Count() > 0) //Changes for Null
                                                {

                                                    List<JVProcessData> OJVProcessDataCOMPLWF = OCOMPLWF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataCOMPLWF);
                                                }
                                            }
                                            break;
                                        case "COMPESIC":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalaryTCOMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalCOMPESIS = OSalaryTCOMPESIS
                                                       .Select(e => e.Osal).ToList();
                                                var OCOMPESIS = OSalCOMPESIS.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.LocationObj.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                     .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.ESICTransT).ToList() })
                                                    .ToList();

                                                if (OCOMPESIS != null && OCOMPESIS.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataCOMPESIS = OCOMPESIS
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //   BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "_" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataCOMPESIS);
                                                }
                                            }
                                            else
                                            {


                                                var OSalaryTCOMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalCOMPESIS = OSalaryTCOMPESIS
                                                       .Select(e => e.Osal).ToList();
                                                var OCOMPESIS = OSalCOMPESIS.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new { Loc_Id = e.Geostruct.Location.Id, Func_Id = e.FuncStruct.JobPosition.Id })
                                                     .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.ESICTransT).ToList() })
                                                    .ToList();

                                                if (OCOMPESIS != null && OCOMPESIS.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataCOMPESIS = OCOMPESIS
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "_" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataCOMPESIS);
                                                }
                                            }
                                            break;
                                        case "ESIC":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalaryTEMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalCOMPEMPESIS = OSalaryTEMPESIS
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPESIS = OSalCOMPEMPESIS.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.LocationObj.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Where(r => r.ESICTransT != null).Select(r => r.ESICTransT).ToList() })
                                                    .ToList();

                                                if (OEMPESIS != null && OEMPESIS.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPESIS = OEMPESIS
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //       BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //  Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPESIS);
                                                }
                                            }
                                            else
                                            {


                                                var OSalaryTEMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalCOMPEMPESIS = OSalaryTEMPESIS
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPESIS = OSalCOMPEMPESIS.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new { Loc_Id = e.Geostruct.Location.Id, Func_Id = e.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.ESICTransT).ToList() })
                                                    .ToList();

                                                if (OEMPESIS != null && OEMPESIS.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPESIS = OEMPESIS
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "_" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPESIS);
                                                }
                                            }
                                            break;
                                        case "PTAX":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalaryTPTAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalPTAX = OSalaryTPTAX
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPPTAX = OSalPTAX.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.LocationObj.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PTaxTransT).ToList() })
                                                    .ToList();
                                                if (OEMPPTAX != null && OEMPPTAX.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPPTAX = OEMPPTAX
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //     BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.PTAmount) + e.SalDetails.Sum(r => r.ArrearPTAmount)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //  Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPPTAX);
                                                }
                                            }
                                            else
                                            {
                                                var OSalaryTPTAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalPTAX = OSalaryTPTAX
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPPTAX = OSalPTAX.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new { Loc_Id = e.Geostruct.Location.Id, Func_Id = e.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PTaxTransT).ToList() })
                                                    .ToList();
                                                if (OEMPPTAX != null && OEMPPTAX.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPPTAX = OEMPPTAX
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.PTAmount) + e.SalDetails.Sum(r => r.ArrearPTAmount)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPPTAX);
                                                }
                                            }
                                            break;
                                        case "ITAX":
                                            if (ca.Irregular == true)
                                            {

                                                var OSalaryTITAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalITAX = OSalaryTITAX
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPITAX = OSalITAX.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.LocationObj.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(t => t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "ITAX")).ToList() })
                                                    .ToList();
                                                if (OEMPITAX != null && OEMPITAX.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPITAX = OEMPITAX
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //  BranchCode = e.location.LocationObj.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            // TransactionAmount = e.SalDetails.Sum(r => r.Amoount).ToString("0.00"),
                                                            TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPITAX);
                                                }
                                            }
                                            else
                                            {


                                                var OSalaryTITAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalITAX = OSalaryTITAX
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPITAX = OSalITAX.Where(r => r.IsHold == false && r.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new { Loc_Id = e.Geostruct.Location.Id, Func_Id = e.FuncStruct.JobPosition.Id })
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(t => t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "ITAX")).ToList() })
                                                    .ToList();
                                                if (OEMPITAX != null && OEMPITAX.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPITAX = OEMPITAX
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            // TransactionAmount = e.SalDetails.Sum(r => r.Amoount).ToString("0.00"),
                                                            TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPITAX);
                                                }
                                            }
                                            break;
                                        default:

                                            break;
                                    }

                                }
                            }
                            //jobposition wise grouping end

                            //gradewise grouping
                            else if (ca.PayStruct != null)
                            {
                            }
                            //gradewise grouping end
                            //locationwise grouping
                            else if (ca.JobPosition == null && ca.PayStruct == null)
                            {
                                foreach (var ca1 in ca.SalaryHead)
                                {
                                    switch (ca1.SalHeadOperationType.LookupVal.ToUpper())
                                    {
                                        //  start
                                        case "BONUS":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {
                                                //var YearlyAllHeadamt = OYearlyT.SelectMany(e => e.Osal.Select(qa => qa)).ToList();
                                                //var YEarlydataFilterAmt = YearlyAllHeadamt.Where(e => e.SalaryHead.Id == ca1.Id).ToList();
                                                if (ca.Irregular == true)
                                                {

                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                    .Where(r => r.Loc_Code == ca.LocationIn
                                                        ).GroupBy(a => a.Loc_Code)
                                                       .Select(e => new JVProcessData
                                                       {
                                                           BatchName = mBatchName,
                                                           ProcessMonth = mPayMonth,
                                                           ProcessDate = DateTime.Now.Date,
                                                           JVParameter = db.JVParameter.Find(ca.Id),
                                                           //BranchCode = e.Key.LocationObj.LocCode,
                                                           BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                           AccountProductCode = ca.JVProductCode,
                                                           AccountCustomerNo = "",
                                                           AccountCode = ca.AccountNo,
                                                           SubAccountCode = ca.SubAccountNo,
                                                           TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           // TransactionAmount = YearlyAllHeadamt.Where(ea => ea.SalaryHead.Id == ca1.Id).Sum(t => t.AmountPaid).ToString(),
                                                           //OYearlyT.Where(ra => ra.Loc_Code == ca.LocationIn).Select(q=>q.Osal.Sum(y=>y.AmountPaid)).SingleOrDefault(),
                                                           //  .Select(q => q.Osal.Sum(r => r.AmountPaid)),//,
                                                           CreditDebitFlag = ca.CreditDebitFlag,
                                                           // Narration = ca1.Code + "-" + ca.LocationIn,
                                                           SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").SingleOrDefault(),
                                                           Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").FirstOrDefault().Name),
                                                       }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);

                                                }
                                                else
                                                {
                                                    List<Oyearyt> Osal = OYearlyT
                                                           .ToList();

                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                        //.Where(r => r.IsHold == false
                                                        //        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                        //    )
                                                    .GroupBy(a => new { Loc_Id = a.Loc_Code })

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        // BranchCode = e.Key.LocationObj.LocCode,
                                                        BranchCode = db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode,
                                                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString(),
                                                        //TransactionAmount = YEarlydataFilterAmt,
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Code + "-" + db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").FirstOrDefault().Name),
                                                    }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);
                                                }


                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }

                                            }
                                            //Yearly location wise;
                                            break;
                                        case "LVENCASH":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {
                                                if (ca.Irregular == true)
                                                {

                                                    //var OSal = OYearlyT
                                                    //    .Select(e => e.Osal).ToList();
                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                    .Where(r => r.Loc_Code == ca.LocationIn
                                                        ).GroupBy(a => a.Loc_Code)
                                                       .Select(e => new JVProcessData
                                                       {
                                                           BatchName = mBatchName,
                                                           ProcessMonth = mPayMonth,
                                                           ProcessDate = DateTime.Now.Date,
                                                           JVParameter = db.JVParameter.Find(ca.Id),
                                                           //BranchCode = e.Key.LocationObj.LocCode,
                                                           BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                           AccountProductCode = ca.JVProductCode,
                                                           AccountCustomerNo = "",
                                                           AccountCode = ca.AccountNo,
                                                           SubAccountCode = ca.SubAccountNo,
                                                           TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           //  TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           //OYearlyT.Where(ra => ra.Loc_Code == ca.LocationIn).Select(q=>q.Osal.Sum(y=>y.AmountPaid)).SingleOrDefault(),
                                                           //  .Select(q => q.Osal.Sum(r => r.AmountPaid)),//,
                                                           CreditDebitFlag = ca.CreditDebitFlag,
                                                           // Narration = "LVENCASH" + "-" + ca.LocationIn,
                                                           SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").SingleOrDefault(),
                                                           Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").FirstOrDefault().Name),
                                                       }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);

                                                }
                                                else
                                                {
                                                    var OSal = OYearlyT
                                                        .Select(e => e.Osal).ToList();

                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                        //.Where(r => r.IsHold == false
                                                        //        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                        //    )
                                                    .GroupBy(a => new { Loc_Id = a.Loc_Code })

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        // BranchCode = e.Key.LocationObj.LocCode,
                                                        BranchCode = db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = "LVENCASH" + "-" + db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").FirstOrDefault().Name),
                                                    }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);
                                                }

                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }
                                            }
                                            //Yearl
                                            break;
                                        case "LTA":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {
                                                if (ca.Irregular == true)
                                                {

                                                    //var OSal = OYearlyT
                                                    //    .Select(e => e.Osal).ToList();
                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                    .Where(r => r.Loc_Code == ca.LocationIn
                                                        ).GroupBy(a => a.Loc_Code)
                                                       .Select(e => new JVProcessData
                                                       {
                                                           BatchName = mBatchName,
                                                           ProcessMonth = mPayMonth,
                                                           ProcessDate = DateTime.Now.Date,
                                                           JVParameter = db.JVParameter.Find(ca.Id),
                                                           //BranchCode = e.Key.LocationObj.LocCode,
                                                           BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                           AccountProductCode = ca.JVProductCode,
                                                           AccountCustomerNo = "",
                                                           AccountCode = ca.AccountNo,
                                                           SubAccountCode = ca.SubAccountNo,
                                                           TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           //OYearlyT.Where(ra => ra.Loc_Code == ca.LocationIn).Select(q=>q.Osal.Sum(y=>y.AmountPaid)).SingleOrDefault(),
                                                           //  .Select(q => q.Osal.Sum(r => r.AmountPaid)),//,
                                                           CreditDebitFlag = ca.CreditDebitFlag,
                                                           //Narration = ca1.Code + "-" + ca.LocationIn,
                                                           SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").SingleOrDefault(),
                                                           Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").FirstOrDefault().Name),
                                                       }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);

                                                }
                                                else
                                                {
                                                    var OSal = OYearlyT
                                                        .Select(e => e.Osal).ToList();

                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                        //.Where(r => r.IsHold == false
                                                        //        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                        //    )
                                                    .GroupBy(a => new { Loc_Id = a.Loc_Code })

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        // BranchCode = e.Key.LocationObj.LocCode,
                                                        BranchCode = db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //  Narration = ca1.Code + "-" + db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").FirstOrDefault().Name),
                                                    }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);
                                                }
                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }
                                            }
                                            //Yearl
                                            break;

                                        case "MEDALLOW":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {
                                                if (ca.Irregular == true)
                                                {

                                                    //var OSal = OYearlyT
                                                    //    .Select(e => e.Osal).ToList();
                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                    .Where(r => r.Loc_Code == ca.LocationIn
                                                        ).GroupBy(a => a.Loc_Code)
                                                       .Select(e => new JVProcessData
                                                       {
                                                           BatchName = mBatchName,
                                                           ProcessMonth = mPayMonth,
                                                           ProcessDate = DateTime.Now.Date,
                                                           JVParameter = db.JVParameter.Find(ca.Id),
                                                           //BranchCode = e.Key.LocationObj.LocCode,
                                                           BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                           AccountProductCode = ca.JVProductCode,
                                                           AccountCustomerNo = "",
                                                           AccountCode = ca.AccountNo,
                                                           SubAccountCode = ca.SubAccountNo,
                                                           TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           //OYearlyT.Where(ra => ra.Loc_Code == ca.LocationIn).Select(q=>q.Osal.Sum(y=>y.AmountPaid)).SingleOrDefault(),
                                                           //  .Select(q => q.Osal.Sum(r => r.AmountPaid)),//,
                                                           CreditDebitFlag = ca.CreditDebitFlag,
                                                           // Narration = ca1.Code + "-" + ca.LocationIn,
                                                           SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").SingleOrDefault(),
                                                           Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").FirstOrDefault().Name),
                                                       }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);

                                                }
                                                else
                                                {
                                                    var OSal = OYearlyT
                                                        .Select(e => e.Osal).ToList();

                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                        //.Where(r => r.IsHold == false
                                                        //        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                        //    )
                                                    .GroupBy(a => new { Loc_Id = a.Loc_Code })

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        // BranchCode = e.Key.LocationObj.LocCode,
                                                        BranchCode = db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //  Narration = ca1.Code + "-" + db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").FirstOrDefault().Name),
                                                    }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);
                                                }
                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }
                                            }
                                            //Yearl
                                            break;
                                        case "LTC":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {
                                                if (ca.Irregular == true)
                                                {

                                                    //var OSal = OYearlyT
                                                    //    .Select(e => e.Osal).ToList();
                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                    .Where(r => r.Loc_Code == ca.LocationIn
                                                        ).GroupBy(a => a.Loc_Code)
                                                       .Select(e => new JVProcessData
                                                       {
                                                           BatchName = mBatchName,
                                                           ProcessMonth = mPayMonth,
                                                           ProcessDate = DateTime.Now.Date,
                                                           JVParameter = db.JVParameter.Find(ca.Id),
                                                           //BranchCode = e.Key.LocationObj.LocCode,
                                                           BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                           AccountProductCode = ca.JVProductCode,
                                                           AccountCustomerNo = "",
                                                           AccountCode = ca.AccountNo,
                                                           SubAccountCode = ca.SubAccountNo,
                                                           //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           //OYearlyT.Where(ra => ra.Loc_Code == ca.LocationIn).Select(q=>q.Osal.Sum(y=>y.AmountPaid)).SingleOrDefault(),
                                                           //  .Select(q => q.Osal.Sum(r => r.AmountPaid)),//,
                                                           CreditDebitFlag = ca.CreditDebitFlag,
                                                           // Narration = ca1.Code + "-" + ca.LocationIn,
                                                           SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").SingleOrDefault(),
                                                           Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").FirstOrDefault().Name),
                                                       }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);

                                                }
                                                else
                                                {
                                                    var OSal = OYearlyT
                                                        .Select(e => e.Osal).ToList();

                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                        //.Where(r => r.IsHold == false
                                                        //        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                        //    )
                                                    .GroupBy(a => new { Loc_Id = a.Loc_Code })

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        // BranchCode = e.Key.LocationObj.LocCode,
                                                        BranchCode = db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Code + "-" + db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").FirstOrDefault().Name),
                                                    }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);
                                                }

                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }
                                            }
                                            //Yearl
                                            break;
                                        case "GRATUITY":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {
                                                if (ca.Irregular == true)
                                                {

                                                    //var OSal = OYearlyT
                                                    //    .Select(e => e.Osal).ToList();
                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                    .Where(r => r.Loc_Code == ca.LocationIn
                                                        ).GroupBy(a => a.Loc_Code)
                                                       .Select(e => new JVProcessData
                                                       {
                                                           BatchName = mBatchName,
                                                           ProcessMonth = mPayMonth,
                                                           ProcessDate = DateTime.Now.Date,
                                                           JVParameter = db.JVParameter.Find(ca.Id),
                                                           //BranchCode = e.Key.LocationObj.LocCode,
                                                           BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                           AccountProductCode = ca.JVProductCode,
                                                           AccountCustomerNo = "",
                                                           AccountCode = ca.AccountNo,
                                                           SubAccountCode = ca.SubAccountNo,
                                                           // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           //OYearlyT.Where(ra => ra.Loc_Code == ca.LocationIn).Select(q=>q.Osal.Sum(y=>y.AmountPaid)).SingleOrDefault(),
                                                           //  .Select(q => q.Osal.Sum(r => r.AmountPaid)),//,
                                                           CreditDebitFlag = ca.CreditDebitFlag,
                                                           // Narration = ca1.Code + "-" + ca.LocationIn,
                                                           SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").SingleOrDefault(),
                                                           Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").FirstOrDefault().Name),
                                                       }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);

                                                }
                                                else
                                                {
                                                    var OSal = OYearlyT
                                                        .Select(e => e.Osal).ToList();

                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                        //.Where(r => r.IsHold == false
                                                        //        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                        //    )
                                                    .GroupBy(a => new { Loc_Id = a.Loc_Code })

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        // BranchCode = e.Key.LocationObj.LocCode,
                                                        BranchCode = db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        //  TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Code + "-" + db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").FirstOrDefault().Name),
                                                    }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);
                                                }
                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }
                                            }
                                            //Yearl
                                            break;
                                        // End


                                        case "GROSS":
                                            //if Location

                                            if (OSalaryT != null && OSalaryT.Count() > 0)
                                            {
                                                if (ca.Irregular == true)
                                                {

                                                    var OSal = OSalaryT
                                                        .Select(e => e.Osal).ToList();
                                                    List<JVProcessData> OJVProcessDataNet = OSal
                                                    .Where(r => r.IsHold == false
                                                       && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                        ).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                       .Select(e => new JVProcessData
                                                       {
                                                           BatchName = mBatchName,
                                                           ProcessMonth = mPayMonth,
                                                           ProcessDate = DateTime.Now.Date,
                                                           JVParameter = db.JVParameter.Find(ca.Id),
                                                           //BranchCode = e.Key.LocationObj.LocCode,
                                                           BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                           AccountProductCode = ca.JVProductCode,
                                                           AccountCustomerNo = "",
                                                           AccountCode = ca.AccountNo,
                                                           SubAccountCode = ca.SubAccountNo,
                                                           TransactionAmount = e.Sum(r => r.TotalEarning).ToString("0.00"),
                                                           CreditDebitFlag = ca.CreditDebitFlag,
                                                           // Narration = ca1.Code + "-" + ca.LocationIn,
                                                           SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").SingleOrDefault(),
                                                           Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Name),
                                                       }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);

                                                }
                                                else
                                                {
                                                    var OSal = OSalaryT
                                                        .Select(e => e.Osal).ToList();

                                                    List<JVProcessData> OJVProcessDataNet = OSal
                                                .Where(r => r.IsHold == false
                                                        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                    )
                                                    .GroupBy(a => new { Loc_Id = a.Geostruct.Location.Id })

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        // BranchCode = e.Key.LocationObj.LocCode,
                                                        BranchCode = db.Location.Where(a => a.Id == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.Sum(r => r.TotalEarning).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Name),
                                                    }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);
                                                }
                                            }
                                            //Emp_Monthsal;
                                            break;
                                        case "REGULAR":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {
                                                //var YearlyAllHeadamt = OYearlyT.SelectMany(e => e.Osal.Select(qa => qa)).ToList();
                                                //var YEarlydataFilterAmt = YearlyAllHeadamt.Where(e => e.SalaryHead.Id == ca1.Id).ToList();
                                                if (ca.Irregular == true)
                                                {

                                                    //var OSal = OYearlyT
                                                    //    .Select(e => e.Osal).ToList();
                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                    .Where(r => r.Loc_Code == ca.LocationIn
                                                        ).GroupBy(a => a.Loc_Code)
                                                       .Select(e => new JVProcessData
                                                       {
                                                           BatchName = mBatchName,
                                                           ProcessMonth = mPayMonth,
                                                           ProcessDate = DateTime.Now.Date,
                                                           JVParameter = db.JVParameter.Find(ca.Id),
                                                           //BranchCode = e.Key.LocationObj.LocCode,
                                                           BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                           AccountProductCode = ca.JVProductCode,
                                                           AccountCustomerNo = "",
                                                           AccountCode = ca.AccountNo,
                                                           SubAccountCode = ca.SubAccountNo,
                                                           //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           //TransactionAmount = YEarlydataFilterAmt.Count() > 0 ? YEarlydataFilterAmt.Sum(t => t.AmountPaid).ToString() : "0.00",
                                                           TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                           //OYearlyT.Where(ra => ra.Loc_Code == ca.LocationIn).Select(q=>q.Osal.Sum(y=>y.AmountPaid)).SingleOrDefault(),
                                                           //  .Select(q => q.Osal.Sum(r => r.AmountPaid)),//,
                                                           CreditDebitFlag = ca.CreditDebitFlag,
                                                           // Narration = ca1.Code + "-" + ca.LocationIn,
                                                           SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).SingleOrDefault(),
                                                           Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).FirstOrDefault().Name),
                                                       }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);

                                                }
                                                else
                                                {
                                                    var OSal = OYearlyT
                                                        .Select(e => e.Osal).ToList();

                                                    List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                        //.Where(r => r.IsHold == false
                                                        //        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                        //    )
                                                    .GroupBy(a => new { Loc_Id = a.Loc_Code })

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        // BranchCode = e.Key.LocationObj.LocCode,
                                                        BranchCode = db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        // TransactionAmount = YEarlydataFilterAmt.Count() > 0 ? YEarlydataFilterAmt.Sum(t => t.AmountPaid).ToString() : "0.00",
                                                        TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Code + "-" + db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNet);
                                                }

                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }

                                            }

                                            //yearly end			
                                            if (ca.Irregular == true)
                                            {
                                                var OSal = OSalaryT
                                                    .Select(e => e.Osal).ToList();
                                                var OGrp = OSal.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                 .Select(e => new
                                                 {
                                                     location = e.Key,
                                                     SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList()
                                                 }).ToList();
                                                List<JVProcessData> OJVProcessDataNet = OGrp
                                                   .Select(e => new JVProcessData
                                                   {
                                                       BatchName = mBatchName,
                                                       ProcessMonth = mPayMonth,
                                                       ProcessDate = DateTime.Now.Date,
                                                       JVParameter = db.JVParameter.Find(ca.Id),
                                                       //BranchCode = e.Key.LocationObj.LocCode,
                                                       BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                       AccountProductCode = ca.JVProductCode,
                                                       AccountCustomerNo = "",
                                                       AccountCode = ca.AccountNo,
                                                       SubAccountCode = ca.SubAccountNo,
                                                       TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                       CreditDebitFlag = ca.CreditDebitFlag,
                                                       //Narration = ca1.Name + "-" + ca.LocationIn,
                                                       SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                       Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                   }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();

                                                    var OGrpArr = OSal2.Where(r => r.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == ca.LocationIn)
                                                        .GroupBy(a => a.FirstOrDefault().GeoStruct.Location.LocationObj.Id)
                                                        .Select(e => new
                                                        {
                                                            location = e.Key,
                                                            SalDetails =
                                                                //e.SelectMany(r => r).ToList().Count()>0 &&
                                                             e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT)).ToList()
                                                            //.Count()>0 ?
                                                            // e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT)).ToList():null
                                                        }).ToList();

                                                    double Amt = 0;
                                                    var Salarr = OGrpArr.SelectMany(q => q.SalDetails.SelectMany(qa => qa)).ToList();
                                                    var Salarrsingle = Salarr.Where(q => q.SalaryHead.Id == ca1.Id).ToList();
                                                    double ArrSalHeadAmount = 0.0;
                                                    if (Salarrsingle.Count() > 0)
                                                    {
                                                        ArrSalHeadAmount = Salarrsingle.Sum(q => q.SalHeadAmount);
                                                    }


                                                    //var OGrpArr = OSal2.Where(r => r.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.FirstOrDefault().GeoStruct.Location.LocationObj.Id)
                                                    //    .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                    if (OGrpArr != null && OGrpArr.Count() > 0)
                                                    {
                                                        List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //  BranchCode = e.location.LocationObj.LocCode,
                                                                BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                //TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Sum(t=>t.SalHeadAmount))).ToString(),
                                                                TransactionAmount = ArrSalHeadAmount.ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                //Narration = ca1.Name + "-" + ca.LocationIn,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                    }
                                                }
                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT.ToList();

                                                    var OGrpArr = OSal2.Where(r => r.GeoStruct.Location.LocationObj.LocCode == ca.LocationIn)
                                                        .GroupBy(a => a.GeoStruct.Location.LocationObj.Id)
                                                        .Select(e => new
                                                        {
                                                            location = e.Key,
                                                            SalDetails =
                                                                //e.SelectMany(r => r).ToList().Count()>0 &&
                                                             e.SelectMany(r => r.OfficiatingPaymentT).ToList()
                                                            //.Count()>0 ?
                                                            // e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT)).ToList():null
                                                        }).ToList();

                                                    double Amt = 0;
                                                    var Salarr = OGrpArr.SelectMany(q => q.SalDetails).ToList();
                                                    var Salarrsingle = Salarr.Where(q => q.SalaryHead.Id == ca1.Id).ToList();
                                                    double ArrSalHeadAmount = 0.0;
                                                    if (Salarrsingle.Count() > 0)
                                                    {
                                                        ArrSalHeadAmount = Salarrsingle.Sum(q => q.SalHeadAmount);
                                                    }


                                                    //var OGrpArr = OSal2.Where(r => r.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.FirstOrDefault().GeoStruct.Location.LocationObj.Id)
                                                    //    .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                    if (OGrpArr != null && OGrpArr.Count() > 0)
                                                    {
                                                        List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //  BranchCode = e.location.LocationObj.LocCode,
                                                                BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                //TransactionAmount = _returnTransctionAmt(e.SalDetails.Sum(a => a.Sum(t=>t.SalHeadAmount))).ToString(),
                                                                TransactionAmount = ArrSalHeadAmount.ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                //Narration = ca1.Name + "-" + ca.LocationIn,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                    }
                                                }

                                            }
                                            else
                                            {
                                                var OSal1 = OSalaryT
                                                       .Select(e => e.Osal).ToList();
                                                var OGrp = OSal1.GroupBy(t => t.Geostruct.Location.Id)
                                                    .Select(e => new
                                                    {
                                                        location = e.Key,
                                                        SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList()
                                                    }).ToList();
                                                List<JVProcessData> OJVProcessDataRegular = OGrp

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = e.location.LocationObj.LocCode,
                                                        BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();
                                                OJVProcessData.AddRange(OJVProcessDataRegular);

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();
                                                    var OGrpArr = OSal2.GroupBy(t => t.FirstOrDefault().GeoStruct.Location.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                    if (OGrpArr != null && OGrpArr.Count() > 0)
                                                    {
                                                        List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //BranchCode = e.location.LocationObj.LocCode,
                                                                BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                // Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                    }
                                                }
                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT.ToList();
                                                    var OGrpArr = OSal2.GroupBy(t => t.GeoStruct.Location.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                    if (OGrpArr != null && OGrpArr.Count() > 0)
                                                    {
                                                        List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //BranchCode = e.location.LocationObj.LocCode,
                                                                BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                // Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                    }
                                                }


                                            }

                                            break;
                                        case "BASIC":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalBASIC = OSalaryT
                                                          .Select(e => e.Osal).ToList();
                                                var OGrpBASIC = OSalBASIC.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id).Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                List<JVProcessData> OJVProcessDataBASIC = OGrpBASIC

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //  BranchCode = e.location.LocationObj.LocCode,
                                                        BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + "-" + ca.LocationIn,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").FirstOrDefault().Name),
                                                    }).ToList();
                                                OJVProcessData.AddRange(OJVProcessDataBASIC);

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.Where(r => r.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.FirstOrDefault().GeoStruct.Location.LocationObj.Id)
                                                            .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //   BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    //Narration = ca1.Name + "-" + ca.LocationIn,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }
                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT.ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.Where(r => r.GeoStruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.GeoStruct.Location.LocationObj.Id)
                                                            .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //   BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    //Narration = ca1.Name + "-" + ca.LocationIn,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }

                                            }
                                            else
                                            {
                                                var OSalBASIC = OSalaryT
                                                       .Select(e => e.Osal).ToList();
                                                var OGrpBASIC = OSalBASIC.GroupBy(t => t.Geostruct.Location.Id).Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                List<JVProcessData> OJVProcessDataBASIC = OGrpBASIC

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = e.location.LocationObj.LocCode,
                                                        BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").FirstOrDefault().Name),
                                                    }).ToList();
                                                OJVProcessData.AddRange(OJVProcessDataBASIC);

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.GroupBy(t => t.FirstOrDefault().GeoStruct.Location.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    // Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }
                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT.ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.GroupBy(t => t.GeoStruct.Location.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    // Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }

                                            }
                                            break;
                                        case "VDA":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalVDA = OSalaryT
                                                          .Select(e => e.Osal).ToList();
                                                var OGrpVDA = OSalVDA.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id).Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                List<JVProcessData> OJVProcessDataVDA = OGrpVDA

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //  BranchCode = e.location.LocationObj.LocCode,
                                                        BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + "-" + ca.LocationIn,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "VDA").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "VDA").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "VDA").FirstOrDefault().Name),
                                                    }).ToList();
                                                OJVProcessData.AddRange(OJVProcessDataVDA);

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.Where(r => r.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.FirstOrDefault().GeoStruct.Location.LocationObj.Id)
                                                            .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //   BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    //Narration = ca1.Name + "-" + ca.LocationIn,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }

                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT.ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.Where(r => r.GeoStruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.GeoStruct.Location.LocationObj.Id)
                                                            .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //   BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    //Narration = ca1.Name + "-" + ca.LocationIn,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }


                                            }
                                            else
                                            {
                                                var OSalVDA = OSalaryT
                                                       .Select(e => e.Osal).ToList();
                                                var OGrpVDA = OSalVDA.GroupBy(t => t.Geostruct.Location.Id).Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                List<JVProcessData> OJVProcessDataVDA = OGrpVDA

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = e.location.LocationObj.LocCode,
                                                        BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "VDA").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "VDA").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "VDA").FirstOrDefault().Name),
                                                    }).ToList();
                                                OJVProcessData.AddRange(OJVProcessDataVDA);

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.GroupBy(t => t.FirstOrDefault().GeoStruct.Location.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    // Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }
                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT.ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.GroupBy(t => t.GeoStruct.Location.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    // Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }

                                            }
                                            break;
                                        case "OFFEARN":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalOFFICIATING = OSalaryT
                                                          .Select(e => e.Osal).ToList();
                                                var OGrpOFFICIATING = OSalOFFICIATING.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id).Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                List<JVProcessData> OJVProcessDataOFFICIATING = OGrpOFFICIATING

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //  BranchCode = e.location.LocationObj.LocCode,
                                                        BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + "-" + ca.LocationIn,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "OFFEARN").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "OFFEARN").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "OFFEARN").FirstOrDefault().Name),
                                                    }).ToList();
                                                OJVProcessData.AddRange(OJVProcessDataOFFICIATING);

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.Where(r => r.FirstOrDefault().GeoStruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.FirstOrDefault().GeoStruct.Location.LocationObj.Id)
                                                            .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //   BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    //Narration = ca1.Name + "-" + ca.LocationIn,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }
                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT.ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.Where(r => r.GeoStruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.GeoStruct.Location.LocationObj.Id)
                                                            .Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //   BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    //Narration = ca1.Name + "-" + ca.LocationIn,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }


                                            }
                                            else
                                            {
                                                var OSalOFFICIATING = OSalaryT
                                                       .Select(e => e.Osal).ToList();
                                                var OGrpOFFICIATING = OSalOFFICIATING.GroupBy(t => t.Geostruct.Location.Id).Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                List<JVProcessData> OJVProcessDataOFFICIATING = OGrpOFFICIATING

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = e.location.LocationObj.LocCode,
                                                        BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "OFFEARN").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "OFFEARN").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "OFFEARN").FirstOrDefault().Name),
                                                    }).ToList();
                                                OJVProcessData.AddRange(OJVProcessDataOFFICIATING);

                                                if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                       .Select(e => e.Osal).ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.GroupBy(t => t.FirstOrDefault().GeoStruct.Location.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    // Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }
                                                //officiating
                                                if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                                {
                                                    var OSal2 = OOffSalaryT.ToList();
                                                    if (OSal2 != null)
                                                    {
                                                        var OGrpArr = OSal2.GroupBy(t => t.GeoStruct.Location.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                                        if (OGrpArr != null && OGrpArr.Count() > 0)
                                                        {
                                                            List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                                .Select(e => new JVProcessData
                                                                {
                                                                    BatchName = mBatchName,
                                                                    ProcessMonth = mPayMonth,
                                                                    ProcessDate = DateTime.Now.Date,
                                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                                    //BranchCode = e.location.LocationObj.LocCode,
                                                                    BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                                    AccountProductCode = ca.JVProductCode,
                                                                    AccountCustomerNo = "",
                                                                    AccountCode = ca.AccountNo,
                                                                    SubAccountCode = ca.SubAccountNo,
                                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                    TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                                    // Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                                }).ToList();

                                                            OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                        }
                                                    }
                                                }

                                            }
                                            break;

                                        case "NONREGULAR":
                                            if (ca.Irregular == true)
                                            {
                                                var OSal3 = OSalaryT
                                                .Select(e => e.Osal).ToList();
                                                var OGrp1 = OSal3.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                if (OGrp1 != null && OGrp1.Count() > 0)
                                                {
                                                    List<JVProcessData> OJVProcessDataNonRegular = OGrp1

                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //  BranchCode = e.location.LocationObj.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                            TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Name + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNonRegular);

                                                }
                                            }
                                            else
                                            {


                                                var OSal3 = OSalaryT
                                                       .Select(e => e.Osal).ToList();
                                                var OGrp1 = OSal3.GroupBy(t => t.Geostruct.Location.Id).Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                                if (OGrp1 != null && OGrp1.Count() > 0)
                                                {
                                                    List<JVProcessData> OJVProcessDataNonRegular = OGrp1

                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //BranchCode = e.location.LocationObj.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                            TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Name + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNonRegular);

                                                }
                                            }
                                            break;
                                        case "EPF":
                                            if (ca.Irregular == true)
                                            {

                                                var OSalaryT1 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSal4 = OSalaryT1
                                                       .Select(e => e.Osal).ToList();
                                                var OEPF = OSal4.Where(e => e.PFECRR != null).Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() }).ToList();

                                                var SalArrT = db.SalaryArrearT.Include(e => e.SalaryArrearPaymentT)
                                                    .Include(e => e.SalaryArrearPaymentT.Select(r => r.SalaryHead))
                                                    .Include(e => e.GeoStruct)
                                                   .Include(e => e.GeoStruct.Location).Include(e => e.GeoStruct.Location.LocationObj)
                                                   .Where(e => e.PayMonth == mPayMonth && e.GeoStruct.Location.LocationObj.LocCode ==
                                                  ca.LocationIn).ToList();
                                                var SalAttPayT = SalArrT.Select(r => r.SalaryArrearPaymentT.Where(t => t.SalaryHead.Code == "VPF")).ToList();
                                                var amt = SalAttPayT.Sum(t => t.Sum(y => y.SalHeadAmount));

                                                if (OEPF != null && OEPF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEPF = OEPF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            // BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (Convert.ToDouble((e.SalDetails.Sum(r => r.EE_Share) + e.SalDetails.Sum(r => r.Arrear_EE_Share) + e.SalDetails.Sum(r => r.Officiating_EE_Share))) - (amt)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEPF);
                                                }
                                            }
                                            else
                                            {


                                                var OSalaryT1 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSal4 = OSalaryT1
                                                       .Select(e => e.Osal).ToList();
                                                var OEPF = OSal4.Where(e => e.PFECRR != null).GroupBy(e => e.Geostruct.Location.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() }).ToList();

                                                var SalArrT = db.SalaryArrearT.Include(e => e.SalaryArrearPaymentT).Include(e => e.SalaryArrearPaymentT.Select(r => r.SalaryHead))
                                                   .Include(e => e.GeoStruct).Include(e => e.GeoStruct.Location).Include(e => e.GeoStruct.Location.LocationObj)
                                                  .Where(e => e.PayMonth == mPayMonth && e.GeoStruct.Location.LocationObj.LocCode == ca.LocationIn).ToList();

                                                var SalAttPayT = SalArrT.Select(r => r.SalaryArrearPaymentT.Where(t => t.SalaryHead.Code == "VPF")).ToList();
                                                var amt = SalAttPayT.Sum(t => t.Sum(y => y.SalHeadAmount));

                                                if (OEPF != null && OEPF.Count() > 0) //Changes for Null
                                                {


                                                    List<JVProcessData> OJVProcessDataEPF = OEPF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.EE_Share) + e.SalDetails.Sum(r => r.Arrear_EE_Share) + e.SalDetails.Sum(r => r.Officiating_EE_Share)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEPF);
                                                }
                                            }
                                            break;
                                        case "ADMINPF":

                                            foreach (var pfMaster in OCompPFMaster)
                                            {
                                                Admincharge = pfMaster.EPFAdminCharges;

                                                if (ca.Irregular == true)
                                                {
                                                    var OSalaryADMINPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                    var OSalADMINPF = OSalaryADMINPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                           .Select(e => e.Osal).ToList();
                                                    var OADMINPF = OSalADMINPF.Where(e => e.PFECRR != null).Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                        .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                        .ToList();
                                                    var loc = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault();
                                                    var fdf = "";
                                                    if (loc != null)
                                                    {
                                                        fdf = loc.LocationObj.LocCode;
                                                    }
                                                    if (OADMINPF != null && OADMINPF.Count() > 0) //Changes for Null
                                                    {
                                                        List<JVProcessData> OJVProcessDataADMINPF = OADMINPF
                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //   BranchCode = e.location.LocCode,
                                                                BranchCode = fdf,

                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages) + e.SalDetails.Sum(r => r.Officiating_EPF_Wages)) * Admincharge / 100, 0)).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                //Narration = ca1.Code + "-" + ca.LocationIn,
                                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataADMINPF);
                                                    }
                                                }
                                                else
                                                {
                                                    var OSalaryADMINPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                    var OSalADMINPF = OSalaryADMINPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                           .Select(e => e.Osal).ToList();
                                                    var OADMINPF = OSalADMINPF.Where(e => e.PFECRR != null).GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                        .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                        .ToList();

                                                    if (OADMINPF != null && OADMINPF.Count() > 0) //Changes for Null
                                                    {
                                                        List<JVProcessData> OJVProcessDataADMINPF = OADMINPF
                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //BranchCode = e.location.LocCode,
                                                                BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages) + e.SalDetails.Sum(r => r.Officiating_EPF_Wages)) * Admincharge / 100, 0)).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                // Narration = ca1.Code + "-" + db.Location.Where(a => a.LocationObj.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataADMINPF);
                                                    }
                                                }
                                            }
                                            break;
                                        case "INSPPF":

                                            foreach (var pfMaster in OCompPFMaster)
                                            {
                                                Inspcharge = pfMaster.EPFInspCharges;
                                                if (ca.Irregular == true)
                                                {
                                                    var OSalaryINSPPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                    var OSalINSPPF = OSalaryINSPPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                           .Select(e => e.Osal).ToList();
                                                    var OINSPPF = OSalINSPPF.Where(e => e.PFECRR != null).Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                        .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                        .ToList();
                                                    var loc = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault();
                                                    var fdf = "";
                                                    if (loc != null)
                                                    {
                                                        fdf = loc.LocationObj.LocCode;
                                                    }
                                                    if (OINSPPF != null && OINSPPF.Count() > 0) //Changes for Null
                                                    {
                                                        List<JVProcessData> OJVProcessDataINSPPF = OINSPPF
                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //   BranchCode = e.location.LocCode,
                                                                BranchCode = fdf,

                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages) + e.SalDetails.Sum(r => r.Officiating_EPF_Wages)) * Inspcharge / 100, 0)).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                //Narration = ca1.Code + "-" + ca.LocationIn,
                                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataINSPPF);
                                                    }
                                                }
                                                else
                                                {
                                                    var OSalaryINSPPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                    var OSalINSPPF = OSalaryINSPPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                           .Select(e => e.Osal).ToList();
                                                    var OINSPPF = OSalINSPPF.Where(e => e.PFECRR != null).GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                        .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                        .ToList();

                                                    if (OINSPPF != null && OINSPPF.Count() > 0) //Changes for Null
                                                    {
                                                        List<JVProcessData> OJVProcessDataINSPPF = OINSPPF
                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //BranchCode = e.location.LocCode,
                                                                BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages) + e.SalDetails.Sum(r => r.Officiating_EPF_Wages)) * Inspcharge / 100, 0)).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                //Narration = ca1.Code + "-" + db.Location.Where(a => a.LocationObj.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").SingleOrDefault(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataINSPPF);
                                                    }
                                                }
                                            }
                                            break;
                                        case "CPF":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalaryT2 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSal5 = OSalaryT2
                                                       .Select(e => e.Osal).ToList();
                                                var OCPF = OSal5.Where(e => e.PFECRR != null).Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                    .ToList();
                                                var loc = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault();
                                                var fdf = "";
                                                if (loc != null)
                                                {
                                                    fdf = loc.LocationObj.LocCode;
                                                }
                                                if (OCPF != null && OCPF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataCPF = OCPF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //   BranchCode = e.location.LocCode,
                                                            BranchCode = fdf,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.ER_Share) + e.SalDetails.Sum(r => r.Arrear_ER_Share) + e.SalDetails.Sum(r => r.Officiating_ER_Share)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //  Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataCPF);
                                                }
                                            }
                                            else
                                            {
                                                var OSalaryT2 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSal5 = OSalaryT2
                                                       .Select(e => e.Osal).ToList();
                                                var OCPF = OSal5.Where(e => e.PFECRR != null).GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                    .ToList();

                                                if (OCPF != null && OCPF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataCPF = OCPF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.ER_Share) + e.SalDetails.Sum(r => r.Arrear_ER_Share) + e.SalDetails.Sum(r => r.Officiating_ER_Share)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + db.Location.Where(a => a.LocationObj.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.LocationObj_Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataCPF);
                                                }
                                            }
                                            break;
                                        case "PENSION":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalaryT3 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSal6 = OSalaryT3
                                                       .Select(e => e.Osal).ToList();

                                                var OEPS = OSal6.Where(e => e.PFECRR != null).Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                    .ToList();
                                                if (OEPS != null && OEPS.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEPS = OEPS
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //   BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.EPS_Share) + e.SalDetails.Sum(r => r.Arrear_EPS_Share) + e.SalDetails.Sum(r => r.Officiating_EPS_Share)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEPS);
                                                }
                                            }
                                            else
                                            {


                                                var OSalaryT3 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSal6 = OSalaryT3
                                                       .Select(e => e.Osal).ToList();

                                                var OEPS = OSal6.Where(e => e.PFECRR != null).GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PFECRR).ToList() })
                                                    .ToList();
                                                if (OEPS != null && OEPS.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEPS = OEPS
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            // BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.EPS_Share) + e.SalDetails.Sum(r => r.Arrear_EPS_Share) + e.SalDetails.Sum(r => r.Officiating_EPS_Share)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + db.Location.Where(a => a.LocationObj.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.LocationObj_Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEPS);
                                                }
                                            }
                                            break;

                                        case "LWF":
                                            if (ca.Irregular == true)
                                            {

                                                var OSalaryTEMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalEMPLWF = OSalaryTEMPLWF
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPEMPLWF = OSalEMPLWF.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.LWFTransT).ToList() })
                                                    .ToList();
                                                if (OEMPEMPLWF != null && OEMPEMPLWF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPLWF = OEMPEMPLWF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPLWF);
                                                }
                                            }
                                            else
                                            {
                                                var OSalaryTEMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalEMPLWF = OSalaryTEMPLWF.Where(e => e.Osal.LWFTransT != null)
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPEMPLWF = OSalEMPLWF.GroupBy(e => e.Geostruct.Location.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.LWFTransT).ToList() })
                                                    .ToList();
                                                if (OEMPEMPLWF != null && OEMPEMPLWF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPLWF = OEMPEMPLWF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPLWF);
                                                }
                                            }
                                            break;
                                        case "COMPLWF":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalaryTCOMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalCOMPLWF = OSalaryTCOMPLWF
                                                       .Select(e => e.Osal).Where(e => e.LWFTransT != null).ToList();
                                                var OCOMPLWF = OSalCOMPLWF.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                     .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.LWFTransT).ToList() })
                                                    .ToList();
                                                if (OCOMPLWF != null && OCOMPLWF.Count() > 0) //Changes for Null
                                                {

                                                    List<JVProcessData> OJVProcessDataCOMPLWF = OCOMPLWF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            // BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataCOMPLWF);
                                                }
                                            }
                                            else
                                            {


                                                var OSalaryTCOMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalCOMPLWF = OSalaryTCOMPLWF
                                                       .Select(e => e.Osal).Where(e => e.LWFTransT != null).ToList();
                                                var OCOMPLWF = OSalCOMPLWF.GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                     .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.LWFTransT).ToList() })
                                                    .ToList();



                                                if (OCOMPLWF != null && OCOMPLWF.Count() > 0) //Changes for Null
                                                {

                                                    List<JVProcessData> OJVProcessDataCOMPLWF = OCOMPLWF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj_Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.LocationObj_Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataCOMPLWF);
                                                }
                                            }
                                            break;
                                        case "COMPESIC":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalaryTCOMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalCOMPESIS = OSalaryTCOMPESIS
                                                       .Select(e => e.Osal).ToList();
                                                var OCOMPESIS = OSalCOMPESIS.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                     .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.ESICTransT).ToList() })
                                                    .ToList();

                                                if (OCOMPESIS != null && OCOMPESIS.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataCOMPESIS = OCOMPESIS
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //   BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataCOMPESIS);
                                                }
                                            }
                                            else
                                            {


                                                var OSalaryTCOMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalCOMPESIS = OSalaryTCOMPESIS
                                                       .Select(e => e.Osal).ToList();
                                                var OCOMPESIS = OSalCOMPESIS.GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                     .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.ESICTransT).ToList() })
                                                    .ToList();

                                                if (OCOMPESIS != null && OCOMPESIS.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataCOMPESIS = OCOMPESIS
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataCOMPESIS);
                                                }
                                            }
                                            break;
                                        case "ESIC":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalaryTEMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalCOMPEMPESIS = OSalaryTEMPESIS
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPESIS = OSalCOMPEMPESIS.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Where(r => r.ESICTransT != null).Select(r => r.ESICTransT).ToList() })
                                                    .ToList();

                                                if (OEMPESIS != null && OEMPESIS.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPESIS = OEMPESIS
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //       BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //  Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPESIS);
                                                }
                                            }
                                            else
                                            {


                                                var OSalaryTEMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalCOMPEMPESIS = OSalaryTEMPESIS
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPESIS = OSalCOMPEMPESIS.GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.ESICTransT).ToList() })
                                                    .ToList();

                                                if (OEMPESIS != null && OEMPESIS.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPESIS = OEMPESIS
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPESIS);
                                                }
                                            }
                                            break;
                                        case "PTAX":
                                            if (ca.Irregular == true)
                                            {
                                                var OSalaryTPTAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalPTAX = OSalaryTPTAX.Where(e => e.Osal.PTaxTransT != null)
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPPTAX = OSalPTAX.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PTaxTransT).ToList() })
                                                    .ToList();
                                                if (OEMPPTAX != null && OEMPPTAX.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPPTAX = OEMPPTAX
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //     BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.PTAmount) + e.SalDetails.Sum(r => r.ArrearPTAmount)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPPTAX);
                                                }
                                            }
                                            else
                                            {
                                                var OSalaryTPTAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalPTAX = OSalaryTPTAX.Where(e => e.Osal.PTaxTransT != null)
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPPTAX = OSalPTAX.GroupBy(e => e.Geostruct.Location.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.PTaxTransT).ToList() })
                                                    .ToList();
                                                if (OEMPPTAX != null && OEMPPTAX.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPPTAX = OEMPPTAX
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //BranchCode = e.location.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (e.SalDetails.Sum(r => r.PTAmount) + e.SalDetails.Sum(r => r.ArrearPTAmount)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "-" + db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPPTAX);
                                                }
                                            }
                                            break;
                                        case "ITAX":
                                            if (ca.Irregular == true)
                                            {

                                                var OSalaryTITAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalITAX = OSalaryTITAX
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPITAX = OSalITAX.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(t => t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "ITAX")).ToList() })
                                                    .ToList();
                                                if (OEMPITAX != null && OEMPITAX.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPITAX = OEMPITAX
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //  BranchCode = e.location.LocationObj.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            // TransactionAmount = e.SalDetails.Sum(r => r.Amoount).ToString("0.00"),
                                                            TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPITAX);
                                                }
                                            }
                                            else
                                            {
                                                var OSalaryTITAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                                var OSalITAX = OSalaryTITAX
                                                       .Select(e => e.Osal).ToList();
                                                var OEMPITAX = OSalITAX.GroupBy(e => e.Geostruct.Location.Id)
                                                    .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(t => t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "ITAX")).ToList() })
                                                    .ToList();
                                                if (OEMPITAX != null && OEMPITAX.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataEMPITAX = OEMPITAX
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //BranchCode = e.location.LocationObj.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            // TransactionAmount = e.SalDetails.Sum(r => r.Amoount).ToString("0.00"),
                                                            TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataEMPITAX);
                                                }
                                            }
                                            break;
                                        // Location wise loan start
                                        case "LOAN":
                                            if (ca.Irregular == true)
                                            {
                                                var OSal3 = OSalaryT
                                              .Select(e => e.Osal).ToList();
                                                var OGrp1 = OSal3.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new
                                                    {
                                                        location = e.Key,
                                                        SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id
                                                            && d.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "LOAN"
                                                            )).ToList()
                                                    }).ToList();
                                                if (OGrp1 != null && OGrp1.Count() > 0)
                                                {
                                                    List<JVProcessData> OJVProcessDataNonRegular = OGrp1

                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //  BranchCode = e.location.LocationObj.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                            TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Name + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNonRegular);

                                                }
                                            }
                                            else
                                            {
                                                var OLoactionwiseLoan = OSalaryT
                                                       .Select(e => e.Osal).ToList();
                                                //  Utility.DumpProcessStatus(LineNo: 5501);
                                                var OEMPLoan = OLoactionwiseLoan.Where(e => e.SalEarnDedT != null && e.SalEarnDedT.Count() > 0)
                                                    .GroupBy(e => e.Geostruct.Location.Id).Select(e => new
                                                    {
                                                        location = e.Key,
                                                        SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(t =>
                                                            t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "LOAN" &&
                                                            t.SalaryHead.Id == ca1.Id)).ToList()
                                                    }).ToList();

                                                //  Utility.DumpProcessStatus(LineNo: 5511);

                                                if (OEMPLoan != null && OEMPLoan.Count() > 0) //Changes for Null
                                                {
                                                    //  Utility.DumpProcessStatus(LineNo: 5516);
                                                    List<JVProcessData> OJVProcessDataEMPLoan = OEMPLoan
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(da => Convert.ToDecimal(da.Amount)).ToString("0.00"),
                                                            //TransactionAmount = Amt.ToString("0.00"),
                                                            // TransactionAmount = e.SalDetails.Count() > 0 ? e.SalDetails.Sum(a => Convert.ToDecimal(a.Amount)).ToString("0.00") : "0.00",
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                        }).ToList();
                                                    //  Utility.DumpProcessStatus(LineNo: 5531);

                                                    OJVProcessData.AddRange(OJVProcessDataEMPLoan);
                                                }
                                            }
                                            break;

                                        // Location wise loan end
                                        case "INSURANCE":
                                            if (ca.Irregular == true)
                                            {
                                                var OSal3 = OSalaryT
                                              .Select(e => e.Osal).ToList();
                                                var OGrp1 = OSal3.Where(r => r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn).GroupBy(a => a.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new
                                                    {
                                                        location = e.Key,
                                                        SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id
                                                            && d.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "INSURANCE"
                                                            )).ToList()
                                                    }).ToList();
                                                if (OGrp1 != null && OGrp1.Count() > 0)
                                                {
                                                    List<JVProcessData> OJVProcessDataNonRegular = OGrp1

                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //  BranchCode = e.location.LocationObj.LocCode,
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == ca.LocationOut).SingleOrDefault().LocationObj.LocCode,

                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                            TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Name + "-" + ca.LocationIn,
                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.LocationIn, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataNonRegular);

                                                }
                                            }
                                            else
                                            {
                                                var OSalInsurance = OSalaryT
                                                       .Select(e => e.Osal).ToList();
                                                //  Utility.DumpProcessStatus(LineNo: 5501);
                                                var OEMPInsurance = OSalInsurance.Where(e => e.SalEarnDedT != null && e.SalEarnDedT.Count() > 0)
                                                    .GroupBy(e => e.Geostruct.Location.Id).Select(e => new
                                                    {
                                                        location = e.Key,
                                                        SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(t =>
                                                            t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "INSURANCE" &&
                                                            t.SalaryHead.Id == ca1.Id)).ToList()
                                                    }).ToList();

                                                Utility.DumpProcessStatus(LineNo: 5511);

                                                if (OEMPInsurance != null && OEMPInsurance.Count() > 0) //Changes for Null
                                                {
                                                    Utility.DumpProcessStatus(LineNo: 5516);
                                                    List<JVProcessData> OJVProcessDataEMPInsurance = OEMPInsurance
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = e.SalDetails.Sum(da => Convert.ToDecimal(da.Amount)).ToString("0.00"),
                                                            //TransactionAmount = Amt.ToString("0.00"),
                                                            // TransactionAmount = e.SalDetails.Count() > 0 ? e.SalDetails.Sum(a => Convert.ToDecimal(a.Amount)).ToString("0.00") : "0.00",
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-" + db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                        }).ToList();
                                                    Utility.DumpProcessStatus(LineNo: 5531);

                                                    OJVProcessData.AddRange(OJVProcessDataEMPInsurance);
                                                }
                                            }
                                            break;
                                        default:

                                            break;
                                    }

                                }

                            }
                            //locationwise grouping end

                        }
                        #endregion
                        //Paymentbank JV Start
                        #region PaymentBank
                        if (ca.JVGroup.LookupVal.ToUpper() == "PAYMENTBANK")
                        {
                            //var paybank = db.Bank.ToList();
                            //jobposition wise grouping 

                            if (ca.JobPosition != null)
                            {
                                foreach (var ca1 in ca.SalaryHead)
                                {
                                    switch (ca1.SalHeadOperationType.LookupVal.ToUpper())
                                    {

                                        case "GROSS":

                                            if (OSalaryT != null && OSalaryT.Count() > 0)
                                            {
                                                var OSal = OSalaryT
                                                     .Select(e => new
                                                     {
                                                         OSal = e.Osal,
                                                         PaymentBankCode = e.PaymentBankCode
                                                     }).ToList();

                                                List<JVProcessData> OJVProcessDataNet = OSal
                                                .Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id && r.PaymentBankCode == ca.PaymentBank.Code)
                                                .GroupBy(a => new { PaymentBank = a.PaymentBankCode, FuncStruct_Id = a.OSal.FuncStruct.JobPosition.Id })
                                                    //.GroupBy(t => t.Geostruct.Location)

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,//db.Location.Where(a => a.Id == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = e.Sum(r => r.OSal.TotalEarning).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = "Gross :" + "-" + ca.CreditDebitBranchCode,// db.Location.Where(a => a.Id == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").SingleOrDefault(),
                                                    DistributedCode = ca.CreditDebitBranchCode,
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Name),
                                                }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);


                                            }
                                            //Emp_Monthsal;
                                            break;
                                        case "REGULAR":


                                            var OSal1 = OSalaryT
                                                    .Select(e => new
                                                    {
                                                        OSal = e.Osal,
                                                        PaymentBank = e.PaymentBankCode
                                                    }).ToList();

                                            var OGrp = OSal1
                                                .Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                //.GroupBy(a => new { Loc_Id = a.Geostruct.Location.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                .GroupBy(a => new { PaymentBank = a.PaymentBank, Func_Id = a.OSal.FuncStruct.JobPosition.Id })
                                                .Select(e => new
                                                {
                                                    PaymentBank = e.Key,
                                                    SalDetails = e.Select(r => r.OSal.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList()
                                                }).ToList();
                                            List<JVProcessData> OJVProcessDataRegular = OGrp

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,//db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    //  Narration = ca1.Name + " Salary for Month :" + mPayMonth + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,
                                                    // Narration = ca1.Name + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                    DistributedCode = e.PaymentBank.PaymentBank,
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),

                                                }).ToList();
                                            OJVProcessData.AddRange(OJVProcessDataRegular);

                                            if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                            {
                                                var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                    .Select(e => new
                                                    {
                                                        OSal = e.Osal,
                                                        PaymentBank = e.PaymentBankCode
                                                    })
                                                   .Where(r => r.OSal.FirstOrDefault().FuncStruct.JobPosition.Id == ca.JobPosition.Id).ToList();
                                                var OGrpArr = OSal2.GroupBy(a => new { PaymentBank = a.PaymentBank, Func_Id = a.OSal.FirstOrDefault().FuncStruct.JobPosition.Id })
                                                    .Select(e => new { PaymentBank = e.Key, SalDetails = e.SelectMany(r => r.OSal.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                if (OGrpArr != null && OGrpArr.Count() > 0)
                                                {
                                                    List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                            TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Name + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,

                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                            DistributedCode = e.PaymentBank.PaymentBank,
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                }
                                            }


                                            break;
                                        case "BASIC":


                                            var OSalBASIC = OSalaryT
                                                    .Select(e => new
                                                    {
                                                        OSal = e.Osal,
                                                        PaymentBank = e.PaymentBankCode
                                                    }).ToList();
                                            var OGrpBASIC = OSalBASIC
                                                .Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                //.GroupBy(a => new { Loc_Id = a.Geostruct.Location.Id, Func_Id = a.FuncStruct.JobPosition.Id })
                                                .GroupBy(a => new { PayBankCode = a.PaymentBank, Func_Id = a.OSal.FuncStruct.JobPosition.Id })
                                                .Select(e => new { PaymentBank = e.Key, SalDetails = e.Select(r => r.OSal.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                            foreach (var ca10 in OGrpBASIC)
                                            {
                                                JVProcessData OJVProcessDataBASIC = new JVProcessData()
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = db.Bank.Where(r => r.Code == ca10.PaymentBank.PayBankCode).SingleOrDefault().Code,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = ca10.SalDetails.Select(a => a.Sum(d => d.Amount)).FirstOrDefault().ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    //  Narration = ca1.Name + "-Org_Br_" + db.Bank.Where(r => r.Code == ca10.PaymentBank.PayBankCode).SingleOrDefault().Code,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").SingleOrDefault(),
                                                    DistributedCode = ca10.PaymentBank.PayBankCode,
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == ca10.PaymentBank.PayBankCode).FirstOrDefault().Code, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").FirstOrDefault().Name),
                                                };
                                                OJVProcessData.Add(OJVProcessDataBASIC);
                                            }

                                            if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                            {
                                                var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                    .Select(e => new
                                                    {
                                                        OSal = e.Osal,
                                                        PaymentBank = e.PaymentBankCode
                                                    }).ToList();
                                                if (OSal2 != null)
                                                {

                                                    var OGrpArr = OSal2.Where(r => r.OSal.FirstOrDefault().FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(t => new
                                                    {
                                                        PayBankCode = t.PaymentBank,
                                                        Func_Id = t.OSal.FirstOrDefault().FuncStruct.JobPosition.Id
                                                    })
                                                        .Select(e => new { PaymentBank = e.Key, SalDetails = e.SelectMany(r => r.OSal.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                    if (OGrpArr != null && OGrpArr.Count() > 0)
                                                    {
                                                        List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PayBankCode).SingleOrDefault().Code, //db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                //Narration = ca1.Name + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PayBankCode).SingleOrDefault().Code,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                DistributedCode = e.PaymentBank.PayBankCode,
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PayBankCode).FirstOrDefault().Code, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                    }
                                                }
                                            }

                                            break;
                                        case "VDA":


                                            var OSalVDA = OSalaryT
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBank = e.PaymentBankCode
                                                   }).ToList();
                                            var OGrpVDA = OSalVDA.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                .GroupBy(t => new { PaymentBank = t.PaymentBank, Func_Id = t.OSal.FuncStruct.JobPosition.Id })
                                                .Select(e => new { PaymentBank = e.Key, SalDetails = e.Select(r => r.OSal.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                            List<JVProcessData> OJVProcessDataVDA = OGrpVDA

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    //Narration = ca1.Name + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                    DistributedCode = e.PaymentBank.PaymentBank,
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                }).ToList();
                                            OJVProcessData.AddRange(OJVProcessDataVDA);

                                            if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                            {
                                                var OSal2 = OArrSalaryT.Where(e => e.Osal != null)
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBank = e.PaymentBankCode
                                                   }).ToList();
                                                if (OSal2 != null)
                                                {
                                                    var OGrpArr = OSal2.Where(r => r.OSal.FirstOrDefault().FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                        .GroupBy(t => new { PaymentBank = t.PaymentBank, Func_Id = t.OSal.FirstOrDefault().FuncStruct.JobPosition.Id })
                                                        .Select(e => new { PaymentBank = e.Key, SalDetails = e.SelectMany(r => r.OSal.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                    if (OGrpArr != null && OGrpArr.Count() > 0)
                                                    {
                                                        List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                //Narration = ca1.Name + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                DistributedCode = e.PaymentBank.PaymentBank,
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                    }
                                                }
                                            }

                                            break;

                                        case "NONREGULAR":



                                            var OSal3 = OSalaryT
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBank = e.PaymentBankCode
                                                   }).ToList();
                                            var OGrp1 = OSal3.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(t => new
                                            {
                                                PayBankCode = t.PaymentBank,
                                                Func_Id = t.OSal.FuncStruct.JobPosition.Id
                                            }).Select(e => new { PaymentBank = e.Key, SalDetails = e.Select(r => r.OSal.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                            if (OGrp1 != null && OGrp1.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataNonRegular = OGrp1

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PayBankCode).SingleOrDefault().Code,//db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //  Narration = ca1.Name + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PayBankCode).SingleOrDefault().Code,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        DistributedCode = e.PaymentBank.PayBankCode,
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PayBankCode).FirstOrDefault().Code, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNonRegular);

                                            }

                                            break;
                                        case "EPF":



                                            var OSalaryT1 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSal4 = OSalaryT1
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBank = e.PaymentBankCode
                                                   }).ToList();
                                            var OEPF = OSal4.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new { PaymentBank = e.PaymentBank, Func_Id = e.OSal.FuncStruct.JobPosition.Id })
                                                .Select(e => new { PaymentBank = e.Key, SalDetails = e.Select(r => r.OSal.PFECRR).ToList() }).ToList();

                                            var SalArrT = db.SalaryArrearT.Include(e => e.SalaryArrearPaymentT)
                                               .Include(e => e.SalaryArrearPaymentT.Select(r => r.SalaryHead))
                                               .Include(e => e.GeoStruct)
                                              .Include(e => e.GeoStruct.Location).Include(e => e.GeoStruct.Location.LocationObj)
                                              .Include(e => e.FuncStruct).Include(e => e.FuncStruct.JobPosition)
                                              .Where(e => e.PayMonth == mPayMonth && e.FuncStruct.JobPosition.Id == ca.JobPosition.Id).ToList();
                                            var SalAttPayT = SalArrT.Select(r => r.SalaryArrearPaymentT.Where(t => t.SalaryHead.Code == "VPF")).ToList();
                                            var amt = SalAttPayT.Sum(t => t.Sum(y => y.SalHeadAmount));

                                            if (OEPF != null && OEPF.Count() > 0) //Changes for Null
                                            {


                                                List<JVProcessData> OJVProcessDataEPF = OEPF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = ((e.SalDetails.Sum(r => r.EE_Share) + e.SalDetails.Sum(r => r.Arrear_EE_Share)) - amt).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBank.PaymentBank,
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataEPF);
                                            }

                                            break;
                                        case "ADMINPF":
                                            foreach (var pfMaster in OCompPFMaster)
                                            {
                                                Admincharge = pfMaster.EPFAdminCharges;

                                                var OSalaryADMINPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                                var OSalADMINPF = OSalaryADMINPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                       .Select(e => new
                                                       {
                                                           OSal = e.Osal,
                                                           PaymentBank = e.PaymentBankCode
                                                       }).ToList();
                                                var OADMINPF = OSalADMINPF.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new
                                                {
                                                    PaymentBank = e.PaymentBank,
                                                    Func_Id = e.OSal.FuncStruct.JobPosition.Id
                                                })
                                                    .Select(e => new { PayBankCode = e.Key, SalDetails = e.Select(r => r.OSal.PFECRR).ToList() })
                                                    .ToList();

                                                if (OADMINPF != null && OADMINPF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataADMINPF = OADMINPF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Bank.Where(r => r.Code == e.PayBankCode.PaymentBank).SingleOrDefault().Code,//db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages)) * Admincharge / 100, 0)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PayBankCode.PaymentBank).SingleOrDefault().Code,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").SingleOrDefault(),
                                                            DistributedCode = e.PayBankCode.PaymentBank,
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PayBankCode.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataADMINPF);
                                                }
                                            }
                                            break;
                                        case "INSPPF":


                                            foreach (var pfMaster in OCompPFMaster)
                                            {
                                                Inspcharge = pfMaster.EPFInspCharges;
                                                var OSalaryINSPPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                                var OSalINSPPF = OSalaryINSPPF
    .Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                       .Select(e => new
                                                       {
                                                           OSal = e.Osal,
                                                           PaymentBank = e.PaymentBankCode
                                                       }).ToList();
                                                var OINSPPF = OSalINSPPF.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new
                                                {
                                                    PaymentBank = e.PaymentBank,
                                                    Func_Id = e.OSal.FuncStruct.JobPosition.Id
                                                })
                                                    .Select(e => new { PaymentBank = e.Key, SalDetails = e.Select(r => r.OSal.PFECRR).ToList() })
                                                    .ToList();

                                                if (OINSPPF != null && OINSPPF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataINSPPF = OINSPPF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code, //db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages)) * Inspcharge / 100, 0)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").SingleOrDefault(),
                                                            DistributedCode = e.PaymentBank.PaymentBank,
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataINSPPF);
                                                }
                                            }

                                            break;
                                        case "CPF":


                                            var OSalaryT2 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSal5 = OSalaryT2
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBank = e.PaymentBankCode
                                                   }).ToList();
                                            var OCPF = OSal5.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id).GroupBy(e => new
                                            {
                                                PaymentBank = e.PaymentBank,
                                                Func_Id = e.OSal.FuncStruct.JobPosition.Id
                                            })
                                                .Select(e => new { PaymentBank = e.Key, SalDetails = e.Select(r => r.OSal.PFECRR).ToList() })
                                                .ToList();

                                            if (OCPF != null && OCPF.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataCPF = OCPF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code, //db.Location.Include(r => r.LocationObj).Where(r => r.Id == e.location.Loc_Id).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (e.SalDetails.Sum(r => r.ER_Share) + e.SalDetails.Sum(r => r.Arrear_ER_Share)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //  Narration = ca1.Code + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBank.PaymentBank,
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataCPF);
                                            }

                                            break;
                                        case "PENSION":



                                            var OSalaryT3 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBank = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSal6 = OSalaryT3
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBank = e.PaymentBank
                                                   }).ToList();

                                            var OEPS = OSal6.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                .GroupBy(e => new { PaymentBank = e.PaymentBank, Func_Id = e.OSal.FuncStruct.JobPosition.Id })
                                                .Select(e => new { PaymentBank = e.Key, SalDetails = e.Select(r => r.OSal.PFECRR).ToList() })
                                                .ToList();
                                            if (OEPS != null && OEPS.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataEPS = OEPS
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Bank.Where(r => r.Code == ca10.PaymentBank.PayBankCode).SingleOrDefault().Code//db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (e.SalDetails.Sum(r => r.EPS_Share) + e.SalDetails.Sum(r => r.Arrear_EPS_Share)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBank.PaymentBank,
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataEPS);
                                            }

                                            break;

                                        case "LWF":


                                            var OSalaryTEMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSalEMPLWF = OSalaryTEMPLWF
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBank = e.PaymentBankCode
                                                   }).ToList();
                                            var OEMPEMPLWF = OSalEMPLWF.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                .GroupBy(e => new { PaymentBank = e.PaymentBank, Func_Id = e.OSal.FuncStruct.JobPosition.Id })
                                                .Select(e => new { PaymentBank = e.Key, SalDetails = e.Select(r => r.OSal.LWFTransT).ToList() })
                                                .ToList();
                                            if (OEMPEMPLWF != null && OEMPEMPLWF.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataEMPLWF = OEMPEMPLWF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,// db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBank.PaymentBank,
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataEMPLWF);
                                            }

                                            break;
                                        case "COMPLWF":



                                            var OSalaryTCOMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBank = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSalCOMPLWF = OSalaryTCOMPLWF
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBank = e.PaymentBank
                                                   }).ToList();
                                            var OCOMPLWF = OSalCOMPLWF.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                .GroupBy(e => new { PaymentBank = e.PaymentBank, Func_Id = e.OSal.FuncStruct.JobPosition.Id })
                                                 .Select(e => new { PaymentBank = e.Key, SalDetails = e.Select(r => r.OSal.LWFTransT).ToList() })
                                                .ToList();
                                            if (OCOMPLWF != null && OCOMPLWF.Count() > 0) //Changes for Null
                                            {

                                                List<JVProcessData> OJVProcessDataCOMPLWF = OCOMPLWF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBank.PaymentBank,
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataCOMPLWF);
                                            }

                                            break;
                                        case "COMPESIC":



                                            var OSalaryTCOMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSalCOMPESIS = OSalaryTCOMPESIS
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBank = e.PaymentBankCode
                                                   }).ToList();
                                            var OCOMPESIS = OSalCOMPESIS.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                .GroupBy(e => new { PaymentBank = e.PaymentBank, Func_Id = e.OSal.FuncStruct.JobPosition.Id })
                                                 .Select(e => new { PaymentBank = e.Key, SalDetails = e.Select(r => r.OSal.ESICTransT).ToList() })
                                                .ToList();

                                            if (OCOMPESIS != null && OCOMPESIS.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataCOMPESIS = OCOMPESIS
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBank.PaymentBank,
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataCOMPESIS);
                                            }

                                            break;
                                        case "ESIC":



                                            var OSalaryTEMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBank = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSalCOMPEMPESIS = OSalaryTEMPESIS
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBank = e.PaymentBank
                                                   }).ToList();
                                            var OEMPESIS = OSalCOMPEMPESIS.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                .GroupBy(e => new { PaymentBank = e.PaymentBank, Func_Id = e.OSal.FuncStruct.JobPosition.Id })
                                                .Select(e => new { PaymentBank = e.Key, SalDetails = e.Where(r => r.OSal.ESICTransT != null).Select(r => r.OSal.ESICTransT).ToList() })
                                                .ToList();

                                            if (OEMPESIS != null && OEMPESIS.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataEMPESIS = OEMPESIS
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code, //db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //  Narration = ca1.Code + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBank.PaymentBank,
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataEMPESIS);
                                            }

                                            break;
                                        case "PTAX":


                                            var OSalaryTPTAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSalPTAX = OSalaryTPTAX
                                                  .Select(e => new
                                                  {
                                                      OSal = e.Osal,
                                                      PaymentBank = e.PaymentBankCode
                                                  }).ToList();
                                            var OEMPPTAX = OSalPTAX.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                .GroupBy(e => new { PaymentBank = e.PaymentBank, Func_Id = e.OSal.FuncStruct.JobPosition.Id })
                                                .Select(e => new { PaymentBank = e.Key, SalDetails = e.Select(r => r.OSal.PTaxTransT).ToList() })
                                                .ToList();
                                            if (OEMPPTAX != null && OEMPPTAX.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataEMPPTAX = OEMPPTAX
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (e.SalDetails.Sum(r => r.PTAmount) + e.SalDetails.Sum(r => r.ArrearPTAmount)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Code + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBank.ToString(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataEMPPTAX);
                                            }

                                            break;
                                        case "ITAX":




                                            var OSalaryTITAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSalITAX = OSalaryTITAX
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBank = e.PaymentBankCode
                                                   }).ToList();
                                            var OEMPITAX = OSalITAX.Where(r => r.OSal.IsHold == false && r.OSal.FuncStruct.JobPosition.Id == ca.JobPosition.Id)
                                                .GroupBy(e => new { PaymentBank = e.PaymentBank, Func_Id = e.OSal.FuncStruct.JobPosition.Id })
                                                .Select(e => new { PaymentBank = e.Key, SalDetails = e.Select(r => r.OSal.SalEarnDedT.Where(t => t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "ITAX")).ToList() })
                                                .ToList();
                                            if (OEMPITAX != null && OEMPITAX.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataEMPITAX = OEMPITAX
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        // TransactionAmount = e.SalDetails.Sum(r => r.Amoount).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Code + "-Org_Br_" + db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).SingleOrDefault().Code,//db.Location.Where(a => a.Id == e.location.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBank.PaymentBank,
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, db.Bank.Where(r => r.Code == e.PaymentBank.PaymentBank).FirstOrDefault().Code, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataEMPITAX);
                                            }

                                            break;
                                        default:

                                            break;
                                    }

                                }
                            }
                            //jobposition wise grouping end

                            //gradewise grouping
                            else if (ca.PayStruct != null)
                            {
                            }
                            //gradewise grouping end
                            //locationwise grouping
                            else if (ca.JobPosition == null && ca.PayStruct == null)
                            {
                                foreach (var ca1 in ca.SalaryHead)
                                {
                                    switch (ca1.SalHeadOperationType.LookupVal.ToUpper())
                                    {
                                        //  start
                                        case "BONUS":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {
                                                //var YearlyAllHeadamt = OYearlyT.SelectMany(e => e.Osal.Select(qa => qa)).ToList();
                                                //var YEarlydataFilterAmt = YearlyAllHeadamt.Where(e => e.SalaryHead.Id == ca1.Id).ToList();


                                                var Osal = OYearlyT.Select(e => new
                                                {
                                                    OSal = e.Osal,
                                                    PaymentBankCode = e.PaymentBankCode
                                                }).ToList();


                                                List<JVProcessData> OJVProcessDataNet = Osal
                                            .Where(r => r.PaymentBankCode == ca.PaymentBank.Code)
                                            .GroupBy(a => new { PaymentBank = a.PaymentBankCode })

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        // BranchCode = e.Key.LocationObj.LocCode,
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (e.SelectMany(a => a.OSal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                        // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString(),
                                                        //TransactionAmount = YEarlydataFilterAmt,
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = "Yearly Salary for Month :" + mPayMonth + "-Org_Br_" + ca.CreditDebitBranchCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").SingleOrDefault(),
                                                        DistributedCode = ca.PaymentBank.Code,
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);



                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }

                                            }
                                            //Yearly location wise;
                                            break;
                                        case "LVENCASH":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {


                                                var OSal = OYearlyT.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                        .Select(e => e.Osal).ToList();

                                                List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                    //.Where(r => r.IsHold == false
                                                    //        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                    //    )
                                                .GroupBy(a => new { PaymentBank = a.PaymentBankCode })

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    // BranchCode = e.Key.LocationObj.LocCode,
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                    // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = "Yearly Salary for Month :" + mPayMonth + "-Org_Br_" + ca.CreditDebitBranchCode,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").SingleOrDefault(),
                                                    DistributedCode = ca.PaymentBank.Code,
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").FirstOrDefault().Name),
                                                }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);


                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }
                                            }
                                            //Yearl
                                            break;
                                        case "LTA":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {


                                                var OSal = OYearlyT.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                        .Select(e => e.Osal).ToList();

                                                List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                    //.Where(r => r.IsHold == false
                                                    //        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                    //    )
                                                .GroupBy(a => new { PaymentBank = a.PaymentBankCode })

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    // BranchCode = e.Key.LocationObj.LocCode,
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                    // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = "Yearly Salary for Month :" + mPayMonth + "-Org_Br_" + ca.CreditDebitBranchCode,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").SingleOrDefault(),
                                                    DistributedCode = ca.PaymentBank.Code,
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").FirstOrDefault().Name),
                                                }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);

                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }
                                            }
                                            //Yearl
                                            break;

                                        case "MEDALLOW":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {


                                                var OSal = OYearlyT.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                        .Select(e => e.Osal).ToList();

                                                List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                    //.Where(r => r.IsHold == false
                                                    //        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                    //    )
                                                .GroupBy(a => new { PaymentBank = a.PaymentBankCode })

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    // BranchCode = e.Key.LocationObj.LocCode,
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                    //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = "Yearly Salary for Month :" + mPayMonth + "-Org_Br_" + ca.CreditDebitBranchCode,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").SingleOrDefault(),
                                                    DistributedCode = ca.PaymentBank.Code,
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").FirstOrDefault().Name),
                                                }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);

                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }
                                            }
                                            //Yearl
                                            break;
                                        case "LTC":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {


                                                var OSal = OYearlyT.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                        .Select(e => e.Osal).ToList();

                                                List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                    //.Where(r => r.IsHold == false
                                                    //        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                    //    )
                                                .GroupBy(a => new { PaymentBank = a.PaymentBankCode })

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    // BranchCode = e.Key.LocationObj.LocCode,
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                    TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    //Narration = "Yearly Salary for Month :" + mPayMonth + "-Org_Br_" + ca.CreditDebitBranchCode,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").SingleOrDefault(),
                                                    DistributedCode = ca.PaymentBank.Code,
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTAC").FirstOrDefault().Name),
                                                }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);


                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }
                                            }
                                            //Yearl
                                            break;
                                        case "GRATUITY":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {


                                                var OSal = OYearlyT.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                        .Select(e => e.Osal).ToList();

                                                List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                    //.Where(r => r.IsHold == false
                                                    //        // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                    //    )
                                                .GroupBy(a => new { PaymentBank = a.PaymentBankCode })

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    // BranchCode = e.Key.LocationObj.LocCode,
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    //  TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                    TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = "Yearly Salary for Month :" + mPayMonth + "-Org_Br_" + ca.CreditDebitBranchCode,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").SingleOrDefault(),
                                                    DistributedCode = ca.PaymentBank.Code,
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").FirstOrDefault().Name),
                                                }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);

                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }
                                            }
                                            //Yearl
                                            break;
                                        // End


                                        case "GROSS":
                                            //if Location

                                            if (OSalaryT != null && OSalaryT.Count() > 0)
                                            {


                                                var OSal = OSalaryT
                                                     .Select(e => new
                                                     {
                                                         OSal = e.Osal,
                                                         PaymentBankCode = e.PaymentBankCode
                                                     }).ToList();

                                                List<JVProcessData> OJVProcessDataNet = OSal
                                                .Where(r => r.OSal.IsHold == false && r.PaymentBankCode == ca.PaymentBank.Code)
                                                .GroupBy(a => new { PaymentBank = a.PaymentBankCode })
                                                    // && r.Geostruct.Location.LocationObj.LocCode == ca.LocationIn
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    // BranchCode = e.Key.LocationObj.LocCode,
                                                    BranchCode = ca.CreditDebitBranchCode,// db.Location.Where(a => a.Id == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                    // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = e.Sum(r => r.OSal.TotalEarning).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    //  Narration = "Gross" + "-Org_Br_" + ca.CreditDebitBranchCode, // db.Location.Where(a => a.Id == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").SingleOrDefault(),

                                                    DistributedCode = ca.PaymentBank.Code,
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Name),
                                                }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);

                                            }
                                            //Emp_Monthsal;
                                            break;
                                        case "REGULAR":
                                            if (OYearlyT != null && OYearlyT.Count() > 0)
                                            {
                                                //var YearlyAllHeadamt = OYearlyT.SelectMany(e => e.Osal.Select(qa => qa)).ToList();
                                                //var YEarlydataFilterAmt = YearlyAllHeadamt.Where(e => e.SalaryHead.Id == ca1.Id).ToList();

                                                var OSal = OYearlyT.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                          .Select(e => new
                                                          {
                                                              OSal = e.Osal,
                                                              PaymentBankCode = e.PaymentBankCode
                                                          }).ToList();

                                                List<JVProcessData> OJVProcessDataNet = OYearlyT
                                                .Where(r => r.PaymentBankCode == ca.PaymentBank.Code)
                                                .GroupBy(a => new { PaymentBank = a.PaymentBankCode })

                                                 .Select(e => new JVProcessData
                                                 {
                                                     BatchName = mBatchName,
                                                     ProcessMonth = mPayMonth,
                                                     ProcessDate = DateTime.Now.Date,
                                                     JVParameter = db.JVParameter.Find(ca.Id),
                                                     // BranchCode = e.Key.LocationObj.LocCode,
                                                     BranchCode = ca.CreditDebitBranchCode,// db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                     // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                     AccountProductCode = ca.JVProductCode,
                                                     AccountCustomerNo = "",
                                                     AccountCode = ca.AccountNo,
                                                     SubAccountCode = ca.SubAccountNo,
                                                     // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                     // TransactionAmount = YEarlydataFilterAmt.Count() > 0 ? YEarlydataFilterAmt.Sum(t => t.AmountPaid).ToString() : "0.00",
                                                     TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                     CreditDebitFlag = ca.CreditDebitFlag,
                                                     // Narration = "Yearly Salary for Month :" + mPayMonth + "-Org_Br_" + ca.CreditDebitBranchName,//db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                     SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).SingleOrDefault(),
                                                     DistributedCode = ca.PaymentBank.Code,
                                                     Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).FirstOrDefault().Name),
                                                 }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNet);


                                                var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyTdsdata);
                                                }
                                                var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (YearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(YearlyOTHDATA);
                                                }
                                                var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyTdsdata != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                                }
                                                var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                                if (CompanyYearlyOTHDATA != null)
                                                {
                                                    OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                                }

                                            }

                                            //yearly end			


                                            var OSal1 = OSalaryT.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                         .Select(e => new
                                                         {
                                                             OSal = e.Osal,
                                                             PaymentBankCode = e.PaymentBankCode
                                                         }).ToList();
                                            var OGrp = OSal1.GroupBy(a => new { PaymentBank = a.PaymentBankCode })
                                                    .Select(e => new
                                                    {
                                                        PaymentBankCode = e.Key,
                                                        SalDetails = e.Select(r => r.OSal.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList()
                                                    }).ToList();
                                            List<JVProcessData> OJVProcessDataRegular = OGrp

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    //BranchCode = e.location.LocationObj.LocCode,
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = ca1.Name + "-Org_Br_" + ca.CreditDebitBranchCode,//db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                    DistributedCode = e.PaymentBankCode.PaymentBank.ToString(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                }).ToList();
                                            OJVProcessData.AddRange(OJVProcessDataRegular);

                                            if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                            {
                                                var OSal2 = OArrSalaryT.Where(e => e.Osal != null && e.PaymentBankCode == ca.PaymentBank.Code)
                                                    .Select(e => new
                                                    {
                                                        OSal = e.Osal,
                                                        PaymentBankCode = e.PaymentBankCode
                                                    }).ToList();
                                                var OGrpArr = OSal2.GroupBy(t => t.PaymentBankCode)
                                                    .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.SelectMany(r => r.OSal.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                if (OGrpArr != null && OGrpArr.Count() > 0)
                                                {
                                                    List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //BranchCode = e.location.LocationObj.LocCode,
                                                            //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            BranchCode = ca.CreditDebitBranchCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                            TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Name + "-Org_Br_" + ca.CreditDebitBranchCode,//db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                            DistributedCode = e.PaymentBankCode.ToString(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                }
                                            }


                                            break;
                                        case "BASIC":


                                            var OSalBASIC = OSalaryT.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                       .Select(e => new
                                                       {
                                                           OSal = e.Osal,
                                                           PaymentBankCode = e.PaymentBankCode
                                                       }).ToList();
                                            var OGrpBASIC = OSalBASIC//.GroupBy(t => t.Geostruct.Location.Id)
                                                .GroupBy(t => t.PaymentBankCode)
                                                .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Select(r => r.OSal.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                            foreach (var ca10 in OGrpBASIC)
                                            {
                                                JVProcessData OJVProcessDataBASIC = new JVProcessData()
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    //BranchCode = ca10.location.LocationObj.LocCode,
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == ca10.location).SingleOrDefault().LocationObj.LocCode,
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = ca10.SalDetails.Select(a => a.Sum(d => d.Amount)).FirstOrDefault().ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = ca1.Name + "-Org_Br_" + ca.CreditDebitBranchCode, //db.Location.Where(a => a.Id == ca10.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                    DistributedCode = ca10.PaymentBankCode.ToString(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                };
                                                OJVProcessData.Add(OJVProcessDataBASIC);
                                            }

                                            if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                            {
                                                var OSal2 = OArrSalaryT.Where(e => e.Osal != null && e.PaymentBankCode == ca.PaymentBank.Code)
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBankCode = e.PaymentBankCode
                                                   }).ToList();
                                                if (OSal2 != null)
                                                {

                                                    var OGrpArr = OSal2.GroupBy(t => t.PaymentBankCode)//.GroupBy(t => t.FirstOrDefault().GeoStruct.Location.Id)
                                                    .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.SelectMany(r => r.OSal.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                    if (OGrpArr != null && OGrpArr.Count() > 0)
                                                    {
                                                        List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //BranchCode = e.location.LocationObj.LocCode,
                                                                //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                                BranchCode = ca.CreditDebitBranchCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                // Narration = ca1.Name + "-Org_Br_" + ca.CreditDebitBranchCode,//db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                DistributedCode = e.PaymentBankCode.ToString(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                    }
                                                }
                                            }

                                            break;
                                        case "VDA":


                                            var OSalVDA = OSalaryT.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                        .Select(e => new
                                                        {
                                                            OSal = e.Osal,
                                                            PaymentBankCode = e.PaymentBankCode
                                                        }).ToList();
                                            var OGrpVDA = OSalVDA.GroupBy(t => t.PaymentBankCode)//.GroupBy(t => t.Geostruct.Location.Id)
                                                .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Select(r => r.OSal.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                            List<JVProcessData> OJVProcessDataVDA = OGrpVDA

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    //BranchCode = e.location.LocationObj.LocCode,
                                                    //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                    //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    //Narration = ca1.Name + "-Org_Br_" + ca.CreditDebitBranchCode, //db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "VDA").SingleOrDefault(),
                                                    DistributedCode = e.PaymentBankCode.ToString(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "VDA").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "VDA").FirstOrDefault().Name),
                                                }).ToList();
                                            OJVProcessData.AddRange(OJVProcessDataVDA);

                                            if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                            {
                                                var OSal2 = OArrSalaryT.Where(e => e.Osal != null && e.PaymentBankCode == ca.PaymentBank.Code)
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBankCode = e.PaymentBankCode
                                                   }).ToList();
                                                if (OSal2 != null)
                                                {
                                                    var OGrpArr = OSal2.GroupBy(t => t.PaymentBankCode)//.GroupBy(t => t.FirstOrDefault().GeoStruct.Location.Id)
                                                    .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.SelectMany(r => r.OSal.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                                    if (OGrpArr != null && OGrpArr.Count() > 0)
                                                    {
                                                        List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                            .Select(e => new JVProcessData
                                                            {
                                                                BatchName = mBatchName,
                                                                ProcessMonth = mPayMonth,
                                                                ProcessDate = DateTime.Now.Date,
                                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                                //BranchCode = e.location.LocationObj.LocCode,
                                                                //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                                BranchCode = ca.CreditDebitBranchCode,
                                                                AccountProductCode = ca.JVProductCode,
                                                                AccountCustomerNo = "",
                                                                AccountCode = ca.AccountNo,
                                                                SubAccountCode = ca.SubAccountNo,
                                                                //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                                TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                                // Narration = ca1.Name + "-Org_Br_" + ca.CreditDebitBranchCode,//db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                                DistributedCode = e.PaymentBankCode.ToString(),
                                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                            }).ToList();

                                                        OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                                    }
                                                }
                                            }

                                            break;

                                        case "NONREGULAR":




                                            var OSal3 = OSalaryT.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                      .Select(e => new
                                                      {
                                                          OSal = e.Osal,
                                                          PaymentBankCode = e.PaymentBankCode
                                                      }).ToList();
                                            var OGrp1 = OSal3.GroupBy(t => t.PaymentBankCode) //.GroupBy(t => t.Geostruct.Location.Id)
                                                .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Select(r => r.OSal.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                            if (OGrp1 != null && OGrp1.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataNonRegular = OGrp1

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = e.location.LocationObj.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Name + "-Org_Br_" + ca.CreditDebitBranchCode, //db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        DistributedCode = e.PaymentBankCode.ToString(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataNonRegular);

                                            }

                                            break;
                                        case "EPF":




                                            var OSalaryT1 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSal4 = OSalaryT1.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                    .Select(e => new
                                                    {
                                                        OSal = e.Osal,
                                                        PaymentBankCode = e.PaymentBankCode
                                                    }).ToList();
                                            var OEPF = OSal4.Where(e => e.OSal.PFECRR != null).GroupBy(t => t.PaymentBankCode) //.GroupBy(e => e.Geostruct.Location.Id)
                                                .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Select(r => r.OSal.PFECRR).ToList() }).ToList();

                                            var SalArrT = db.SalaryArrearT.Include(e => e.SalaryArrearPaymentT).Include(e => e.SalaryArrearPaymentT.Select(r => r.SalaryHead))
                                               .Include(e => e.GeoStruct).Include(e => e.GeoStruct.Location).Include(e => e.GeoStruct.Location.LocationObj)
                                                .Where(e => e.PayMonth == mPayMonth).ToList();
                                            // .Where(e => e.PayMonth == mPayMonth && e.GeoStruct.Location.LocationObj.LocCode == ca.LocationIn).ToList();

                                            var SalAttPayT = SalArrT.Select(r => r.SalaryArrearPaymentT.Where(t => t.SalaryHead.Code == "VPF")).ToList();
                                            var amt = SalAttPayT.Sum(t => t.Sum(y => y.SalHeadAmount));

                                            if (OEPF != null && OEPF.Count() > 0) //Changes for Null
                                            {


                                                List<JVProcessData> OJVProcessDataEPF = OEPF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (e.SalDetails.Sum(r => r.EE_Share) + e.SalDetails.Sum(r => r.Arrear_EE_Share)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode, //db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBankCode.ToString(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataEPF);
                                            }

                                            break;
                                        case "ADMINPF":

                                            foreach (var pfMaster in OCompPFMaster)
                                            {
                                                Admincharge = pfMaster.EPFAdminCharges;
                                                var OSalaryADMINPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                                var OSalADMINPF = OSalaryADMINPF.Where(e => e.PaymentBankCode == ca.PaymentBank.Code && e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                        .Select(e => new
                                                        {
                                                            OSal = e.Osal,
                                                            PaymentBankCode = e.PaymentBankCode
                                                        }).ToList();
                                                var OADMINPF = OSalADMINPF.Where(e => e.OSal.PFECRR != null).GroupBy(t => t.PaymentBankCode) //.GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                        .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Select(r => r.OSal.PFECRR).ToList() })
                                                        .ToList();

                                                if (OADMINPF != null && OADMINPF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataADMINPF = OADMINPF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //BranchCode = e.location.LocCode,
                                                            //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            BranchCode = ca.CreditDebitBranchCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages)) * Admincharge / 100, 0)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            // Narration = ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode, //db.Location.Where(a => a.LocationObj.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").SingleOrDefault(),
                                                            DistributedCode = e.PaymentBankCode.ToString(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataADMINPF);
                                                }
                                            }

                                            break;
                                        case "INSPPF":

                                            foreach (var pfMaster in OCompPFMaster)
                                            {
                                                Inspcharge = pfMaster.EPFInspCharges;
                                                var OSalaryINSPPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                                var OSalINSPPF = OSalaryINSPPF.Where(e => e.PaymentBankCode == ca.PaymentBank.Code && e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                        .Select(e => new
                                                        {
                                                            OSal = e.Osal,
                                                            PaymentBankCode = e.PaymentBankCode
                                                        }).ToList();
                                                var OINSPPF = OSalINSPPF.Where(e => e.OSal.PFECRR != null).GroupBy(t => t.PaymentBankCode)//.GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                        .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Select(r => r.OSal.PFECRR).ToList() })
                                                        .ToList();

                                                if (OINSPPF != null && OINSPPF.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataINSPPF = OINSPPF
                                                        .Select(e => new JVProcessData
                                                        {
                                                            BatchName = mBatchName,
                                                            ProcessMonth = mPayMonth,
                                                            ProcessDate = DateTime.Now.Date,
                                                            JVParameter = db.JVParameter.Find(ca.Id),
                                                            //BranchCode = e.location.LocCode,
                                                            //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                            BranchCode = ca.CreditDebitBranchCode,
                                                            AccountProductCode = ca.JVProductCode,
                                                            AccountCustomerNo = "",
                                                            AccountCode = ca.AccountNo,
                                                            SubAccountCode = ca.SubAccountNo,
                                                            TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages)) * Inspcharge / 100, 0)).ToString("0.00"),
                                                            CreditDebitFlag = ca.CreditDebitFlag,
                                                            //Narration = ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode, // db.Location.Where(a => a.LocationObj.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                            SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").SingleOrDefault(),
                                                            DistributedCode = e.PaymentBankCode.ToString(),
                                                            Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Name),
                                                        }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataINSPPF);
                                                }
                                            }
                                            break;
                                        case "CPF":


                                            var OSalaryT2 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSal5 = OSalaryT2.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                    .Select(e => new
                                                    {
                                                        OSal = e.Osal,
                                                        PaymentBankCode = e.PaymentBankCode
                                                    }).ToList();
                                            var OCPF = OSal5.Where(e => e.OSal.PFECRR != null).GroupBy(t => t.PaymentBankCode)//.GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Select(r => r.OSal.PFECRR).ToList() })
                                                    .ToList();

                                            if (OCPF != null && OCPF.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataCPF = OCPF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = e.location.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (e.SalDetails.Sum(r => r.ER_Share) + e.SalDetails.Sum(r => r.Arrear_ER_Share)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //  Narration = ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode, //db.Location.Where(a => a.LocationObj.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBankCode.ToString(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataCPF);
                                            }

                                            break;
                                        case "PENSION":



                                            var OSalaryT3 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSal6 = OSalaryT3.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                    .Select(e => new
                                                    {
                                                        OSal = e.Osal,
                                                        PaymentBankCode = e.PaymentBankCode
                                                    }).ToList();

                                            var OEPS = OSal6.Where(e => e.OSal.PFECRR != null).GroupBy(t => t.PaymentBankCode)//.GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Select(r => r.OSal.PFECRR).ToList() })
                                                    .ToList();
                                            if (OEPS != null && OEPS.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataEPS = OEPS
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        // BranchCode = e.location.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (e.SalDetails.Sum(r => r.EPS_Share) + e.SalDetails.Sum(r => r.Arrear_EPS_Share)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode,// db.Location.Where(a => a.LocationObj.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBankCode.ToString(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataEPS);
                                            }

                                            break;

                                        case "LWF":


                                            var OSalaryTEMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSalEMPLWF = OSalaryTEMPLWF.Where(e => e.PaymentBankCode == ca.PaymentBank.Code && e.Osal.LWFTransT != null)
                                                    .Select(e => new
                                                    {
                                                        OSal = e.Osal,
                                                        PaymentBankCode = e.PaymentBankCode
                                                    }).ToList();
                                            var OEMPEMPLWF = OSalEMPLWF.GroupBy(t => t.PaymentBankCode)//.GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Select(r => r.OSal.LWFTransT).ToList() })
                                                    .ToList();
                                            if (OEMPEMPLWF != null && OEMPEMPLWF.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataEMPLWF = OEMPEMPLWF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = e.location.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode, //db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBankCode.ToString(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataEMPLWF);
                                            }

                                            break;
                                        case "COMPLWF":



                                            var OSalaryTCOMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSalCOMPLWF = OSalaryTCOMPLWF.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                    .Select(e => new
                                                    {
                                                        OSal = e.Osal,
                                                        PaymentBankCode = e.PaymentBankCode
                                                    }).ToList();
                                            var OCOMPLWF = OSalCOMPLWF.GroupBy(t => t.PaymentBankCode)//.GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                     .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Select(r => r.OSal.LWFTransT).ToList() })
                                                    .ToList();
                                            if (OCOMPLWF != null && OCOMPLWF.Count() > 0) //Changes for Null
                                            {

                                                List<JVProcessData> OJVProcessDataCOMPLWF = OCOMPLWF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = e.location.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //  Narration = ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode, //db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBankCode.ToString(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataCOMPLWF);
                                            }

                                            break;
                                        case "COMPESIC":



                                            var OSalaryTCOMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSalCOMPESIS = OSalaryTCOMPESIS.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                    .Select(e => new
                                                    {
                                                        OSal = e.Osal,
                                                        PaymentBankCode = e.PaymentBankCode
                                                    }).ToList();
                                            var OCOMPESIS = OSalCOMPESIS.GroupBy(t => t.PaymentBankCode)//.GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                     .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Select(r => r.OSal.ESICTransT).ToList() })
                                                    .ToList();

                                            if (OCOMPESIS != null && OCOMPESIS.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataCOMPESIS = OCOMPESIS
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = e.location.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode,//db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBankCode.ToString(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataCOMPESIS);
                                            }

                                            break;
                                        case "ESIC":



                                            var OSalaryTEMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSalCOMPEMPESIS = OSalaryTEMPESIS.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBankCode = e.PaymentBankCode
                                                   }).ToList();
                                            var OEMPESIS = OSalCOMPEMPESIS.GroupBy(t => t.PaymentBankCode)//.GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Where(r => r.OSal.ESICTransT != null).Select(r => r.OSal.ESICTransT).ToList() })
                                                    .ToList();

                                            if (OEMPESIS != null && OEMPESIS.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataEMPESIS = OEMPESIS
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = e.location.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode,//db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBankCode.ToString(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataEMPESIS);
                                            }

                                            break;
                                        case "PTAX":


                                            var OSalaryTPTAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSalPTAX = OSalaryTPTAX.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                    .Select(e => new
                                                    {
                                                        OSal = e.Osal,
                                                        PaymentBankCode = e.PaymentBankCode
                                                    }).ToList();
                                            var OEMPPTAX = OSalPTAX.GroupBy(t => t.PaymentBankCode)//.GroupBy(e => e.Geostruct.Location.LocationObj.Id)
                                                    .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Where(r => r.OSal.PTaxTransT != null).Select(r => r.OSal.PTaxTransT).ToList() })
                                                    .ToList();
                                            if (OEMPPTAX != null && OEMPPTAX.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataEMPPTAX = OEMPPTAX
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = e.location.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (e.SalDetails.Sum(r => r.PTAmount) + e.SalDetails.Sum(r => r.ArrearPTAmount)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode, //db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBankCode.ToString(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataEMPPTAX);
                                            }

                                            break;
                                        case "ITAX":


                                            var OSalaryTITAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault(), PaymentBankCode = e.Employee.EmpOffInfo.Bank.Code }).ToList();
                                            var OSalITAX = OSalaryTITAX.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                   .Select(e => new
                                                   {
                                                       OSal = e.Osal,
                                                       PaymentBankCode = e.PaymentBankCode
                                                   }).ToList();
                                            var OEMPITAX = OSalITAX.GroupBy(t => t.PaymentBankCode)//.GroupBy(e => e.Geostruct.Location.Id)
                                                    .Select(e => new { PaymentBankCode = e.Key, SalDetails = e.Select(r => r.OSal.SalEarnDedT.Where(t => t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "ITAX")).ToList() })
                                                    .ToList();
                                            if (OEMPITAX != null && OEMPITAX.Count() > 0) //Changes for Null
                                            {
                                                List<JVProcessData> OJVProcessDataEMPITAX = OEMPITAX
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = e.location.LocationObj.LocCode,
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        // TransactionAmount = e.SalDetails.Sum(r => r.Amoount).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode,// db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").SingleOrDefault(),
                                                        DistributedCode = e.PaymentBankCode.ToString(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataEMPITAX);
                                            }

                                            break;
                                        case "INSURANCE":


                                            var OSalInsurance = OSalaryT.Where(e => e.PaymentBankCode == ca.PaymentBank.Code)
                                                      .Select(e => new
                                                      {
                                                          OSal = e.Osal,
                                                          PaymentBankCode = e.PaymentBankCode
                                                      }).ToList();
                                            //  Utility.DumpProcessStatus(LineNo: 5501);
                                            var OEMPInsurance = OSalInsurance.Where(e => e.OSal.SalEarnDedT != null && e.OSal.SalEarnDedT.Count() > 0)
                                                    .GroupBy(e => e.PaymentBankCode).Select(e => new
                                                    {
                                                        PaymentBankCode = e.Key,
                                                        SalDetails = e.SelectMany(r => r.OSal.SalEarnDedT.Where(t =>
                                                            t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "INSURANCE" &&
                                                            t.SalaryHead.Id == ca1.Id)).ToList()
                                                    }).ToList();

                                            Utility.DumpProcessStatus(LineNo: 5511);

                                            if (OEMPInsurance != null && OEMPInsurance.Count() > 0) //Changes for Null
                                            {
                                                Utility.DumpProcessStatus(LineNo: 5516);
                                                List<JVProcessData> OJVProcessDataEMPInsurance = OEMPInsurance
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(da => Convert.ToDecimal(da.Amount)).ToString("0.00"),
                                                        //TransactionAmount = Amt.ToString("0.00"),
                                                        // TransactionAmount = e.SalDetails.Count() > 0 ? e.SalDetails.Sum(a => Convert.ToDecimal(a.Amount)).ToString("0.00") : "0.00",
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        // Narration = "Employees " + ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode, //db.Location.Where(a => a.Id == e.location).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        DistributedCode = e.PaymentBankCode.ToString(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();
                                                Utility.DumpProcessStatus(LineNo: 5531);

                                                OJVProcessData.AddRange(OJVProcessDataEMPInsurance);
                                            }

                                            break;

                                        case "LOAN":
                                            //if Location

                                            if (OSalaryT != null && OSalaryT.Count() > 0)
                                            {


                                                var OSal = OSalaryT
                                                     .Select(e => new
                                                     {
                                                         OSal = e.Osal,
                                                         PaymentBankCode = e.PaymentBankCode
                                                     }).ToList();

                                                var OEMPLoan = OSal.Where(e => e.OSal.SalEarnDedT != null && e.OSal.SalEarnDedT.Count() > 0)
                                                   .GroupBy(e => e.PaymentBankCode).Select(e => new
                                                   {
                                                       PaymentBankCode = e.Key,
                                                       SalDetails = e.SelectMany(r => r.OSal.SalEarnDedT.Where(t =>
                                                           t.SalaryHead.Id == ca1.Id)).ToList()
                                                   }).ToList();

                                                if (OEMPLoan != null && OEMPLoan.Count() > 0) //Changes for Null
                                                {
                                                    List<JVProcessData> OJVProcessDataLoan = OEMPLoan
                                               .Select(e => new JVProcessData
                                               {
                                                   BatchName = mBatchName,
                                                   ProcessMonth = mPayMonth,
                                                   ProcessDate = DateTime.Now.Date,
                                                   JVParameter = db.JVParameter.Find(ca.Id),
                                                   // BranchCode = e.Key.LocationObj.LocCode,
                                                   BranchCode = ca.CreditDebitBranchCode,// db.Location.Where(a => a.Id == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                   // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                                                   AccountProductCode = ca.JVProductCode,
                                                   AccountCustomerNo = "",
                                                   AccountCode = ca.AccountNo,
                                                   SubAccountCode = ca.SubAccountNo,
                                                   TransactionAmount = e.SalDetails.Sum(da => Convert.ToDecimal(da.Amount)).ToString("0.00"),
                                                   CreditDebitFlag = ca.CreditDebitFlag,
                                                   //Narration = ca1.Code + "-Org_Br_" + ca.CreditDebitBranchCode, // db.Location.Where(a => a.Id == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                                                   SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),

                                                   DistributedCode = ca.PaymentBank.Code,
                                                   Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, ca.CreditDebitBranchCode, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                               }).ToList();

                                                    OJVProcessData.AddRange(OJVProcessDataLoan);
                                                }


                                            }
                                            //Emp_Monthsal;
                                            break;
                                        default:

                                            break;
                                    }

                                }

                            }
                            //locationwise grouping end

                        }
                        #endregion
                        //Paymentbank jv End
                        #region company
                        if (ca.JVGroup.LookupVal.ToUpper() == "COMPANY")
                        {
                            foreach (var ca1 in ca.SalaryHead)
                            {
                                switch (ca1.SalHeadOperationType.LookupVal.ToUpper())
                                {

                                    case "GROSS":
                                        //if Location

                                        if (OSalaryT != null && OSalaryT.Count() > 0)
                                        {
                                            var OSal = OSalaryT
                                                .Select(e => e.Osal).ToList();
                                            List<JVProcessData> OJVProcessDataNet = OSal
                                            .Where(r => r.IsHold == false).GroupBy(t => t.Geostruct.Company.Id)

                                            .Select(e => new JVProcessData
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                BranchCode = ca.CreditDebitBranchCode,
                                                AccountProductCode = ca.JVProductCode,
                                                AccountCustomerNo = "",
                                                AccountCode = ca.AccountNo,
                                                SubAccountCode = ca.SubAccountNo,
                                                TransactionAmount = e.Sum(r => r.TotalEarning).ToString("0.00"),
                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                //Narration = "Gross Salary for Month :" + mPayMonth,
                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").SingleOrDefault(),
                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GROSS").FirstOrDefault().Name),
                                            }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataNet);
                                        }
                                        //Emp_Monthsal;
                                        break;
                                    case "BASIC":
                                        var OSalBASIC = OSalaryT
                                               .Select(e => e.Osal).ToList();
                                        var OGrpBASIC = OSalBASIC.GroupBy(t => t.Geostruct.Company.Id).Select(e => new
                                        {
                                            location = e.Key,
                                            SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList()
                                        }).ToList();
                                        if (OGrpBASIC != null && OGrpBASIC.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataBASIC = OGrpBASIC

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = ca1.Name + " Salary for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BASIC").FirstOrDefault().Name),
                                                }).ToList();
                                            OJVProcessData.AddRange(OJVProcessDataBASIC);
                                        }
                                        if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OArrSalaryT
                                               .Select(e => e.Osal).ToList();
                                            var OGrpArr = OSal2.GroupBy(t => t.FirstOrDefault().GeoStruct.Company.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList() }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + " Arrear for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                            }
                                        }
                                        //officiating
                                        if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OOffSalaryT
                                               .ToList();
                                            var OGrpArr = OSal2.GroupBy(t => t.GeoStruct.Company.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + " Arrear for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                            }
                                        }

                                        break;
                                    case "VDA":
                                        var OSalVDA = OSalaryT
                                               .Select(e => e.Osal).ToList();
                                        var OGrpVDA = OSalVDA.GroupBy(t => t.Geostruct.Company.Id).Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                        List<JVProcessData> OJVProcessDataVDA = OGrpVDA

                                            .Select(e => new JVProcessData
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                BranchCode = ca.CreditDebitBranchCode,
                                                AccountProductCode = ca.JVProductCode,
                                                AccountCustomerNo = "",
                                                AccountCode = ca.AccountNo,
                                                SubAccountCode = ca.SubAccountNo,
                                                // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                //Narration = ca1.Name + " Salary for Month :" + mPayMonth,
                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "VDA").SingleOrDefault(),
                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "VDA").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "VDA").FirstOrDefault().Name),
                                            }).ToList();
                                        OJVProcessData.AddRange(OJVProcessDataVDA);

                                        if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OArrSalaryT
                                               .Select(e => e.Osal).ToList();
                                            var OGrpArr = OSal2.GroupBy(t => t.FirstOrDefault().GeoStruct.Company.Id).Select(e => new
                                            {
                                                location = e.Key,
                                                SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList()
                                            }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + " Arrear for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                            }
                                        }
                                        //officiating
                                        if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OOffSalaryT
                                               .ToList();
                                            var OGrpArr = OSal2.GroupBy(t => t.GeoStruct.Company.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + " Arrear for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                            }
                                        }
                                        break;
                                    case "OFFEARN":
                                        var OSalOFFICIATING = OSalaryT
                                               .Select(e => e.Osal).ToList();
                                        var OGrpOFFICIATING = OSalOFFICIATING.GroupBy(t => t.Geostruct.Company.Id).Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                        List<JVProcessData> OJVProcessDataOFFICIATING = OGrpOFFICIATING

                                            .Select(e => new JVProcessData
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                BranchCode = ca.CreditDebitBranchCode,
                                                AccountProductCode = ca.JVProductCode,
                                                AccountCustomerNo = "",
                                                AccountCode = ca.AccountNo,
                                                SubAccountCode = ca.SubAccountNo,
                                                // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),
                                                TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                //Narration = ca1.Name + " Salary for Month :" + mPayMonth,
                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "OFFEARN").SingleOrDefault(),
                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "OFFEARN").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "OFFEARN").FirstOrDefault().Name),
                                            }).ToList();
                                        OJVProcessData.AddRange(OJVProcessDataOFFICIATING);

                                        if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OArrSalaryT
                                               .Select(e => e.Osal).ToList();
                                            var OGrpArr = OSal2.GroupBy(t => t.FirstOrDefault().GeoStruct.Company.Id).Select(e => new
                                            {
                                                location = e.Key,
                                                SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList()
                                            }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        //TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + " Arrear for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                            }
                                        }
                                        //officiating
                                        if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OOffSalaryT
                                               .ToList();
                                            var OGrpArr = OSal2.GroupBy(t => t.GeoStruct.Company.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + " Arrear for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                            }
                                        }
                                        break;

                                    case "REGULAR":
                                        var OSal1 = OSalaryT
                                               .Select(e => e.Osal).ToList();
                                        var OGrp = OSal1.GroupBy(t => t.Geostruct.Company.Id).Select(e => new { SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                        List<JVProcessData> OJVProcessDataRegular = OGrp

                                            .Select(e => new JVProcessData
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                BranchCode = ca.CreditDebitBranchCode,
                                                AccountProductCode = ca.JVProductCode,
                                                AccountCustomerNo = "",
                                                AccountCode = ca.AccountNo,
                                                SubAccountCode = ca.SubAccountNo,
                                                TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                // Narration = ca1.Name + " Salary for Month :" + mPayMonth,
                                                SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                            }).ToList();
                                        OJVProcessData.AddRange(OJVProcessDataRegular);

                                        if (OArrSalaryT != null && OArrSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OArrSalaryT.Where(r => r.Osal != null)
                                               .Select(e => e.Osal).ToList();

                                            var OGrpArr = OSal2 == null ? null : OSal2.GroupBy(t => t.FirstOrDefault().GeoStruct.Company.Id).Select(e => new
                                            {
                                                location = e.Key,
                                                SalDetails = e.SelectMany(r => r.Select(d => d.SalaryArrearPaymentT.Where(t => t.SalaryHead.Id == ca1.Id))).ToList()
                                            }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.SalHeadAmount))).ToString("0.00"),

                                                        //  TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                        //TransactionAmount = e.SalDetails.Sum(a => (a.Select(d => Convert.ToDecimal(d.SalHeadAmount)))).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + " Arrear for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                            }
                                        }
                                        //officiating
                                        if (OOffSalaryT != null && OOffSalaryT.Count() > 0)
                                        {
                                            var OSal2 = OOffSalaryT
                                               .ToList();
                                            var OGrpArr = OSal2.GroupBy(t => t.GeoStruct.Company.Id).Select(e => new { location = e.Key, SalDetails = e.SelectMany(r => r.OfficiatingPaymentT.Where(t => t.SalaryHead.Id == ca1.Id)).ToList() }).ToList();

                                            if (OGrpArr != null && OGrpArr.Count() > 0)
                                            {
                                                List<JVProcessData> OJVProcessDataRegularArr = OGrpArr

                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.SalHeadAmount))).ToString("0.00"),
                                                        TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.SalHeadAmount)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = ca1.Name + " Arrear for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataRegularArr);

                                            }
                                        }

                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            List<JVProcessData> OJVProcessDataYrCompany = OYearlyT
                                            .GroupBy(q => q.Comp_code)
                                            .Select(e => new JVProcessData
                                            {
                                                BatchName = mBatchName,
                                                ProcessMonth = mPayMonth,
                                                ProcessDate = DateTime.Now.Date,
                                                JVParameter = db.JVParameter.Find(ca.Id),
                                                //BranchCode = e.Key.LocationObj.LocCode,
                                                BranchCode = ca.CreditDebitBranchCode,
                                                AccountProductCode = ca.JVProductCode,
                                                AccountCustomerNo = "",
                                                AccountCode = ca.AccountNo,
                                                SubAccountCode = ca.SubAccountNo,
                                                //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString(),
                                                TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                CreditDebitFlag = ca.CreditDebitFlag,
                                                // Narration = "Yearly Salary for Month :" + mPayMonth,
                                                SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).SingleOrDefault(),
                                                Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "REGULAR" && r.Id == ca1.Id).FirstOrDefault().Name),
                                            }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataYrCompany);

                                            var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(YearlyTdsdata);
                                            }
                                            var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(YearlyOTHDATA);
                                            }
                                            var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                            }
                                            var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                            }

                                        }
                                        //yearly end	
                                        break;
                                    case "NONREGULAR":
                                        var OSal3 = OSalaryT
                                               .Select(e => e.Osal).ToList();
                                        var OGrp1 = OSal3.GroupBy(t => t.Geostruct.Company.Id).Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(d => d.SalaryHead.Id == ca1.Id)).ToList() }).ToList();
                                        if (OGrp1 != null && OGrp1.Count() > 0)
                                        {
                                            List<JVProcessData> OJVProcessDataNonRegular = OGrp1

                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),

                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    //Narration = ca1.Name + " Salary for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataNonRegular);

                                        }
                                        break;
                                    case "EPF":

                                        var OSalaryT1 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSal4 = OSalaryT1
                                               .Select(e => e.Osal).ToList();
                                        var OEPF = OSal4.GroupBy(e => e.Geostruct.Company.Id)
                                            .Select(e => new
                                            {
                                                location = e.Key,
                                                SalDetails = e.Where(a => a.PFECRR != null)
                                                    .Select(r => r.PFECRR).ToList()
                                            }).ToList();

                                        var SalArrT = db.SalaryArrearT.Include(e => e.SalaryArrearPaymentT)
                                                   .Include(e => e.SalaryArrearPaymentT.Select(r => r.SalaryHead))
                                                   .Include(e => e.GeoStruct)
                                                  .Include(e => e.GeoStruct.Location).Include(e => e.GeoStruct.Location.LocationObj)
                                                  .Include(e => e.FuncStruct).Include(e => e.FuncStruct.JobPosition)
                                                  .Where(e => e.PayMonth == mPayMonth).ToList();
                                        var SalAttPayT = SalArrT.Select(r => r.SalaryArrearPaymentT.Where(t => t.SalaryHead.Code == "VPF")).ToList();
                                        var vpfamt = SalAttPayT.Sum(t => t.Sum(y => y.SalHeadAmount));


                                        if (OEPF != null && OEPF.Count() > 0) //Changes for Null
                                        {
                                            var a = OEPF.Select(r => r.SalDetails).SingleOrDefault();
                                            double Amt = 0;
                                            foreach (var item in a)
                                            {
                                                if (item != null)
                                                {
                                                    double total = item.EE_Share + item.Arrear_EE_Share + item.Officiating_EE_Share;
                                                    Amt = Amt + total;
                                                }
                                            }
                                            Amt = Amt - vpfamt;
                                            if (Amt < 0)
                                            {
                                                Amt = 0;
                                            }
                                            List<JVProcessData> OJVProcessDataEPF = OEPF
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = Amt.ToString("0.00"),
                                                    //TransactionAmount = (e.SalDetails.Sum(r => r.EE_Share) + e.SalDetails.Sum(r => r.Arrear_EE_Share)).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    //Narration = "Employee Share Provident Fund including Arrears" + ca1.Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "EPF").FirstOrDefault().Name),
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEPF);
                                        }
                                        break;
                                    case "ADMINPF":
                                        foreach (var pfMaster in OCompPFMaster)
                                        {
                                            Admincharge = pfMaster.EPFAdminCharges;
                                            var OSalaryADMINPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                            var OSalADMINPF = OSalaryADMINPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                   .Select(e => e.Osal).ToList();
                                            var OADMINPF = OSalADMINPF.GroupBy(e => e.Geostruct.Company.Id)
                                                .Select(e => new
                                                {
                                                    location = e.Key,
                                                    SalDetails = e.Where(a => a.PFECRR != null).Select(r => r.PFECRR).ToList()
                                                })
                                                .ToList();
                                            if (OADMINPF != null && OADMINPF.Count() > 0) //Changes for Null
                                            {

                                                List<JVProcessData> OJVProcessDataADMINPF = OADMINPF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages) + e.SalDetails.Sum(r => r.Officiating_EPF_Wages)) * Admincharge / 100, 0)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = "Admin Charges" + ca1.Code + " for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ADMINPF").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataADMINPF);
                                            }
                                        }
                                        break;
                                    case "INSPPF":

                                        foreach (var pfMaster in OCompPFMaster)
                                        {
                                            Inspcharge = pfMaster.EPFInspCharges;

                                            var OSalaryINSPPF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                            var OSalINSPPF = OSalaryINSPPF.Where(e => e.Osal != null && e.Osal.PFECRR != null && e.Osal.PFECRR.Establishment_ID == pfMaster.EstablishmentID)
                                                   .Select(e => e.Osal).ToList();
                                            var OINSPPF = OSalINSPPF.GroupBy(e => e.Geostruct.Company.Id)
                                                .Select(e => new
                                                {
                                                    location = e.Key,
                                                    SalDetails = e.Where(a => a.PFECRR != null).Select(r => r.PFECRR).ToList()
                                                })
                                                .ToList();
                                            if (OINSPPF != null && OINSPPF.Count() > 0) //Changes for Null
                                            {

                                                List<JVProcessData> OJVProcessDataINSPPF = OINSPPF
                                                    .Select(e => new JVProcessData
                                                    {
                                                        BatchName = mBatchName,
                                                        ProcessMonth = mPayMonth,
                                                        ProcessDate = DateTime.Now.Date,
                                                        JVParameter = db.JVParameter.Find(ca.Id),
                                                        BranchCode = ca.CreditDebitBranchCode,
                                                        AccountProductCode = ca.JVProductCode,
                                                        AccountCustomerNo = "",
                                                        AccountCode = ca.AccountNo,
                                                        SubAccountCode = ca.SubAccountNo,
                                                        TransactionAmount = (Math.Round((e.SalDetails.Sum(r => r.EPF_Wages) + e.SalDetails.Sum(r => r.Arrear_EPF_Wages) + e.SalDetails.Sum(r => r.Officiating_EPF_Wages)) * Inspcharge / 100, 0)).ToString("0.00"),
                                                        CreditDebitFlag = ca.CreditDebitFlag,
                                                        //Narration = "Inspection Charges" + ca1.Code + " for Month :" + mPayMonth,
                                                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").SingleOrDefault(),
                                                        Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "INSPPF").FirstOrDefault().Name),
                                                    }).ToList();

                                                OJVProcessData.AddRange(OJVProcessDataINSPPF);
                                            }
                                        }
                                        break;
                                    case "CPF":
                                        var OSalaryT2 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSal5 = OSalaryT2
                                               .Select(e => e.Osal).ToList();
                                        var OCPF = OSal5.GroupBy(e => e.Geostruct.Company.Id)
                                            .Select(e => new
                                            {
                                                location = e.Key,
                                                SalDetails = e.Where(a => a.PFECRR != null).Select(r => r.PFECRR).ToList()
                                            })
                                            .ToList();
                                        if (OCPF != null && OCPF.Count() > 0) //Changes for Null
                                        {

                                            List<JVProcessData> OJVProcessDataCPF = OCPF
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = (e.SalDetails.Sum(r => r.ER_Share) + e.SalDetails.Sum(r => r.Arrear_ER_Share) + e.SalDetails.Sum(r => r.Officiating_ER_Share)).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = "Company Share Provident Fund" + ca1.Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "CPF").FirstOrDefault().Name),
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataCPF);
                                        }
                                        break;
                                    case "PENSION":

                                        var OSalaryT3 = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSal6 = OSalaryT3
                                               .Select(e => e.Osal).ToList();

                                        var OEPS = OSal6.GroupBy(e => e.Geostruct.Company.Id)
                                            .Select(e => new
                                            {
                                                location = e.Key,
                                                SalDetails = e.Where(a => a.PFECRR != null).Select(r => r.PFECRR).ToList()
                                            })
                                            .ToList();

                                        if (OEPS != null && OEPS.Count() > 0) //Changes for Null
                                        {

                                            List<JVProcessData> OJVProcessDataEPS = OEPS
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = (e.SalDetails.Sum(r => r.EPS_Share) + e.SalDetails.Sum(r => r.Arrear_EPS_Share) + e.SalDetails.Sum(r => r.Officiating_EPS_Share)).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = "Pension Share Provident Fund" + ca1.Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PENSION").FirstOrDefault().Name),
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEPS);
                                        }
                                        break;

                                    case "LWF":
                                        var OSalaryTEMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalEMPLWF = OSalaryTEMPLWF
                                               .Select(e => e.Osal).ToList();
                                        var OEMPEMPLWF = OSalEMPLWF.GroupBy(e => e.Geostruct.Company.Id)
                                            .Select(e => new { location = e.Key, SalDetails = e.Where(a => a.LWFTransT != null).Select(r => r.LWFTransT).ToList() })
                                            .ToList();
                                        var asa = OEMPEMPLWF.Where(e => e.SalDetails.Count > 0).Count();
                                        if (OEMPEMPLWF != null && OEMPEMPLWF.Count > 0 && asa > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEMPLWF = OEMPEMPLWF
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = "Employee Share LWF" + ca1.Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LWF").FirstOrDefault().Name),
                                                }).ToList();


                                            OJVProcessData.AddRange(OJVProcessDataEMPLWF);
                                        }

                                        break;
                                    case "COMPLWF":
                                        var OSalaryTCOMPLWF = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalCOMPLWF = OSalaryTCOMPLWF
                                               .Select(e => e.Osal).Where(e => e.LWFTransT != null).ToList();
                                        var OCOMPLWF = OSalCOMPLWF.GroupBy(e => e.Geostruct.Company.Id)
                                             .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.LWFTransT).ToList() })
                                            .ToList();
                                        if (OCOMPLWF != null && OCOMPLWF.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataCOMPLWF = OCOMPLWF
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = "Employee Share LWF" + ca1.Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPLWF").FirstOrDefault().Name),
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataCOMPLWF);
                                        }
                                        break;
                                    //            //

                                    case "COMPESIC":
                                        var OSalaryTCOMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalCOMPESIS = OSalaryTCOMPESIS
                                               .Select(e => e.Osal).ToList();
                                        var OCOMPESIS = OSalCOMPESIS.GroupBy(e => e.Geostruct.Company.Id)
                                             .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.ESICTransT).ToList() })
                                            .ToList();

                                        if (OCOMPESIS != null && OCOMPESIS.Count() > 0) //Changes for Null
                                        {

                                            List<JVProcessData> OJVProcessDataCOMPESIS = OCOMPESIS
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = e.SalDetails.Sum(r => r.CompAmt).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = "Employer Share ESIS" + ca1.Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "COMPESIC").FirstOrDefault().Name),
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataCOMPESIS);
                                        }
                                        break;
                                    case "ESIC":
                                        var OSalaryTEMPESIS = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalCOMPEMPESIS = OSalaryTEMPESIS
                                               .Select(e => e.Osal).ToList();
                                        var OEMPESIS = OSalCOMPEMPESIS.GroupBy(e => e.Geostruct.Company.Id)
                                            .Select(e => new { location = e.Key, SalDetails = e.Where(r => r.ESICTransT != null).Select(r => r.ESICTransT).ToList() })
                                            .ToList();
                                        if (OEMPESIS != null && OEMPESIS.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEMPESIS = OEMPESIS
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = e.SalDetails.Sum(r => r.EmpAmt).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    //  Narration = "Employees Share ESIS" + ca1.Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ESIC").FirstOrDefault().Name),
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPESIS);
                                        }
                                        break;
                                    case "PTAX":
                                        var OSalaryTPTAX = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalPTAX = OSalaryTPTAX
                                               .Select(e => e.Osal).ToList();
                                        var OEMPPTAX = OSalPTAX.GroupBy(e => e.Geostruct.Company.Id)
                                            .Select(e => new { location = e.Key, SalDetails = e.Where(r => r.PTaxTransT != null).Select(r => r.PTaxTransT).ToList() })
                                            .ToList();

                                        if (OEMPPTAX != null && OEMPPTAX.Count() > 0) //Changes for Null
                                        {
                                            List<JVProcessData> OJVProcessDataEMPPTAX = OEMPPTAX
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = (e.SalDetails.Sum(r => r.PTAmount) + e.SalDetails.Sum(r => r.ArrearPTAmount)).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    // Narration = "Employees Share PTAX including Arrears" + ca1.Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "PTAX").FirstOrDefault().Name),
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPPTAX);
                                        }
                                        break;
                                    case "ITAX":
                                        // var OSalaryTITAX = OSalaryT.Select(e => new { Osal = e.Osal.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        var OSalITAX = OSalaryT
                                               .Select(e => e.Osal).ToList();
                                        var OEMPITAX = OSalITAX.GroupBy(e => e.Geostruct.Company.Id)
                                         .Select(e => new
                                         {
                                             location = e.Key,
                                             SalDetails = e.Where(a => a.SalEarnDedT != null && a.SalEarnDedT.Count > 0)
                                                 .Select(r => r.SalEarnDedT.Where(t => t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "ITAX")).ToList()
                                         })
                                            .ToList();
                                        if (OEMPITAX != null && OEMPITAX.Count() > 0) //Changes for Null
                                        {
                                            var a = OEMPITAX.Select(r => r.SalDetails).SingleOrDefault();
                                            double Amt = 0;
                                            foreach (var item in a)
                                            {
                                                var test = item.FirstOrDefault();
                                                if (test != null)
                                                {
                                                    Amt = Amt + test.Amount;
                                                }
                                            }
                                            List<JVProcessData> OJVProcessDataEMPITAX = OEMPITAX
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    // TransactionAmount = e.SalDetails.Sum(r => r.Amount).ToString("0.00"),

                                                    // TransactionAmount = e.SalDetails.Count() > 0 ? e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00") : "0.00",
                                                    TransactionAmount = Amt.ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    //  Narration = "Employees ITAX" + ca1.Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "ITAX").FirstOrDefault().Name),
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPITAX);
                                        }
                                        break;
                                    case "BONUS":
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            List<JVProcessData> OJVProcessDataNet1 = OYearlyT
                                                .GroupBy(q => q.Comp_code)
                                                          .Select(e => new JVProcessData
                                                          {
                                                              BatchName = mBatchName,
                                                              ProcessMonth = mPayMonth,
                                                              ProcessDate = DateTime.Now.Date,
                                                              JVParameter = db.JVParameter.Find(ca.Id),
                                                              //BranchCode = e.Key.LocationObj.LocCode,
                                                              BranchCode = ca.CreditDebitBranchCode,
                                                              AccountProductCode = ca.JVProductCode,
                                                              AccountCustomerNo = "",
                                                              AccountCode = ca.AccountNo,
                                                              SubAccountCode = ca.SubAccountNo,
                                                              //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString(),
                                                              TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                              CreditDebitFlag = ca.CreditDebitFlag,
                                                              // Narration = "Yearly Salary for Month :" + mPayMonth,
                                                              SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").SingleOrDefault(),
                                                              Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "BONUS").FirstOrDefault().Name),
                                                          }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataNet1);

                                            var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(YearlyTdsdata);
                                            }
                                            var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(YearlyOTHDATA);
                                            }
                                            var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                            }
                                            var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                            }

                                        }
                                        break;
                                    case "LVENCASH":
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            List<JVProcessData> OJVProcessDataNet1 = OYearlyT
                                                .GroupBy(q => q.Comp_code)
                                                          .Select(e => new JVProcessData
                                                          {
                                                              BatchName = mBatchName,
                                                              ProcessMonth = mPayMonth,
                                                              ProcessDate = DateTime.Now.Date,
                                                              JVParameter = db.JVParameter.Find(ca.Id),
                                                              //BranchCode = e.Key.LocationObj.LocCode,
                                                              BranchCode = ca.CreditDebitBranchCode,
                                                              AccountProductCode = ca.JVProductCode,
                                                              AccountCustomerNo = "",
                                                              AccountCode = ca.AccountNo,
                                                              SubAccountCode = ca.SubAccountNo,
                                                              //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString(),
                                                              TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                              CreditDebitFlag = ca.CreditDebitFlag,
                                                              // Narration = "Yearly Salary for Month :" + mPayMonth,
                                                              SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").SingleOrDefault(),
                                                              Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LVENCASH").FirstOrDefault().Name),
                                                          }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataNet1);

                                            var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(YearlyTdsdata);
                                            }
                                            var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(YearlyOTHDATA);
                                            }
                                            var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                            }
                                            var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                            }
                                        }
                                        break;
                                    case "LTA":
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            List<JVProcessData> OJVProcessDataNet1 = OYearlyT
                                                .GroupBy(q => q.Comp_code)
                                                          .Select(e => new JVProcessData
                                                          {
                                                              BatchName = mBatchName,
                                                              ProcessMonth = mPayMonth,
                                                              ProcessDate = DateTime.Now.Date,
                                                              JVParameter = db.JVParameter.Find(ca.Id),
                                                              //BranchCode = e.Key.LocationObj.LocCode,
                                                              BranchCode = ca.CreditDebitBranchCode,
                                                              AccountProductCode = ca.JVProductCode,
                                                              AccountCustomerNo = "",
                                                              AccountCode = ca.AccountNo,
                                                              SubAccountCode = ca.SubAccountNo,
                                                              //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString(),
                                                              TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                              CreditDebitFlag = ca.CreditDebitFlag,
                                                              // Narration = "Yearly Salary for Month :" + mPayMonth,
                                                              SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").SingleOrDefault(),
                                                              Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTA").FirstOrDefault().Name),
                                                          }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataNet1);

                                            var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(YearlyTdsdata);
                                            }
                                            var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(YearlyOTHDATA);
                                            }
                                            var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                            }
                                            var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                            }

                                        }
                                        break;
                                    case "MEDALLOW":
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            List<JVProcessData> OJVProcessDataNet1 = OYearlyT
                                                .GroupBy(q => q.Comp_code)
                                                          .Select(e => new JVProcessData
                                                          {
                                                              BatchName = mBatchName,
                                                              ProcessMonth = mPayMonth,
                                                              ProcessDate = DateTime.Now.Date,
                                                              JVParameter = db.JVParameter.Find(ca.Id),
                                                              //BranchCode = e.Key.LocationObj.LocCode,
                                                              BranchCode = ca.CreditDebitBranchCode,
                                                              AccountProductCode = ca.JVProductCode,
                                                              AccountCustomerNo = "",
                                                              AccountCode = ca.AccountNo,
                                                              SubAccountCode = ca.SubAccountNo,
                                                              //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString(),
                                                              TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                              CreditDebitFlag = ca.CreditDebitFlag,
                                                              //  Narration = "Yearly Salary for Month :" + mPayMonth,
                                                              SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").SingleOrDefault(),
                                                              Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "MEDALLOW").FirstOrDefault().Name),
                                                          }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataNet1);

                                            var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(YearlyTdsdata);
                                            }
                                            var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(YearlyOTHDATA);
                                            }
                                            var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                            }
                                            var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                            }

                                        }
                                        break;
                                    case "LTC":
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            List<JVProcessData> OJVProcessDataNet1 = OYearlyT
                                                .GroupBy(q => q.Comp_code)
                                                          .Select(e => new JVProcessData
                                                          {
                                                              BatchName = mBatchName,
                                                              ProcessMonth = mPayMonth,
                                                              ProcessDate = DateTime.Now.Date,
                                                              JVParameter = db.JVParameter.Find(ca.Id),
                                                              //BranchCode = e.Key.LocationObj.LocCode,
                                                              BranchCode = ca.CreditDebitBranchCode,
                                                              AccountProductCode = ca.JVProductCode,
                                                              AccountCustomerNo = "",
                                                              AccountCode = ca.AccountNo,
                                                              SubAccountCode = ca.SubAccountNo,
                                                              //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString(),
                                                              TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                              CreditDebitFlag = ca.CreditDebitFlag,
                                                              // Narration = "Yearly Salary for Month :" + mPayMonth,
                                                              SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").SingleOrDefault(),
                                                              Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "LTC").FirstOrDefault().Name),
                                                          }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataNet1);

                                            var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(YearlyTdsdata);
                                            }
                                            var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(YearlyOTHDATA);
                                            }
                                            var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                            }
                                            var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                            }

                                        }
                                        break;
                                    case "GRATUITY":
                                        if (OYearlyT != null && OYearlyT.Count() > 0)
                                        {
                                            List<JVProcessData> OJVProcessDataNet1 = OYearlyT
                                                .GroupBy(q => q.Comp_code)
                                                          .Select(e => new JVProcessData
                                                          {
                                                              BatchName = mBatchName,
                                                              ProcessMonth = mPayMonth,
                                                              ProcessDate = DateTime.Now.Date,
                                                              JVParameter = db.JVParameter.Find(ca.Id),
                                                              //BranchCode = e.Key.LocationObj.LocCode,
                                                              BranchCode = ca.CreditDebitBranchCode,
                                                              AccountProductCode = ca.JVProductCode,
                                                              AccountCustomerNo = "",
                                                              AccountCode = ca.AccountNo,
                                                              SubAccountCode = ca.SubAccountNo,
                                                              //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.AmountPaid)).Sum(u => u)).ToString(),
                                                              TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == ca1.Id).Select(x => x.AmountPaid)).Sum(u => u)).ToString("0.00"),
                                                              CreditDebitFlag = ca.CreditDebitFlag,
                                                              // Narration = "Yearly Salary for Month :" + mPayMonth,
                                                              SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").SingleOrDefault(),
                                                              Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "GRATUITY").FirstOrDefault().Name),
                                                          }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataNet1);

                                            var YearlyTdsdata = YearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(YearlyTdsdata);
                                            }
                                            var YearlyOTHDATA = YearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (YearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(YearlyOTHDATA);
                                            }
                                            var CompanyYearlyTdsdata = CompanyYearlyTDS(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyTdsdata != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyTdsdata);
                                            }
                                            var CompanyYearlyOTHDATA = CompanyYearlyOTHDED(mBatchName, mPayMonth, OYearlyT, ca1.Id, db);
                                            if (CompanyYearlyOTHDATA != null)
                                            {
                                                OJVProcessData.AddRange(CompanyYearlyOTHDATA);
                                            }

                                        }
                                        break;

                                    //Added By Sudhir

                                    case "LOAN":
                                        //  var OSalaryTLoan = OEmployeePayroll.Select(e => new { Osal = e.SalaryT.Where(d => d.PayMonth == mPayMonth).SingleOrDefault() }).ToList();
                                        //var OSalaryTLoan = OEmployeePayroll.Select(s => new { Osal = s.LoanAdvRequest.Where(e => e.LoanAdvanceHead.SalaryHead.Id == ca1.Id && (e.CloserDate == null || e.CloserDate >= Convert.ToDateTime("01/" + mPayMonth).AddMonths(1).Date)) }).ToList();
                                        var OSalLoan = OSalaryT
                                               .Select(e => e.Osal).ToList();
                                        var OEMPLoan = OSalLoan.GroupBy(e => e.Geostruct.Company.Id)
                                            // .Select(e => new { location = e.Key, SalDetails = e.Select(r => r.SalEarnDedT.Where(t => t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "ITAX")).FirstOrDefault() })
                                            //.ToList();
                                         .Select(e => new
                                         {
                                             location = e.Key,
                                             SalDetails = e.Where(a => a.SalEarnDedT != null && a.SalEarnDedT.Count > 0)
                                                 .Select(r => r.SalEarnDedT.Where(t => (t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "LOAN") && t.SalaryHead.Id == ca1.Id)).ToList()
                                         })
                                            .ToList();
                                        if (OEMPLoan != null && OEMPLoan.Count() > 0) //Changes for Null
                                        {


                                            List<JVProcessData> OJVProcessDataEMPLoan = OEMPLoan
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    // TransactionAmount = e.SalDetails.Sum(r => r.Amount).ToString("0.00"),
                                                    // TransactionAmount = e.SalDetails.Sum(a => Convert.ToDecimal(a.Select(d => d.Amount))).ToString("0.00"),

                                                    TransactionAmount = e.SalDetails.Sum(a => a.Sum(d => Convert.ToDecimal(d.Amount))).ToString("0.00"),
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    //  Narration = "Company Loan" + ca1.Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Code == ca1.Code).SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Where(r => r.Code == ca1.Code).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Code == ca1.Code).FirstOrDefault().Name),
                                                }).ToList();

                                            OJVProcessData.AddRange(OJVProcessDataEMPLoan);
                                        }
                                        break;
                                    // Added by Rekha 25072017
                                    case "INSURANCE":
                                        var OSalInsurance = OSalaryT
                                               .Select(e => e.Osal).ToList();
                                        Utility.DumpProcessStatus(LineNo: 5501);
                                        var OEMPInsurance = OSalInsurance.Where(e => e.SalEarnDedT != null && e.SalEarnDedT.Count() > 0)
                                            .GroupBy(e => e.Geostruct.Company.Id).Select(e => new
                                            {
                                                SalDetails = e.SelectMany(r => r.SalEarnDedT.Where(t =>
                                                    t.SalaryHead.SalHeadOperationType.LookupVal.ToUpper() == "INSURANCE" &&
                                                    t.SalaryHead.Id == ca1.Id)).ToList()
                                            }).ToList();

                                        Utility.DumpProcessStatus(LineNo: 5511);

                                        if (OEMPInsurance != null && OEMPInsurance.Count() > 0) //Changes for Null
                                        {
                                            Utility.DumpProcessStatus(LineNo: 5516);
                                            var a = OEMPInsurance.Select(r => r.SalDetails).SingleOrDefault();
                                            double Amt = 0;
                                            foreach (var item in a)
                                            {
                                                if (item != null)
                                                {
                                                    double total = item.Amount;
                                                    Amt = Amt + total;
                                                }
                                            }
                                            List<JVProcessData> OJVProcessDataEMPInsurance = OEMPInsurance
                                                .Select(e => new JVProcessData
                                                {
                                                    BatchName = mBatchName,
                                                    ProcessMonth = mPayMonth,
                                                    ProcessDate = DateTime.Now.Date,
                                                    JVParameter = db.JVParameter.Find(ca.Id),
                                                    BranchCode = ca.CreditDebitBranchCode,
                                                    AccountProductCode = ca.JVProductCode,
                                                    AccountCustomerNo = "",
                                                    AccountCode = ca.AccountNo,
                                                    SubAccountCode = ca.SubAccountNo,
                                                    TransactionAmount = Amt.ToString("0.00"),
                                                    // TransactionAmount = e.SalDetails.Count() > 0 ? e.SalDetails.Sum(a => Convert.ToDecimal(a.Amount)).ToString("0.00") : "0.00",
                                                    CreditDebitFlag = ca.CreditDebitFlag,
                                                    //Narration = "Employees " + ca1.Code + " for Month :" + mPayMonth,
                                                    SalaryHead = db.SalaryHead.Where(r => r.Id == ca1.Id).SingleOrDefault(),
                                                    Narration = NarrationFormat(ca.NarrationFormat != null && ca.NarrationFormat != "" ? ca.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Code, db.SalaryHead.Where(r => r.Id == ca1.Id).FirstOrDefault().Name),
                                                }).ToList();
                                            Utility.DumpProcessStatus(LineNo: 5531);

                                            OJVProcessData.AddRange(OJVProcessDataEMPInsurance);
                                        }
                        #endregion
                                        break;
                                    default:

                                        break;
                                }
                            }
                        }
                    }
                }


                //  mahanagar company wise loan
                string requiredPathLoan = Path.GetDirectoryName(Path.GetDirectoryName(System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase))) + "\\P2BUltimate\\App_Data\\Menu_Json";
                bool exists = System.IO.Directory.Exists(requiredPathLoan);
                string localPathLoan;
                if (!exists)
                {
                    localPathLoan = new Uri(requiredPathLoan).LocalPath;
                    System.IO.Directory.CreateDirectory(localPathLoan);
                }
                string pathLoan = requiredPathLoan + @"\CompanyLoanGroup" + ".ini";
                localPathLoan = new Uri(pathLoan).LocalPath;
                if (!System.IO.File.Exists(localPathLoan))
                {

                    using (var fs = new FileStream(localPathLoan, FileMode.OpenOrCreate))
                    {
                        StreamWriter str = new StreamWriter(fs);
                        str.BaseStream.Seek(0, SeekOrigin.Begin);

                        str.Flush();
                        str.Close();
                        fs.Close();
                    }


                }


                string requiredPathchk = Path.GetDirectoryName(Path.GetDirectoryName(System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase))) + "\\P2BUltimate\\App_Data\\Menu_Json";
                bool existschk = System.IO.Directory.Exists(requiredPathchk);
                string localPathchk;
                if (!existschk)
                {
                    localPath = new Uri(requiredPathchk).LocalPath;
                    System.IO.Directory.CreateDirectory(localPath);
                }
                string pathchk = requiredPathchk + @"\CompanyLoanGroup" + ".ini";
                localPathchk = new Uri(pathchk).LocalPath;
                string Leave_code = "";
                int Lvreqcnt = 0;
                int paramcnt = 0;
                using (var streamReader = new StreamReader(localPathchk))
                {
                    string line;

                    while ((line = streamReader.ReadLine()) != null)
                    {
                        var JVGROUP = line.Split('_')[0];
                        var JVName = line.Split('_')[1];
                        var JVCredidebiflag = line.Split('_')[2];
                        if (JVGROUP != "")
                        {

                            var jvp = db.JVParameter.Include(e => e.JVGroup).Where(e => e.JVGroup.LookupVal.ToUpper().ToString() == JVGROUP.ToUpper().ToString() && e.JVName.ToUpper().ToString() == JVName.ToUpper().ToString() && e.CreditDebitFlag.ToUpper().ToString() == JVCredidebiflag.ToUpper().ToString()).FirstOrDefault();
                            var removecomp = OJVProcessData.Where(e => e.JVParameter.Id == jvp.Id).ToList();
                            string sumamt = OJVProcessData.Where(e => e.JVParameter.Id == jvp.Id).Sum(y => Convert.ToDecimal(y.TransactionAmount)).ToString("0.00");
                            if (removecomp.Count() > 0)
                            {
                                var OProcessDataDelc = OJVProcessData.Where(e => e.JVParameter.Id == jvp.Id).ToList();

                                if (OProcessDataDelc != null && OProcessDataDelc.Count() > 0)
                                {
                                    foreach (var item in OProcessDataDelc)
                                    {
                                        OJVProcessData.Remove(item);
                                    }

                                }
                                JVProcessData OJVProcessDataComp = new JVProcessData()
                                {
                                    BatchName = mBatchName,
                                    ProcessMonth = mPayMonth,
                                    ProcessDate = DateTime.Now.Date,
                                    JVParameter = db.JVParameter.Where(x => x.Id == jvp.Id).FirstOrDefault(),
                                    BranchCode = jvp.CreditDebitBranchCode,
                                    AccountProductCode = jvp.JVProductCode,
                                    AccountCustomerNo = "",
                                    AccountCode = jvp.AccountNo,
                                    SubAccountCode = jvp.SubAccountNo,
                                    TransactionAmount = sumamt,
                                    CreditDebitFlag = jvp.CreditDebitFlag,
                                    Narration = "Company " + jvp.JVProductCode + " for Month :" + mPayMonth,
                                    SalaryHead = db.SalaryHead.Where(r => r.Code == "COMPLOAN").SingleOrDefault()
                                };
                                OJVProcessData.Add(OJVProcessDataComp);
                            }


                        }
                    }
                }

                // mahanagar company wise loan

                DBTrack dbt = new DBTrack() { Action = "C", CreatedBy = SessionManager.UserName, CreatedOn = DateTime.Now };
                foreach (var ca in OJVProcessData)
                {
                    ca.DBTrack = dbt;
                }
                db.JVProcessData.AddRange(OJVProcessData);
                db.SaveChanges();







                //OJVParameterComp.JVProcessData = OJVProcessData;
                //db.CompanyPayroll.Attach(OJVParameterComp);
                //db.Entry(OJVParameterComp).State = System.Data.Entity.EntityState.Modified;
                //db.SaveChanges();

                P2BUltimate.Models.JVFile OJVFile = new P2BUltimate.Models.JVFile();
                var mfilestring = "";
                if (_CompCode == _CustomeCompCode)
                {
                    mfilestring = OJVFile.CreateJVFileBhavNagarPatch(OJVProcessData, mPayMonth);
                }
                else if (_CompCode == "KDCC")
                {
                    mfilestring = OJVFile.CreateJVFileKDCCPatch(OJVProcessData, mPayMonth, mBatchName);
                }
                else if (_CompCode == "NDVS")
                {
                    mfilestring = OJVFile.CreateJVFileNDVSPatch(OJVProcessData, mPayMonth, mBatchName);
                }
                else if (_CompCode == "MSCB")
                {
                    mfilestring = OJVFile.CreateJVFileMSCBPatch(OJVProcessData, mPayMonth, mBatchName);
                }
                else if (_CompCode == "ASBL")
                {
                    mfilestring = OJVFile.CreateJVFileASBLPatch(OJVProcessData, mPayMonth, mBatchName);
                }
                else if (_CompCode == "ACABL")//Assam coop
                {
                    mfilestring = OJVFile.CreateJVFileAssamPatch(OJVProcessData, mPayMonth, mBatchName);
                }
                else if (_CompCode == "AWDCC")//Assam coop
                {
                    mfilestring = OJVFile.CreateJVFileAWDCCPatch(OJVProcessData, mPayMonth, mBatchName);
                }
                else if (_CompCode == "GCUB")//Finacus format Gudivada bank
                {
                    mfilestring = OJVFile.CreateJVFileGCUBPatch(OJVProcessData, mPayMonth, mBatchName);
                }
                else if (_CompCode == "KB")// Kerala bank
                {
                    // mfilestring = OJVFile.CreateJVFileKBPatch(OJVProcessData, mPayMonth);
                }
                else
                {
                    //mfilestring = OJVFile.CreateJVFile(OJVProcessData, mPayMonth);
                }

                var OJVDataCredit = OJVProcessData
                    .Where(e => e.CreditDebitFlag == "C")
                    .Sum(e => Convert.ToDouble(e.TransactionAmount));

                var OJVDataDebit = OJVProcessData
                    .Where(e => e.CreditDebitFlag == "D")
                    .Sum(e => Convert.ToDouble(e.TransactionAmount));

                CompanyPayroll ab = db.CompanyPayroll.Find(mCompanyPayrollId);
                if (ab.JVProcessData != null)
                {
                    OJVProcessData.AddRange(ab.JVProcessData);
                }

                ab.JVProcessData = OJVProcessData;
                db.CompanyPayroll.Attach(ab);
                db.Entry(ab).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();
                //write summary

                DateTime? RFromPeriod;
                if (mFromPeriod != "")
                    RFromPeriod = Convert.ToDateTime(mFromPeriod);
                else
                    RFromPeriod = null;

                DateTime? RToPeriod;
                if (mToPeriod != "")
                    RToPeriod = Convert.ToDateTime(mToPeriod);
                else
                    RToPeriod = null;


                JVProcessDataSummary OJVProcessDataSum = new JVProcessDataSummary
                {
                    BatchName = mBatchName,
                    ProcessMonth = mPayMonth,
                    ProcessDate = DateTime.Now.Date,
                    CreditAmount = Math.Round(OJVDataCredit, 2),
                    DebitAmount = Math.Round(OJVDataDebit, 2),
                    JVFileName = mfilestring,
                    ReleaseFrom = RFromPeriod,
                    ReleaseTo = RToPeriod,
                    DBTrack = dbt,
                };
                List<JVProcessDataSummary> OJVProcessDataSummary = new List<JVProcessDataSummary>();
                OJVProcessDataSummary.Add(OJVProcessDataSum);
                db.JVProcessDataSummary.Add(OJVProcessDataSum);
                db.SaveChanges();

                //OJVParameterComp.JVProcessDataSummary = OJVProcessDataSummary;
                //db.CompanyPayroll.Attach(OJVParameterComp);
                //db.Entry(OJVParameterComp).State = System.Data.Entity.EntityState.Modified;
                //db.SaveChanges();


                CompanyPayroll ac = db.CompanyPayroll.Find(mCompanyPayrollId);
                if (ac.JVProcessDataSummary != null)
                {
                    OJVProcessDataSummary.AddRange(ac.JVProcessDataSummary);
                }

                ac.JVProcessDataSummary = OJVProcessDataSummary;
                db.CompanyPayroll.Attach(ac);
                db.Entry(ac).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();

            }
        }

        public static List<JVProcessData> YearlyTDS(string mBatchName, string mPayMonth, List<Oyearyt> OYearlyT, int salid, DataBaseContext db)
        {
            var LOCChecking = db.JVParameter.Include(t => t.SalaryHead)
                                             .Include(t => t.SalaryHead.Select(a => a.SalHeadOperationType))
                                             .Where(t => t.JVGroup.LookupVal.ToUpper() == "LOCATION" && t.SalaryHead.FirstOrDefault().SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS")
                                             .SingleOrDefault();
            if (LOCChecking != null)
            {

                if (LOCChecking.Irregular == true)
                {
                    List<JVProcessData> OJVProcessDataBonus = OYearlyT
                    .Where(r => r.Loc_Code == LOCChecking.LocationIn
                        ).GroupBy(a => a.Loc_Code)
                       .Select(e => new JVProcessData
                       {
                           BatchName = mBatchName,
                           ProcessMonth = mPayMonth,
                           ProcessDate = DateTime.Now.Date,
                           JVParameter = db.JVParameter.Find(LOCChecking.Id),
                           //BranchCode = e.Key.LocationObj.LocCode,
                           BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == LOCChecking.LocationOut).SingleOrDefault().LocationObj.LocCode,
                           AccountProductCode = LOCChecking.JVProductCode,
                           AccountCustomerNo = "",
                           AccountCode = LOCChecking.AccountNo,
                           SubAccountCode = LOCChecking.SubAccountNo,
                           TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == salid).Select(x => x.TDSAmount)).Sum(u => u)).ToString("0.00"),
                           // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.TDSAmount)).Sum(u => u)).ToString(""),
                           //OYearlyT.Where(ra => ra.Loc_Code == ca.LocationIn).Select(q=>q.Osal.Sum(y=>y.AmountPaid)).SingleOrDefault(),
                           CreditDebitFlag = LOCChecking.CreditDebitFlag,
                           //   Narration = "YEARLYTDS" + "-" + LOCChecking.LocationIn,
                           SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault(),
                           Narration = NarrationFormat(LOCChecking.NarrationFormat != null && LOCChecking.NarrationFormat != "" ? LOCChecking.NarrationFormat.ToUpper() : "", mPayMonth, LOCChecking.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault().Name),
                       }).ToList();

                    return OJVProcessDataBonus;
                    // }

                }
                else
                {

                    var OSal = OYearlyT
                        .Select(e => e.Osal).ToList();

                    List<JVProcessData> OJVProcessDataBonus = OYearlyT

                    .GroupBy(a => new { Loc_Id = a.Loc_Code })

                    .Select(e => new JVProcessData
                    {
                        BatchName = mBatchName,
                        ProcessMonth = mPayMonth,
                        ProcessDate = DateTime.Now.Date,
                        JVParameter = db.JVParameter.Find(LOCChecking.Id),
                        // BranchCode = e.Key.LocationObj.LocCode,
                        BranchCode = db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode,
                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                        AccountProductCode = LOCChecking.JVProductCode,
                        AccountCustomerNo = "",
                        AccountCode = LOCChecking.AccountNo,
                        SubAccountCode = LOCChecking.SubAccountNo,
                        TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == salid).Select(x => x.TDSAmount)).Sum(u => u)).ToString("0.00"),
                        // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.TDSAmount)).Sum(u => u)).ToString(""),
                        // TransactionAmount = YEarlydataFilterAmt.Count() > 0 ? YEarlydataFilterAmt.Sum(t => t.TDSAmount).ToString() : "0.00",
                        CreditDebitFlag = LOCChecking.CreditDebitFlag,
                        //Narration = "YEARLYTDS" + "-" + db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode,
                        //SalaryHead = db.SalaryHead.Find(LOCChecking.SalaryHead.FirstOrDefault().Id)
                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault(),
                        Narration = NarrationFormat(LOCChecking.NarrationFormat != null && LOCChecking.NarrationFormat != "" ? LOCChecking.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault().Name),
                    }).ToList();

                    return OJVProcessDataBonus;
                }

            }
            else
            {
                var PayChecking = db.JVParameter.Include(t => t.SalaryHead)
                                             .Include(t => t.SalaryHead.Select(a => a.SalHeadOperationType))
                                             .Where(t => t.JVGroup.LookupVal.ToUpper() == "PAYMENTBANK" && t.SalaryHead.FirstOrDefault().SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS")
                                             .SingleOrDefault();
                if (PayChecking != null)
                {

                    var OSal = OYearlyT
                        .Select(e => e.Osal).ToList();

                    List<JVProcessData> OJVProcessDataBonus = OYearlyT

                    .GroupBy(a => new { PaymentBank = a.PaymentBankCode })

                    .Select(e => new JVProcessData
                    {
                        BatchName = mBatchName,
                        ProcessMonth = mPayMonth,
                        ProcessDate = DateTime.Now.Date,
                        JVParameter = db.JVParameter.Find(PayChecking.Id),
                        // BranchCode = e.Key.LocationObj.LocCode,
                        BranchCode = PayChecking.CreditDebitBranchCode,//db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode,
                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                        AccountProductCode = PayChecking.JVProductCode,
                        AccountCustomerNo = "",
                        AccountCode = PayChecking.AccountNo,
                        SubAccountCode = PayChecking.SubAccountNo,
                        TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == salid).Select(x => x.TDSAmount)).Sum(u => u)).ToString("0.00"),
                        // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.TDSAmount)).Sum(u => u)).ToString(""),
                        // TransactionAmount = YEarlydataFilterAmt.Count() > 0 ? YEarlydataFilterAmt.Sum(t => t.TDSAmount).ToString() : "0.00",
                        CreditDebitFlag = PayChecking.CreditDebitFlag,
                        //Narration = "YEARLYTDS" + "-" + PayChecking.CreditDebitBranchCode,
                        //SalaryHead = db.SalaryHead.Find(LOCChecking.SalaryHead.FirstOrDefault().Id)
                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault(),
                        DistributedCode = PayChecking.PaymentBank.Code,
                        Narration = NarrationFormat(LOCChecking.NarrationFormat != null && LOCChecking.NarrationFormat != "" ? LOCChecking.NarrationFormat.ToUpper() : "", mPayMonth, PayChecking.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault().Name),
                    }).ToList();

                    return OJVProcessDataBonus;
                }

            }
            return null;
        }

        ///for company ///new 

        public static List<JVProcessData> CompanyYearlyTDS(string mBatchName, string mPayMonth, List<Oyearyt> OYearlyT, int salid, DataBaseContext db)
        {
            var LOCChecking = db.JVParameter.Include(t => t.SalaryHead)
                                             .Include(t => t.SalaryHead.Select(a => a.SalHeadOperationType))
                                             .Where(t => t.JVGroup.LookupVal.ToUpper() == "COMPANY" && t.SalaryHead.FirstOrDefault().SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS")
                                             .SingleOrDefault();
            if (LOCChecking != null)
            {
                List<JVProcessData> OJVProcessDataBonus = OYearlyT
                    .GroupBy(a => a.Comp_code)
                   .Select(e => new JVProcessData
                   {
                       BatchName = mBatchName,
                       ProcessMonth = mPayMonth,
                       ProcessDate = DateTime.Now.Date,
                       JVParameter = db.JVParameter.Find(LOCChecking.Id),
                       //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == LOCChecking.LocationOut).SingleOrDefault().LocationObj.LocCode,
                       BranchCode = LOCChecking.CreditDebitBranchCode,
                       AccountProductCode = LOCChecking.JVProductCode,
                       AccountCustomerNo = "",
                       AccountCode = LOCChecking.AccountNo,
                       SubAccountCode = LOCChecking.SubAccountNo,
                       TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == salid).Select(x => x.TDSAmount)).Sum(u => u)).ToString("0.00"),
                       CreditDebitFlag = LOCChecking.CreditDebitFlag,
                       // Narration = "YEARLYTDS" + "-" + LOCChecking.LocationIn,
                       SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault(),
                       Narration = NarrationFormat(LOCChecking.NarrationFormat != null && LOCChecking.NarrationFormat != "" ? LOCChecking.NarrationFormat.ToUpper() : "", mPayMonth, LOCChecking.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault().Name),
                   }).ToList();

                return OJVProcessDataBonus;
            }
            else
            {
                var PayChecking = db.JVParameter.Include(t => t.SalaryHead)
                                             .Include(t => t.SalaryHead.Select(a => a.SalHeadOperationType))
                                             .Where(t => t.JVGroup.LookupVal.ToUpper() == "PAYMENTBANK" && t.SalaryHead.FirstOrDefault().SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS")
                                             .SingleOrDefault();
                if (PayChecking != null)
                {



                    var OSal = OYearlyT
                        .Select(e => e.Osal).ToList();

                    List<JVProcessData> OJVProcessDataBonus = OYearlyT

                    .GroupBy(a => new { PaymentBank = a.PaymentBankCode })

                    .Select(e => new JVProcessData
                    {
                        BatchName = mBatchName,
                        ProcessMonth = mPayMonth,
                        ProcessDate = DateTime.Now.Date,
                        JVParameter = db.JVParameter.Find(PayChecking.Id),
                        // BranchCode = e.Key.LocationObj.LocCode,
                        BranchCode = PayChecking.CreditDebitBranchCode,//db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode,
                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                        AccountProductCode = PayChecking.JVProductCode,
                        AccountCustomerNo = "",
                        AccountCode = PayChecking.AccountNo,
                        SubAccountCode = PayChecking.SubAccountNo,
                        TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == salid).Select(x => x.TDSAmount)).Sum(u => u)).ToString("0.00"),
                        // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.TDSAmount)).Sum(u => u)).ToString(""),
                        // TransactionAmount = YEarlydataFilterAmt.Count() > 0 ? YEarlydataFilterAmt.Sum(t => t.TDSAmount).ToString() : "0.00",
                        CreditDebitFlag = PayChecking.CreditDebitFlag,
                        // Narration = "YEARLYTDS" + "-" + PayChecking.CreditDebitBranchCode,
                        //SalaryHead = db.SalaryHead.Find(LOCChecking.SalaryHead.FirstOrDefault().Id)
                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault(),
                        DistributedCode = PayChecking.PaymentBank.Code,
                        Narration = NarrationFormat(PayChecking.NarrationFormat != null && PayChecking.NarrationFormat != "" ? PayChecking.NarrationFormat.ToUpper() : "", mPayMonth, PayChecking.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYTDS").FirstOrDefault().Name),
                    }).ToList();

                    return OJVProcessDataBonus;

                }
            }
            return null;
        }

        public static List<JVProcessData> YearlyOTHDED(string mBatchName, string mPayMonth, List<Oyearyt> OYearlyT, int salid, DataBaseContext db)
        {

            var LOCChecking = db.JVParameter.Include(t => t.SalaryHead)
                                                .Include(t => t.SalaryHead.Select(a => a.SalHeadOperationType))
                                                .Where(t => t.JVGroup.LookupVal.ToUpper() == "LOCATION" && t.SalaryHead.FirstOrDefault().SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED")
                                               .SingleOrDefault();
            if (LOCChecking != null)
            {
                if (LOCChecking.Irregular == true)
                {
                    List<JVProcessData> OJVProcessDataOTHDED = OYearlyT
                    .Where(r => r.Loc_Code == LOCChecking.LocationIn
                        ).GroupBy(a => a.Loc_Code)
                       .Select(e => new JVProcessData
                       {
                           BatchName = mBatchName,
                           ProcessMonth = mPayMonth,
                           ProcessDate = DateTime.Now.Date,
                           JVParameter = db.JVParameter.Find(LOCChecking.Id),
                           //BranchCode = e.Key.LocationObj.LocCode,
                           BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == LOCChecking.LocationOut).SingleOrDefault().LocationObj.LocCode,
                           AccountProductCode = LOCChecking.JVProductCode,
                           AccountCustomerNo = "",
                           AccountCode = LOCChecking.AccountNo,
                           SubAccountCode = LOCChecking.SubAccountNo,
                           // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.OtherDeduction)).Sum(u => u)).ToString(""),
                           //TransactionAmount = YEarlydataFilterAmt.Count() > 0 ? YEarlydataFilterAmt.Sum(t => t.OtherDeduction).ToString() : "0.00",
                           TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == salid).Select(x => x.OtherDeduction)).Sum(u => u)).ToString("0.00"),
                           //OYearlyT.Where(ra => ra.Loc_Code == ca.LocationIn).Select(q=>q.Osal.Sum(y=>y.AmountPaid)).SingleOrDefault(),
                           //  .Select(q => q.Osal.Sum(r => r.AmountPaid)),//,
                           CreditDebitFlag = LOCChecking.CreditDebitFlag,
                           // Narration = "YEARLYOTHDED" + "-" + LOCChecking.LocationIn,
                           SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED").SingleOrDefault(),
                           Narration = NarrationFormat(LOCChecking.NarrationFormat != null && LOCChecking.NarrationFormat != "" ? LOCChecking.NarrationFormat.ToUpper() : "", mPayMonth, LOCChecking.LocationIn, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED").FirstOrDefault().Name),
                       }).ToList();

                    return OJVProcessDataOTHDED;


                }
                else
                {
                    var OSal = OYearlyT
                        .Select(e => e.Osal).ToList();

                    List<JVProcessData> OJVProcessDataOTHDED = OYearlyT

                    .GroupBy(a => new { Loc_Id = a.Loc_Code })

                    .Select(e => new JVProcessData
                    {
                        BatchName = mBatchName,
                        ProcessMonth = mPayMonth,
                        ProcessDate = DateTime.Now.Date,
                        JVParameter = db.JVParameter.Find(LOCChecking.Id),
                        // BranchCode = e.Key.LocationObj.LocCode,
                        BranchCode = db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                        AccountProductCode = LOCChecking.JVProductCode,
                        AccountCustomerNo = "",
                        AccountCode = LOCChecking.AccountNo,
                        SubAccountCode = LOCChecking.SubAccountNo,
                        //TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.OtherDeduction)).Sum(u => u)).ToString(""),
                        TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == salid).Select(x => x.OtherDeduction)).Sum(u => u)).ToString("0.00"),
                        CreditDebitFlag = LOCChecking.CreditDebitFlag,
                        //Narration = "YEARLYOTHDED" + "-" + db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode,
                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED").SingleOrDefault(),
                        Narration = NarrationFormat(LOCChecking.NarrationFormat != null && LOCChecking.NarrationFormat != "" ? LOCChecking.NarrationFormat.ToUpper() : "", mPayMonth, db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).SingleOrDefault().LocationObj.LocCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED").FirstOrDefault().Name),
                    }).ToList();

                    return OJVProcessDataOTHDED;

                }
            }
            else
            {
                var PayChecking = db.JVParameter.Include(t => t.SalaryHead)
                                             .Include(t => t.SalaryHead.Select(a => a.SalHeadOperationType))
                                             .Where(t => t.JVGroup.LookupVal.ToUpper() == "PAYMENTBANK" && t.SalaryHead.FirstOrDefault().SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED")
                                             .SingleOrDefault();
                if (PayChecking != null)
                {



                    var OSal = OYearlyT
                        .Select(e => e.Osal).ToList();

                    List<JVProcessData> OJVProcessDataBonus = OYearlyT

                    .GroupBy(a => new { PaymentBank = a.PaymentBankCode })

                    .Select(e => new JVProcessData
                    {
                        BatchName = mBatchName,
                        ProcessMonth = mPayMonth,
                        ProcessDate = DateTime.Now.Date,
                        JVParameter = db.JVParameter.Find(PayChecking.Id),
                        // BranchCode = e.Key.LocationObj.LocCode,
                        BranchCode = PayChecking.CreditDebitBranchCode,//db.Location.Where(a => a.LocationObj.LocCode == e.Key.Loc_Id).Include(a => a.LocationObj).FirstOrDefault().LocationObj.LocCode,
                        // BranchCode =  db.Location.Include(a => a.LocationObj).Where(a => a.Id == e.location).SingleOrDefault().LocationObj.LocCode,
                        AccountProductCode = PayChecking.JVProductCode,
                        AccountCustomerNo = "",
                        AccountCode = PayChecking.AccountNo,
                        SubAccountCode = PayChecking.SubAccountNo,
                        TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == salid).Select(x => x.OtherDeduction)).Sum(u => u)).ToString("0.00"),
                        // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.TDSAmount)).Sum(u => u)).ToString(""),
                        // TransactionAmount = YEarlydataFilterAmt.Count() > 0 ? YEarlydataFilterAmt.Sum(t => t.TDSAmount).ToString() : "0.00",
                        CreditDebitFlag = PayChecking.CreditDebitFlag,
                        // Narration = "YEARLYTDS" + "-" + PayChecking.CreditDebitBranchCode,
                        //SalaryHead = db.SalaryHead.Find(LOCChecking.SalaryHead.FirstOrDefault().Id)
                        SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED").FirstOrDefault(),
                        DistributedCode = PayChecking.PaymentBank.Code,
                        Narration = NarrationFormat(LOCChecking.NarrationFormat != null && LOCChecking.NarrationFormat != "" ? LOCChecking.NarrationFormat.ToUpper() : "", mPayMonth, PayChecking.CreditDebitBranchCode, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED").FirstOrDefault().Name),
                    }).ToList();

                    return OJVProcessDataBonus;

                }
            }

            return null;
        }

        ///new company yearly othded

        public static List<JVProcessData> CompanyYearlyOTHDED(string mBatchName, string mPayMonth, List<Oyearyt> OYearlyT, int salid, DataBaseContext db)
        {

            var LOCChecking = db.JVParameter.Include(t => t.SalaryHead)
                                                .Include(t => t.SalaryHead.Select(a => a.SalHeadOperationType))
                                                .Where(t => t.JVGroup.LookupVal.ToUpper() == "COMPANY" && t.SalaryHead.FirstOrDefault().SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED")
                                               .SingleOrDefault();
            if (LOCChecking != null)
            {
                List<JVProcessData> OJVProcessDataOTHDED = OYearlyT
                    .GroupBy(a => a.Comp_code)
                   .Select(e => new JVProcessData
                   {
                       BatchName = mBatchName,
                       ProcessMonth = mPayMonth,
                       ProcessDate = DateTime.Now.Date,
                       JVParameter = db.JVParameter.Find(LOCChecking.Id),
                       //BranchCode = db.Location.Include(a => a.LocationObj).Where(a => a.LocationObj.LocCode == LOCChecking.LocationOut).SingleOrDefault().LocationObj.LocCode,
                       BranchCode = LOCChecking.CreditDebitBranchCode,
                       AccountProductCode = LOCChecking.JVProductCode,
                       AccountCustomerNo = "",
                       AccountCode = LOCChecking.AccountNo,
                       SubAccountCode = LOCChecking.SubAccountNo,
                       // TransactionAmount = (e.SelectMany(a => a.Osal.Select(x => x.OtherDeduction)).Sum(u => u)).ToString(""),
                       //TransactionAmount = YEarlydataFilterAmt.Count() > 0 ? YEarlydataFilterAmt.Sum(t => t.OtherDeduction).ToString() : "0.00",
                       TransactionAmount = (e.SelectMany(a => a.Osal.Where(qe => qe.SalaryHead.Id == salid).Select(x => x.OtherDeduction)).Sum(u => u)).ToString("0.00"),
                       CreditDebitFlag = LOCChecking.CreditDebitFlag,
                       //Narration = "YEARLYOTHDED" + "-" + LOCChecking.LocationIn,
                       SalaryHead = db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED").SingleOrDefault(),
                       Narration = NarrationFormat(LOCChecking.NarrationFormat != null && LOCChecking.NarrationFormat != "" ? LOCChecking.NarrationFormat.ToUpper() : "", mPayMonth, null, null, null, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED").FirstOrDefault().Code, db.SalaryHead.Include(r => r.SalHeadOperationType).Where(r => r.SalHeadOperationType.LookupVal.ToUpper() == "YEARLYOTHDED").FirstOrDefault().Name),
                   }).ToList();

                return OJVProcessDataOTHDED;
            }
            return null;
        }
    }
}