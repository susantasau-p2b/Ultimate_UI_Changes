@model P2BUltimate.Models.FileModel
@{
    Layout = null;
}

@using (Html.BeginForm("", "", FormMethod.Post, new { id = "frmUploadInvestment", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="form-group content_margine">
            @Html.LabelFor(model => model.files, htmlAttributes: new { @class = "control-label popup-content-label" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.files, "", new { @type = "file", @multiple = "multiple" })
            </div>
        </div>
        <div style="height:100%;width:100%;overflow:auto;" id="user_investment" class="content_margine"></div>
        <canvas id="pdfViewer"></canvas>
        <div id="container2" class="container2">
        </div>
    </div>
}
<style>
    .popup-content-label {
        width: 75px;
        float: left;
        display: block;
    }

    .imgdata {
        width: 100%;
        height: 100%;
    }
</style>
<script>

    $(function () {

        $.fn.doval = function () {
            //if ($('#employee').val() == 0) {
            //    return false;
            //}
            return true;

        };
        var imagesPreview = function (input, placeToInsertImagePreview) {
            debugger;
            if (input.files) {
                var filesAmount = input.files.length;
                $(placeToInsertImagePreview).empty();
                for (i = 0; i < filesAmount; i++) {
                    var reader = new FileReader();

                    reader.onload = function (event) {
                        $($.parseHTML('<img class="imgdata">')).attr('src', event.target.result).appendTo(placeToInsertImagePreview);
                    }

                    reader.readAsDataURL(input.files[i]);
                }
            }

        };
        // Loaded via <script> tag, create shortcut to access PDF.js exports.
        var pdfjsLib = window['pdfjs-dist/build/pdf'];
        // The workerSrc property shall be specified.

        $("#files").on("change", function (e) {
            debugger;
            var file = e.target.files[0]
            var filesize = e.target.files[0].size;
            var maxfilesize = 500000;//500kb
            if (filesize <= maxfilesize) {
                if (file.type == "application/pdf") {
                    $('#container2').empty();
                    $("#user_investment").hide();
                    $("#pdfViewer").show();
                    var fileReader = new FileReader();
                    fileReader.onload = function () {
                        var pdfData = new Uint8Array(this.result);
                        // Using DocumentInitParameters object to load binary data.
                        var loadingTask = pdfjsLib.getDocument({ data: pdfData });
                        loadingTask.promise.then(function (pdf) {
                            console.log('PDF loaded');

                            // Fetch the first page
                            // var pageNumber = 1;
                            //var container = document.getElementById("container")
                            for (var i = 1; i <= pdf.numPages; i++) {
                                pdf.getPage(i).then(function (page) {
                                    console.log('Page loaded');

                                    var scale = 1.5;
                                    var viewport = page.getViewport({ scale: scale });

                                    var div = document.createElement("div");

                                    // Set id attribute with page-#{pdf_page_number} format
                                    div.setAttribute("id", "page-" + (page.pageIndex + 1));

                                    // This will keep positions of child elements as per our needs
                                    div.setAttribute("style", "position: relative");
                                    div.setAttribute("class", "form-group content_margine");

                                    // Append div within div#container
                                    container2.appendChild(div);

                                    // Create a new Canvas element
                                    var canvas = document.createElement("canvas");

                                    // Append Canvas within div#page-#{pdf_page_number}
                                    div.appendChild(canvas);

                                    var context = canvas.getContext('2d');
                                    canvas.height = viewport.height;
                                    canvas.width = viewport.width;

                                    var renderContext = {
                                        canvasContext: context,
                                        viewport: viewport
                                    };

                                    // Render PDF page
                                    var renderTask = page.render(renderContext);
                                    renderTask.promise.then(function () {
                                        console.log('Page rendered');
                                    });
                                });
                            }
                        }, function (reason) {
                            // PDF loading error
                            console.error(reason);
                        });
                    };
                    fileReader.readAsArrayBuffer(file);
                } if (file.type == "image/jpeg" || file.type == "image/png") {
                    $("#user_investment").show();
                    $("#pdfViewer").hide();
                    imagesPreview(this, '#user_investment')
                }
                $('.ui-dialog-buttonpane').find('button:contains("Submit")').button('enable');
            } else {
                alert("File Size Should Not Be Grater than 500kb");
                $('.ui-dialog-buttonpane').find('button:contains("Submit")').button('disable');
            }
        });
        //$('#files').on('change', function () {
        //    imagesPreview(this, '#user_investment');
        //});
        $('#type').selectmenu().selectmenu("menuWidget");



        //$('#type').P2BSelectMenuAppend('@@Url.Action("GetLookupValue", "lookup")', 1004, ""); // To bind dropdown on page load

    });
</script> 